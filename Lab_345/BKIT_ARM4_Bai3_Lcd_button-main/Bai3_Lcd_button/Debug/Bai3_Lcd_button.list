
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004908  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004a90  08004a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa0  08004aa0  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aa8  08004aa8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aac  08004aac  00014aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08004ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          000001a0  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000eed3  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c70  00000000  00000000  0002ef7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ef8  00000000  00000000  00031bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b68  00000000  00000000  00032ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022983  00000000  00000000  00033650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000131a4  00000000  00000000  00055fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd1c9  00000000  00000000  00069177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c78  00000000  00000000  00136340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00139fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a78 	.word	0x08004a78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08004a78 	.word	0x08004a78

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2108      	movs	r1, #8
 80004cc:	4802      	ldr	r0, [pc, #8]	; (80004d8 <button_init+0x14>)
 80004ce:	f002 faeb 	bl	8002aa8 <HAL_GPIO_WritePin>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40020c00 	.word	0x40020c00

080004dc <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2108      	movs	r1, #8
 80004e6:	482f      	ldr	r0, [pc, #188]	; (80005a4 <button_Scan+0xc8>)
 80004e8:	f002 fade 	bl	8002aa8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2108      	movs	r1, #8
 80004f0:	482c      	ldr	r0, [pc, #176]	; (80005a4 <button_Scan+0xc8>)
 80004f2:	f002 fad9 	bl	8002aa8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004f6:	230a      	movs	r3, #10
 80004f8:	2202      	movs	r2, #2
 80004fa:	492b      	ldr	r1, [pc, #172]	; (80005a8 <button_Scan+0xcc>)
 80004fc:	482b      	ldr	r0, [pc, #172]	; (80005ac <button_Scan+0xd0>)
 80004fe:	f003 f916 	bl	800372e <HAL_SPI_Receive>
	  int button_index = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800050a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	e03f      	b.n	8000592 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b00      	cmp	r3, #0
 8000516:	db06      	blt.n	8000526 <button_Scan+0x4a>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b03      	cmp	r3, #3
 800051c:	dc03      	bgt.n	8000526 <button_Scan+0x4a>
			  button_index = i + 4;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3304      	adds	r3, #4
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e018      	b.n	8000558 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b03      	cmp	r3, #3
 800052a:	dd07      	ble.n	800053c <button_Scan+0x60>
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b07      	cmp	r3, #7
 8000530:	dc04      	bgt.n	800053c <button_Scan+0x60>
			  button_index = 7 - i;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f1c3 0307 	rsb	r3, r3, #7
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	e00d      	b.n	8000558 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b07      	cmp	r3, #7
 8000540:	dd06      	ble.n	8000550 <button_Scan+0x74>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b0b      	cmp	r3, #11
 8000546:	dc03      	bgt.n	8000550 <button_Scan+0x74>
			  button_index = i + 4;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3304      	adds	r3, #4
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	e003      	b.n	8000558 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f1c3 0317 	rsb	r3, r3, #23
 8000556:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <button_Scan+0xcc>)
 800055a:	881a      	ldrh	r2, [r3, #0]
 800055c:	897b      	ldrh	r3, [r7, #10]
 800055e:	4013      	ands	r3, r2
 8000560:	b29b      	uxth	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d005      	beq.n	8000572 <button_Scan+0x96>
 8000566:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <button_Scan+0xd4>)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2100      	movs	r1, #0
 800056c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000570:	e009      	b.n	8000586 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000572:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800057a:	3301      	adds	r3, #1
 800057c:	b299      	uxth	r1, r3
 800057e:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 8000586:	897b      	ldrh	r3, [r7, #10]
 8000588:	085b      	lsrs	r3, r3, #1
 800058a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3301      	adds	r3, #1
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	ddbc      	ble.n	8000512 <button_Scan+0x36>
	  }
}
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40020c00 	.word	0x40020c00
 80005a8:	20000070 	.word	0x20000070
 80005ac:	20000130 	.word	0x20000130
 80005b0:	20000050 	.word	0x20000050

080005b4 <led_blink>:
int init_red_time = 0;
int init_yellow_time = 0;
int init_green_time = 0;

void led_blink()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af02      	add	r7, sp, #8
		lcd_DrawCircle(60, 30, RED, 18, 0);
 80005ba:	2300      	movs	r3, #0
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2312      	movs	r3, #18
 80005c0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80005c4:	211e      	movs	r1, #30
 80005c6:	203c      	movs	r0, #60	; 0x3c
 80005c8:	f001 fb43 	bl	8001c52 <lcd_DrawCircle>
		lcd_DrawCircle(120, 30, YELLOW, 18, 0);
 80005cc:	2300      	movs	r3, #0
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2312      	movs	r3, #18
 80005d2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80005d6:	211e      	movs	r1, #30
 80005d8:	2078      	movs	r0, #120	; 0x78
 80005da:	f001 fb3a 	bl	8001c52 <lcd_DrawCircle>
		lcd_DrawCircle(180, 30, GREEN, 18, 0);
 80005de:	2300      	movs	r3, #0
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2312      	movs	r3, #18
 80005e4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80005e8:	211e      	movs	r1, #30
 80005ea:	20b4      	movs	r0, #180	; 0xb4
 80005ec:	f001 fb31 	bl	8001c52 <lcd_DrawCircle>

		lcd_DrawCircle(180, 270, RED, 18, 0);
 80005f0:	2300      	movs	r3, #0
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2312      	movs	r3, #18
 80005f6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80005fa:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80005fe:	20b4      	movs	r0, #180	; 0xb4
 8000600:	f001 fb27 	bl	8001c52 <lcd_DrawCircle>
		lcd_DrawCircle(120, 270, YELLOW, 18, 0);
 8000604:	2300      	movs	r3, #0
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2312      	movs	r3, #18
 800060a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800060e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000612:	2078      	movs	r0, #120	; 0x78
 8000614:	f001 fb1d 	bl	8001c52 <lcd_DrawCircle>
		lcd_DrawCircle(60, 270, GREEN, 18, 0);
 8000618:	2300      	movs	r3, #0
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2312      	movs	r3, #18
 800061e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000622:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000626:	203c      	movs	r0, #60	; 0x3c
 8000628:	f001 fb13 	bl	8001c52 <lcd_DrawCircle>

		lcd_DrawCircle(30, 90, RED, 18, 0);
 800062c:	2300      	movs	r3, #0
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2312      	movs	r3, #18
 8000632:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000636:	215a      	movs	r1, #90	; 0x5a
 8000638:	201e      	movs	r0, #30
 800063a:	f001 fb0a 	bl	8001c52 <lcd_DrawCircle>
		lcd_DrawCircle(30, 150, YELLOW, 18, 0);
 800063e:	2300      	movs	r3, #0
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2312      	movs	r3, #18
 8000644:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000648:	2196      	movs	r1, #150	; 0x96
 800064a:	201e      	movs	r0, #30
 800064c:	f001 fb01 	bl	8001c52 <lcd_DrawCircle>
		lcd_DrawCircle(30, 210, GREEN, 18, 0);
 8000650:	2300      	movs	r3, #0
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2312      	movs	r3, #18
 8000656:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800065a:	21d2      	movs	r1, #210	; 0xd2
 800065c:	201e      	movs	r0, #30
 800065e:	f001 faf8 	bl	8001c52 <lcd_DrawCircle>

		lcd_DrawCircle(210, 210, RED, 18, 0);
 8000662:	2300      	movs	r3, #0
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2312      	movs	r3, #18
 8000668:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800066c:	21d2      	movs	r1, #210	; 0xd2
 800066e:	20d2      	movs	r0, #210	; 0xd2
 8000670:	f001 faef 	bl	8001c52 <lcd_DrawCircle>
		lcd_DrawCircle(210, 150, YELLOW, 18, 0);
 8000674:	2300      	movs	r3, #0
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2312      	movs	r3, #18
 800067a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800067e:	2196      	movs	r1, #150	; 0x96
 8000680:	20d2      	movs	r0, #210	; 0xd2
 8000682:	f001 fae6 	bl	8001c52 <lcd_DrawCircle>
		lcd_DrawCircle(210, 90, GREEN, 18, 0);
 8000686:	2300      	movs	r3, #0
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2312      	movs	r3, #18
 800068c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000690:	215a      	movs	r1, #90	; 0x5a
 8000692:	20d2      	movs	r0, #210	; 0xd2
 8000694:	f001 fadd 	bl	8001c52 <lcd_DrawCircle>
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <display_led>:
void display_led(int status, int direction)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	switch (direction) {
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	4ac4      	ldr	r2, [pc, #784]	; (80009c0 <display_led+0x320>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d005      	beq.n	80006be <display_led+0x1e>
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	4ac3      	ldr	r2, [pc, #780]	; (80009c4 <display_led+0x324>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	f000 80c4 	beq.w	8000844 <display_led+0x1a4>
				default:
					break;
			}
			break;
		default:
			break;
 80006bc:	e17b      	b.n	80009b6 <display_led+0x316>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4ac1      	ldr	r2, [pc, #772]	; (80009c8 <display_led+0x328>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	f000 8082 	beq.w	80007cc <display_led+0x12c>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4abf      	ldr	r2, [pc, #764]	; (80009c8 <display_led+0x328>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	f300 80b7 	bgt.w	8000840 <display_led+0x1a0>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4abd      	ldr	r2, [pc, #756]	; (80009cc <display_led+0x32c>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d004      	beq.n	80006e4 <display_led+0x44>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4abc      	ldr	r2, [pc, #752]	; (80009d0 <display_led+0x330>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d03a      	beq.n	8000758 <display_led+0xb8>
					break;
 80006e2:	e0ad      	b.n	8000840 <display_led+0x1a0>
					lcd_DrawCircle(60, 30, RED, 18, 1);
 80006e4:	2301      	movs	r3, #1
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2312      	movs	r3, #18
 80006ea:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80006ee:	211e      	movs	r1, #30
 80006f0:	203c      	movs	r0, #60	; 0x3c
 80006f2:	f001 faae 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(120, 30, YELLOW, 18, 0);
 80006f6:	2300      	movs	r3, #0
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2312      	movs	r3, #18
 80006fc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000700:	211e      	movs	r1, #30
 8000702:	2078      	movs	r0, #120	; 0x78
 8000704:	f001 faa5 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(180, 30, GREEN, 18, 0);
 8000708:	2300      	movs	r3, #0
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2312      	movs	r3, #18
 800070e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000712:	211e      	movs	r1, #30
 8000714:	20b4      	movs	r0, #180	; 0xb4
 8000716:	f001 fa9c 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(180, 270, RED, 18, 1);
 800071a:	2301      	movs	r3, #1
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2312      	movs	r3, #18
 8000720:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000724:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000728:	20b4      	movs	r0, #180	; 0xb4
 800072a:	f001 fa92 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(120, 270, YELLOW, 18, 0);
 800072e:	2300      	movs	r3, #0
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2312      	movs	r3, #18
 8000734:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000738:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800073c:	2078      	movs	r0, #120	; 0x78
 800073e:	f001 fa88 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(60, 270, GREEN, 18, 0);
 8000742:	2300      	movs	r3, #0
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2312      	movs	r3, #18
 8000748:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800074c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000750:	203c      	movs	r0, #60	; 0x3c
 8000752:	f001 fa7e 	bl	8001c52 <lcd_DrawCircle>
					break;
 8000756:	e074      	b.n	8000842 <display_led+0x1a2>
					lcd_DrawCircle(60, 30, RED, 18, 0);
 8000758:	2300      	movs	r3, #0
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2312      	movs	r3, #18
 800075e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000762:	211e      	movs	r1, #30
 8000764:	203c      	movs	r0, #60	; 0x3c
 8000766:	f001 fa74 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(120, 30, YELLOW, 18, 1);
 800076a:	2301      	movs	r3, #1
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2312      	movs	r3, #18
 8000770:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000774:	211e      	movs	r1, #30
 8000776:	2078      	movs	r0, #120	; 0x78
 8000778:	f001 fa6b 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(180, 30, GREEN, 18, 0);
 800077c:	2300      	movs	r3, #0
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2312      	movs	r3, #18
 8000782:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000786:	211e      	movs	r1, #30
 8000788:	20b4      	movs	r0, #180	; 0xb4
 800078a:	f001 fa62 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(180, 270, RED, 18, 0);
 800078e:	2300      	movs	r3, #0
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2312      	movs	r3, #18
 8000794:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000798:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800079c:	20b4      	movs	r0, #180	; 0xb4
 800079e:	f001 fa58 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(120, 270, YELLOW, 18, 1);
 80007a2:	2301      	movs	r3, #1
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2312      	movs	r3, #18
 80007a8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80007ac:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007b0:	2078      	movs	r0, #120	; 0x78
 80007b2:	f001 fa4e 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(60, 270, GREEN, 18, 0);
 80007b6:	2300      	movs	r3, #0
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	2312      	movs	r3, #18
 80007bc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80007c0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80007c4:	203c      	movs	r0, #60	; 0x3c
 80007c6:	f001 fa44 	bl	8001c52 <lcd_DrawCircle>
					break;
 80007ca:	e03a      	b.n	8000842 <display_led+0x1a2>
					lcd_DrawCircle(60, 30, RED, 18, 0);
 80007cc:	2300      	movs	r3, #0
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2312      	movs	r3, #18
 80007d2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80007d6:	211e      	movs	r1, #30
 80007d8:	203c      	movs	r0, #60	; 0x3c
 80007da:	f001 fa3a 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(120, 30, YELLOW, 18, 0);
 80007de:	2300      	movs	r3, #0
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	2312      	movs	r3, #18
 80007e4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80007e8:	211e      	movs	r1, #30
 80007ea:	2078      	movs	r0, #120	; 0x78
 80007ec:	f001 fa31 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(180, 30, GREEN, 18, 1);
 80007f0:	2301      	movs	r3, #1
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2312      	movs	r3, #18
 80007f6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80007fa:	211e      	movs	r1, #30
 80007fc:	20b4      	movs	r0, #180	; 0xb4
 80007fe:	f001 fa28 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(180, 270, RED, 18, 0);
 8000802:	2300      	movs	r3, #0
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	2312      	movs	r3, #18
 8000808:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800080c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000810:	20b4      	movs	r0, #180	; 0xb4
 8000812:	f001 fa1e 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(120, 270, YELLOW, 18, 0);
 8000816:	2300      	movs	r3, #0
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2312      	movs	r3, #18
 800081c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000820:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000824:	2078      	movs	r0, #120	; 0x78
 8000826:	f001 fa14 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(60, 270, GREEN, 18, 1);
 800082a:	2301      	movs	r3, #1
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2312      	movs	r3, #18
 8000830:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000834:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000838:	203c      	movs	r0, #60	; 0x3c
 800083a:	f001 fa0a 	bl	8001c52 <lcd_DrawCircle>
					break;
 800083e:	e000      	b.n	8000842 <display_led+0x1a2>
					break;
 8000840:	bf00      	nop
			break;
 8000842:	e0b8      	b.n	80009b6 <display_led+0x316>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a60      	ldr	r2, [pc, #384]	; (80009c8 <display_led+0x328>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d07b      	beq.n	8000944 <display_led+0x2a4>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a5e      	ldr	r2, [pc, #376]	; (80009c8 <display_led+0x328>)
 8000850:	4293      	cmp	r3, r2
 8000852:	f300 80ae 	bgt.w	80009b2 <display_led+0x312>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a5c      	ldr	r2, [pc, #368]	; (80009cc <display_led+0x32c>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d004      	beq.n	8000868 <display_led+0x1c8>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a5b      	ldr	r2, [pc, #364]	; (80009d0 <display_led+0x330>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d037      	beq.n	80008d6 <display_led+0x236>
					break;
 8000866:	e0a4      	b.n	80009b2 <display_led+0x312>
					lcd_DrawCircle(30, 90, RED, 18, 1);
 8000868:	2301      	movs	r3, #1
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2312      	movs	r3, #18
 800086e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000872:	215a      	movs	r1, #90	; 0x5a
 8000874:	201e      	movs	r0, #30
 8000876:	f001 f9ec 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(30, 150, YELLOW, 18, 0);
 800087a:	2300      	movs	r3, #0
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2312      	movs	r3, #18
 8000880:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000884:	2196      	movs	r1, #150	; 0x96
 8000886:	201e      	movs	r0, #30
 8000888:	f001 f9e3 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(30, 210, GREEN, 18, 0);
 800088c:	2300      	movs	r3, #0
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2312      	movs	r3, #18
 8000892:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000896:	21d2      	movs	r1, #210	; 0xd2
 8000898:	201e      	movs	r0, #30
 800089a:	f001 f9da 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(210, 210, RED, 18, 1);
 800089e:	2301      	movs	r3, #1
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	2312      	movs	r3, #18
 80008a4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80008a8:	21d2      	movs	r1, #210	; 0xd2
 80008aa:	20d2      	movs	r0, #210	; 0xd2
 80008ac:	f001 f9d1 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(210, 150, YELLOW, 18, 0);
 80008b0:	2300      	movs	r3, #0
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2312      	movs	r3, #18
 80008b6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80008ba:	2196      	movs	r1, #150	; 0x96
 80008bc:	20d2      	movs	r0, #210	; 0xd2
 80008be:	f001 f9c8 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(210, 90, GREEN, 18, 0);
 80008c2:	2300      	movs	r3, #0
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2312      	movs	r3, #18
 80008c8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80008cc:	215a      	movs	r1, #90	; 0x5a
 80008ce:	20d2      	movs	r0, #210	; 0xd2
 80008d0:	f001 f9bf 	bl	8001c52 <lcd_DrawCircle>
					break;
 80008d4:	e06e      	b.n	80009b4 <display_led+0x314>
					lcd_DrawCircle(30, 90, RED, 18, 0);
 80008d6:	2300      	movs	r3, #0
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2312      	movs	r3, #18
 80008dc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80008e0:	215a      	movs	r1, #90	; 0x5a
 80008e2:	201e      	movs	r0, #30
 80008e4:	f001 f9b5 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(30, 150, YELLOW, 18, 1);
 80008e8:	2301      	movs	r3, #1
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2312      	movs	r3, #18
 80008ee:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80008f2:	2196      	movs	r1, #150	; 0x96
 80008f4:	201e      	movs	r0, #30
 80008f6:	f001 f9ac 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(30, 210, GREEN, 18, 0);
 80008fa:	2300      	movs	r3, #0
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2312      	movs	r3, #18
 8000900:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000904:	21d2      	movs	r1, #210	; 0xd2
 8000906:	201e      	movs	r0, #30
 8000908:	f001 f9a3 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(210, 210, RED, 18, 0);
 800090c:	2300      	movs	r3, #0
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2312      	movs	r3, #18
 8000912:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000916:	21d2      	movs	r1, #210	; 0xd2
 8000918:	20d2      	movs	r0, #210	; 0xd2
 800091a:	f001 f99a 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(210, 150, YELLOW, 18, 1);
 800091e:	2301      	movs	r3, #1
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2312      	movs	r3, #18
 8000924:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000928:	2196      	movs	r1, #150	; 0x96
 800092a:	20d2      	movs	r0, #210	; 0xd2
 800092c:	f001 f991 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(210, 90, GREEN, 18, 0);
 8000930:	2300      	movs	r3, #0
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2312      	movs	r3, #18
 8000936:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800093a:	215a      	movs	r1, #90	; 0x5a
 800093c:	20d2      	movs	r0, #210	; 0xd2
 800093e:	f001 f988 	bl	8001c52 <lcd_DrawCircle>
					break;
 8000942:	e037      	b.n	80009b4 <display_led+0x314>
					lcd_DrawCircle(30, 90, RED, 18, 0);
 8000944:	2300      	movs	r3, #0
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2312      	movs	r3, #18
 800094a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800094e:	215a      	movs	r1, #90	; 0x5a
 8000950:	201e      	movs	r0, #30
 8000952:	f001 f97e 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(30, 150, YELLOW, 18, 0);
 8000956:	2300      	movs	r3, #0
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2312      	movs	r3, #18
 800095c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000960:	2196      	movs	r1, #150	; 0x96
 8000962:	201e      	movs	r0, #30
 8000964:	f001 f975 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(30, 210, GREEN, 18, 1);
 8000968:	2301      	movs	r3, #1
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2312      	movs	r3, #18
 800096e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000972:	21d2      	movs	r1, #210	; 0xd2
 8000974:	201e      	movs	r0, #30
 8000976:	f001 f96c 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(210, 210, RED, 18, 0);
 800097a:	2300      	movs	r3, #0
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2312      	movs	r3, #18
 8000980:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000984:	21d2      	movs	r1, #210	; 0xd2
 8000986:	20d2      	movs	r0, #210	; 0xd2
 8000988:	f001 f963 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(210, 150, YELLOW, 18, 0);
 800098c:	2300      	movs	r3, #0
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2312      	movs	r3, #18
 8000992:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000996:	2196      	movs	r1, #150	; 0x96
 8000998:	20d2      	movs	r0, #210	; 0xd2
 800099a:	f001 f95a 	bl	8001c52 <lcd_DrawCircle>
					lcd_DrawCircle(210, 90, GREEN, 18, 1);
 800099e:	2301      	movs	r3, #1
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2312      	movs	r3, #18
 80009a4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009a8:	215a      	movs	r1, #90	; 0x5a
 80009aa:	20d2      	movs	r0, #210	; 0xd2
 80009ac:	f001 f951 	bl	8001c52 <lcd_DrawCircle>
					break;
 80009b0:	e000      	b.n	80009b4 <display_led+0x314>
					break;
 80009b2:	bf00      	nop
			break;
 80009b4:	bf00      	nop
	}
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	000f424b 	.word	0x000f424b
 80009c4:	000f424c 	.word	0x000f424c
 80009c8:	000f4249 	.word	0x000f4249
 80009cc:	000f4245 	.word	0x000f4245
 80009d0:	000f4247 	.word	0x000f4247

080009d4 <mode_normal>:


void mode_normal()
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	if(status_NS == RED_LED)
 80009d8:	4b3f      	ldr	r3, [pc, #252]	; (8000ad8 <mode_normal+0x104>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a3f      	ldr	r2, [pc, #252]	; (8000adc <mode_normal+0x108>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d12e      	bne.n	8000a40 <mode_normal+0x6c>
	{
		if(counter_NS == 0 && counter_EW == 0)
 80009e2:	4b3f      	ldr	r3, [pc, #252]	; (8000ae0 <mode_normal+0x10c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d115      	bne.n	8000a16 <mode_normal+0x42>
 80009ea:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <mode_normal+0x110>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d111      	bne.n	8000a16 <mode_normal+0x42>
		{
			lcd_Clear(WHITE);
 80009f2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009f6:	f000 fed3 	bl	80017a0 <lcd_Clear>
			counter_NS = init_green_time;
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <mode_normal+0x114>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a38      	ldr	r2, [pc, #224]	; (8000ae0 <mode_normal+0x10c>)
 8000a00:	6013      	str	r3, [r2, #0]
			counter_EW = init_red_time;
 8000a02:	4b3a      	ldr	r3, [pc, #232]	; (8000aec <mode_normal+0x118>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a37      	ldr	r2, [pc, #220]	; (8000ae4 <mode_normal+0x110>)
 8000a08:	6013      	str	r3, [r2, #0]
			status_NS = GREEN_LED;
 8000a0a:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <mode_normal+0x104>)
 8000a0c:	4a38      	ldr	r2, [pc, #224]	; (8000af0 <mode_normal+0x11c>)
 8000a0e:	601a      	str	r2, [r3, #0]
			status_EW = RED_LED;
 8000a10:	4b38      	ldr	r3, [pc, #224]	; (8000af4 <mode_normal+0x120>)
 8000a12:	4a32      	ldr	r2, [pc, #200]	; (8000adc <mode_normal+0x108>)
 8000a14:	601a      	str	r2, [r3, #0]
		}
		if(counter_EW == 0 && counter_NS > 0)
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <mode_normal+0x110>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d143      	bne.n	8000aa6 <mode_normal+0xd2>
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <mode_normal+0x10c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	dd3f      	ble.n	8000aa6 <mode_normal+0xd2>
		{
			lcd_Clear(WHITE);
 8000a26:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a2a:	f000 feb9 	bl	80017a0 <lcd_Clear>
			counter_EW = init_yellow_time + 1;
 8000a2e:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <mode_normal+0x124>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a2b      	ldr	r2, [pc, #172]	; (8000ae4 <mode_normal+0x110>)
 8000a36:	6013      	str	r3, [r2, #0]
			status_EW = YELLOW_LED;
 8000a38:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <mode_normal+0x120>)
 8000a3a:	4a30      	ldr	r2, [pc, #192]	; (8000afc <mode_normal+0x128>)
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	e032      	b.n	8000aa6 <mode_normal+0xd2>
		}
	}
	else if(status_EW == RED_LED)
 8000a40:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <mode_normal+0x120>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a25      	ldr	r2, [pc, #148]	; (8000adc <mode_normal+0x108>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d12d      	bne.n	8000aa6 <mode_normal+0xd2>
	{
		if(counter_NS == 0 && counter_EW == 0)
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <mode_normal+0x10c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d115      	bne.n	8000a7e <mode_normal+0xaa>
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <mode_normal+0x110>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d111      	bne.n	8000a7e <mode_normal+0xaa>
		{
			lcd_Clear(WHITE);
 8000a5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a5e:	f000 fe9f 	bl	80017a0 <lcd_Clear>
			counter_NS = init_red_time;
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <mode_normal+0x118>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <mode_normal+0x10c>)
 8000a68:	6013      	str	r3, [r2, #0]
			counter_EW = init_green_time;
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <mode_normal+0x114>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <mode_normal+0x110>)
 8000a70:	6013      	str	r3, [r2, #0]
			status_NS = RED_LED;
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <mode_normal+0x104>)
 8000a74:	4a19      	ldr	r2, [pc, #100]	; (8000adc <mode_normal+0x108>)
 8000a76:	601a      	str	r2, [r3, #0]
			status_EW = GREEN_LED;
 8000a78:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <mode_normal+0x120>)
 8000a7a:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <mode_normal+0x11c>)
 8000a7c:	601a      	str	r2, [r3, #0]
		}
		if(counter_NS == 0 && counter_EW > 0)
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <mode_normal+0x10c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10f      	bne.n	8000aa6 <mode_normal+0xd2>
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <mode_normal+0x110>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	dd0b      	ble.n	8000aa6 <mode_normal+0xd2>
		{
			lcd_Clear(WHITE);
 8000a8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a92:	f000 fe85 	bl	80017a0 <lcd_Clear>
			counter_NS = init_yellow_time + 1;
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <mode_normal+0x124>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <mode_normal+0x10c>)
 8000a9e:	6013      	str	r3, [r2, #0]
			status_NS = YELLOW_LED;
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <mode_normal+0x104>)
 8000aa2:	4a16      	ldr	r2, [pc, #88]	; (8000afc <mode_normal+0x128>)
 8000aa4:	601a      	str	r2, [r3, #0]
		}
	}

	display_led(status_NS, NORTH_SOUTH);
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <mode_normal+0x104>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4915      	ldr	r1, [pc, #84]	; (8000b00 <mode_normal+0x12c>)
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fdf7 	bl	80006a0 <display_led>
	display_led(status_EW, EAST_WEST);
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <mode_normal+0x120>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4913      	ldr	r1, [pc, #76]	; (8000b04 <mode_normal+0x130>)
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fdf1 	bl	80006a0 <display_led>
	counter_NS--;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <mode_normal+0x10c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <mode_normal+0x10c>)
 8000ac6:	6013      	str	r3, [r2, #0]
	counter_EW--;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <mode_normal+0x110>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <mode_normal+0x110>)
 8000ad0:	6013      	str	r3, [r2, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	000f4245 	.word	0x000f4245
 8000ae0:	20000074 	.word	0x20000074
 8000ae4:	20000078 	.word	0x20000078
 8000ae8:	20000088 	.word	0x20000088
 8000aec:	20000080 	.word	0x20000080
 8000af0:	000f4249 	.word	0x000f4249
 8000af4:	20000004 	.word	0x20000004
 8000af8:	20000084 	.word	0x20000084
 8000afc:	000f4247 	.word	0x000f4247
 8000b00:	000f424b 	.word	0x000f424b
 8000b04:	000f424c 	.word	0x000f424c

08000b08 <increase_time_led>:

void increase_time_led()
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
	switch (status_mode) {
 8000b0c:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <increase_time_led+0x88>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a20      	ldr	r2, [pc, #128]	; (8000b94 <increase_time_led+0x8c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d023      	beq.n	8000b5e <increase_time_led+0x56>
 8000b16:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <increase_time_led+0x8c>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	dc32      	bgt.n	8000b82 <increase_time_led+0x7a>
 8000b1c:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <increase_time_led+0x90>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d003      	beq.n	8000b2a <increase_time_led+0x22>
 8000b22:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <increase_time_led+0x94>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d00d      	beq.n	8000b44 <increase_time_led+0x3c>
				green_time = 1;
			}
			green_time++;
			break;
		default:
			break;
 8000b28:	e02b      	b.n	8000b82 <increase_time_led+0x7a>
			if(red_time > 99)
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <increase_time_led+0x98>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b63      	cmp	r3, #99	; 0x63
 8000b30:	dd02      	ble.n	8000b38 <increase_time_led+0x30>
				red_time = 1;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <increase_time_led+0x98>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	601a      	str	r2, [r3, #0]
			red_time++;
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <increase_time_led+0x98>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <increase_time_led+0x98>)
 8000b40:	6013      	str	r3, [r2, #0]
			break;
 8000b42:	e01f      	b.n	8000b84 <increase_time_led+0x7c>
			if(yellow_time > 3)
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <increase_time_led+0x9c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	dd02      	ble.n	8000b52 <increase_time_led+0x4a>
				yellow_time = 1;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <increase_time_led+0x9c>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
			yellow_time++;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <increase_time_led+0x9c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	3301      	adds	r3, #1
 8000b58:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <increase_time_led+0x9c>)
 8000b5a:	6013      	str	r3, [r2, #0]
			break;
 8000b5c:	e012      	b.n	8000b84 <increase_time_led+0x7c>
			if(green_time >= red_time - yellow_time)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <increase_time_led+0x98>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <increase_time_led+0x9c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	1ad2      	subs	r2, r2, r3
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <increase_time_led+0xa0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dc02      	bgt.n	8000b76 <increase_time_led+0x6e>
				green_time = 1;
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <increase_time_led+0xa0>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	601a      	str	r2, [r3, #0]
			green_time++;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <increase_time_led+0xa0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <increase_time_led+0xa0>)
 8000b7e:	6013      	str	r3, [r2, #0]
			break;
 8000b80:	e000      	b.n	8000b84 <increase_time_led+0x7c>
			break;
 8000b82:	bf00      	nop
	}
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	000f4244 	.word	0x000f4244
 8000b98:	000f4242 	.word	0x000f4242
 8000b9c:	000f4243 	.word	0x000f4243
 8000ba0:	2000000c 	.word	0x2000000c
 8000ba4:	20000010 	.word	0x20000010
 8000ba8:	20000014 	.word	0x20000014

08000bac <decrease_time_led>:

void decrease_time_led()
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
	switch (status_mode) {
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <decrease_time_led+0x84>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1f      	ldr	r2, [pc, #124]	; (8000c34 <decrease_time_led+0x88>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d023      	beq.n	8000c02 <decrease_time_led+0x56>
 8000bba:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <decrease_time_led+0x88>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	dc31      	bgt.n	8000c24 <decrease_time_led+0x78>
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <decrease_time_led+0x8c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d003      	beq.n	8000bce <decrease_time_led+0x22>
 8000bc6:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <decrease_time_led+0x90>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d00d      	beq.n	8000be8 <decrease_time_led+0x3c>
				green_time = init_red_time - init_yellow_time;
			}
			green_time--;
			break;
		default:
			break;
 8000bcc:	e02a      	b.n	8000c24 <decrease_time_led+0x78>
			if(red_time <= 0)
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <decrease_time_led+0x94>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	dc02      	bgt.n	8000bdc <decrease_time_led+0x30>
				red_time = 99;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <decrease_time_led+0x94>)
 8000bd8:	2263      	movs	r2, #99	; 0x63
 8000bda:	601a      	str	r2, [r3, #0]
			red_time--;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <decrease_time_led+0x94>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	4a17      	ldr	r2, [pc, #92]	; (8000c40 <decrease_time_led+0x94>)
 8000be4:	6013      	str	r3, [r2, #0]
			break;
 8000be6:	e01e      	b.n	8000c26 <decrease_time_led+0x7a>
			if(yellow_time <= 0)
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <decrease_time_led+0x98>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	dc02      	bgt.n	8000bf6 <decrease_time_led+0x4a>
				yellow_time = 3;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <decrease_time_led+0x98>)
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	601a      	str	r2, [r3, #0]
			yellow_time++;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <decrease_time_led+0x98>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <decrease_time_led+0x98>)
 8000bfe:	6013      	str	r3, [r2, #0]
			break;
 8000c00:	e011      	b.n	8000c26 <decrease_time_led+0x7a>
			if(green_time <= 0)
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <decrease_time_led+0x9c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	dc06      	bgt.n	8000c18 <decrease_time_led+0x6c>
				green_time = init_red_time - init_yellow_time;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <decrease_time_led+0xa0>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <decrease_time_led+0xa4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <decrease_time_led+0x9c>)
 8000c16:	6013      	str	r3, [r2, #0]
			green_time--;
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <decrease_time_led+0x9c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <decrease_time_led+0x9c>)
 8000c20:	6013      	str	r3, [r2, #0]
			break;
 8000c22:	e000      	b.n	8000c26 <decrease_time_led+0x7a>
			break;
 8000c24:	bf00      	nop
	}
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	20000008 	.word	0x20000008
 8000c34:	000f4244 	.word	0x000f4244
 8000c38:	000f4242 	.word	0x000f4242
 8000c3c:	000f4243 	.word	0x000f4243
 8000c40:	2000000c 	.word	0x2000000c
 8000c44:	20000010 	.word	0x20000010
 8000c48:	20000014 	.word	0x20000014
 8000c4c:	20000080 	.word	0x20000080
 8000c50:	20000084 	.word	0x20000084

08000c54 <fsm_traffic_light>:

void fsm_traffic_light(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	button_Scan();
 8000c58:	f7ff fc40 	bl	80004dc <button_Scan>
	switch (status_mode) {
 8000c5c:	4ba7      	ldr	r3, [pc, #668]	; (8000efc <fsm_traffic_light+0x2a8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8000c64:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	f200 832c 	bhi.w	80012c6 <fsm_traffic_light+0x672>
 8000c6e:	a201      	add	r2, pc, #4	; (adr r2, 8000c74 <fsm_traffic_light+0x20>)
 8000c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c74:	08000c89 	.word	0x08000c89
 8000c78:	08000cc3 	.word	0x08000cc3
 8000c7c:	08000d79 	.word	0x08000d79
 8000c80:	08000f55 	.word	0x08000f55
 8000c84:	080010f1 	.word	0x080010f1
		case INIT:
			init_red_time = red_time;
 8000c88:	4b9d      	ldr	r3, [pc, #628]	; (8000f00 <fsm_traffic_light+0x2ac>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a9d      	ldr	r2, [pc, #628]	; (8000f04 <fsm_traffic_light+0x2b0>)
 8000c8e:	6013      	str	r3, [r2, #0]
			init_yellow_time = yellow_time;
 8000c90:	4b9d      	ldr	r3, [pc, #628]	; (8000f08 <fsm_traffic_light+0x2b4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a9d      	ldr	r2, [pc, #628]	; (8000f0c <fsm_traffic_light+0x2b8>)
 8000c96:	6013      	str	r3, [r2, #0]
			init_green_time = green_time;
 8000c98:	4b9d      	ldr	r3, [pc, #628]	; (8000f10 <fsm_traffic_light+0x2bc>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a9d      	ldr	r2, [pc, #628]	; (8000f14 <fsm_traffic_light+0x2c0>)
 8000c9e:	6013      	str	r3, [r2, #0]
			status_NS = RED_LED;
 8000ca0:	4b9d      	ldr	r3, [pc, #628]	; (8000f18 <fsm_traffic_light+0x2c4>)
 8000ca2:	4a9e      	ldr	r2, [pc, #632]	; (8000f1c <fsm_traffic_light+0x2c8>)
 8000ca4:	601a      	str	r2, [r3, #0]
			counter_NS = init_red_time;
 8000ca6:	4b97      	ldr	r3, [pc, #604]	; (8000f04 <fsm_traffic_light+0x2b0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a9d      	ldr	r2, [pc, #628]	; (8000f20 <fsm_traffic_light+0x2cc>)
 8000cac:	6013      	str	r3, [r2, #0]
			status_EW = GREEN_LED;
 8000cae:	4b9d      	ldr	r3, [pc, #628]	; (8000f24 <fsm_traffic_light+0x2d0>)
 8000cb0:	4a9d      	ldr	r2, [pc, #628]	; (8000f28 <fsm_traffic_light+0x2d4>)
 8000cb2:	601a      	str	r2, [r3, #0]
			counter_EW = init_green_time;
 8000cb4:	4b97      	ldr	r3, [pc, #604]	; (8000f14 <fsm_traffic_light+0x2c0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a9c      	ldr	r2, [pc, #624]	; (8000f2c <fsm_traffic_light+0x2d8>)
 8000cba:	6013      	str	r3, [r2, #0]
			status_mode = NORMAL;
 8000cbc:	4b8f      	ldr	r3, [pc, #572]	; (8000efc <fsm_traffic_light+0x2a8>)
 8000cbe:	4a9c      	ldr	r2, [pc, #624]	; (8000f30 <fsm_traffic_light+0x2dc>)
 8000cc0:	601a      	str	r2, [r3, #0]
		case NORMAL:
//			led7_SetDigit(counter_NS/10, 0, 0);
//			led7_SetDigit(counter_NS%10, 1, 0);
//			led7_SetDigit(counter_EW/10, 2, 0);
//			led7_SetDigit(counter_EW%10, 3, 0);
			if(flag_timer2[5] == 1)
 8000cc2:	4b9c      	ldr	r3, [pc, #624]	; (8000f34 <fsm_traffic_light+0x2e0>)
 8000cc4:	895b      	ldrh	r3, [r3, #10]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d13b      	bne.n	8000d42 <fsm_traffic_light+0xee>
			{
				led7_SetDigit(counter_NS/10, 0, 0);
 8000cca:	4b95      	ldr	r3, [pc, #596]	; (8000f20 <fsm_traffic_light+0x2cc>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a9a      	ldr	r2, [pc, #616]	; (8000f38 <fsm_traffic_light+0x2e4>)
 8000cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd4:	1092      	asrs	r2, r2, #2
 8000cd6:	17db      	asrs	r3, r3, #31
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 f8bc 	bl	8001e5c <led7_SetDigit>
				led7_SetDigit(counter_NS%10, 1, 0);
 8000ce4:	4b8e      	ldr	r3, [pc, #568]	; (8000f20 <fsm_traffic_light+0x2cc>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b93      	ldr	r3, [pc, #588]	; (8000f38 <fsm_traffic_light+0x2e4>)
 8000cea:	fb83 1302 	smull	r1, r3, r3, r2
 8000cee:	1099      	asrs	r1, r3, #2
 8000cf0:	17d3      	asrs	r3, r2, #31
 8000cf2:	1ac8      	subs	r0, r1, r3
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	4403      	add	r3, r0
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	1ad0      	subs	r0, r2, r3
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2101      	movs	r1, #1
 8000d02:	f001 f8ab 	bl	8001e5c <led7_SetDigit>
				led7_SetDigit(counter_EW/10, 2, 0);
 8000d06:	4b89      	ldr	r3, [pc, #548]	; (8000f2c <fsm_traffic_light+0x2d8>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a8b      	ldr	r2, [pc, #556]	; (8000f38 <fsm_traffic_light+0x2e4>)
 8000d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d10:	1092      	asrs	r2, r2, #2
 8000d12:	17db      	asrs	r3, r3, #31
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2200      	movs	r2, #0
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f89e 	bl	8001e5c <led7_SetDigit>
				led7_SetDigit(counter_EW%10, 3, 0);
 8000d20:	4b82      	ldr	r3, [pc, #520]	; (8000f2c <fsm_traffic_light+0x2d8>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b84      	ldr	r3, [pc, #528]	; (8000f38 <fsm_traffic_light+0x2e4>)
 8000d26:	fb83 1302 	smull	r1, r3, r3, r2
 8000d2a:	1099      	asrs	r1, r3, #2
 8000d2c:	17d3      	asrs	r3, r2, #31
 8000d2e:	1ac8      	subs	r0, r1, r3
 8000d30:	4603      	mov	r3, r0
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4403      	add	r3, r0
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1ad0      	subs	r0, r2, r3
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	f001 f88d 	bl	8001e5c <led7_SetDigit>
			}
			if(flag_timer2[1] == 1)
 8000d42:	4b7c      	ldr	r3, [pc, #496]	; (8000f34 <fsm_traffic_light+0x2e0>)
 8000d44:	885b      	ldrh	r3, [r3, #2]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d104      	bne.n	8000d54 <fsm_traffic_light+0x100>
			{
				mode_normal();
 8000d4a:	f7ff fe43 	bl	80009d4 <mode_normal>
				flag_timer2[1]	= 0;
 8000d4e:	4b79      	ldr	r3, [pc, #484]	; (8000f34 <fsm_traffic_light+0x2e0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	805a      	strh	r2, [r3, #2]
			}
			if(button_count[0] == 1)
 8000d54:	4b79      	ldr	r3, [pc, #484]	; (8000f3c <fsm_traffic_light+0x2e8>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	f040 82b6 	bne.w	80012ca <fsm_traffic_light+0x676>
			{
				HAL_Delay(300);
 8000d5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d62:	f001 fbcf 	bl	8002504 <HAL_Delay>
				button_count[0] = 0;
 8000d66:	4b75      	ldr	r3, [pc, #468]	; (8000f3c <fsm_traffic_light+0x2e8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	801a      	strh	r2, [r3, #0]
				led_blink();
 8000d6c:	f7ff fc22 	bl	80005b4 <led_blink>
				status_mode = MOD_RED;
 8000d70:	4b62      	ldr	r3, [pc, #392]	; (8000efc <fsm_traffic_light+0x2a8>)
 8000d72:	4a73      	ldr	r2, [pc, #460]	; (8000f40 <fsm_traffic_light+0x2ec>)
 8000d74:	601a      	str	r2, [r3, #0]
			}
			break;
 8000d76:	e2a8      	b.n	80012ca <fsm_traffic_light+0x676>
		case MOD_RED:
			if(flag_timer2[5] == 1)
 8000d78:	4b6e      	ldr	r3, [pc, #440]	; (8000f34 <fsm_traffic_light+0x2e0>)
 8000d7a:	895b      	ldrh	r3, [r3, #10]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d13e      	bne.n	8000dfe <fsm_traffic_light+0x1aa>
			{
				flag_timer2[5] = 0;
 8000d80:	4b6c      	ldr	r3, [pc, #432]	; (8000f34 <fsm_traffic_light+0x2e0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	815a      	strh	r2, [r3, #10]
				led7_SetDigit(red_time/10, 0, 0);
 8000d86:	4b5e      	ldr	r3, [pc, #376]	; (8000f00 <fsm_traffic_light+0x2ac>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a6b      	ldr	r2, [pc, #428]	; (8000f38 <fsm_traffic_light+0x2e4>)
 8000d8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d90:	1092      	asrs	r2, r2, #2
 8000d92:	17db      	asrs	r3, r3, #31
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 f85e 	bl	8001e5c <led7_SetDigit>
				led7_SetDigit(red_time%10, 1, 0);
 8000da0:	4b57      	ldr	r3, [pc, #348]	; (8000f00 <fsm_traffic_light+0x2ac>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b64      	ldr	r3, [pc, #400]	; (8000f38 <fsm_traffic_light+0x2e4>)
 8000da6:	fb83 1302 	smull	r1, r3, r3, r2
 8000daa:	1099      	asrs	r1, r3, #2
 8000dac:	17d3      	asrs	r3, r2, #31
 8000dae:	1ac8      	subs	r0, r1, r3
 8000db0:	4603      	mov	r3, r0
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	4403      	add	r3, r0
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	1ad0      	subs	r0, r2, r3
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	f001 f84d 	bl	8001e5c <led7_SetDigit>
				led7_SetDigit(init_red_time/10, 2, 0);
 8000dc2:	4b50      	ldr	r3, [pc, #320]	; (8000f04 <fsm_traffic_light+0x2b0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a5c      	ldr	r2, [pc, #368]	; (8000f38 <fsm_traffic_light+0x2e4>)
 8000dc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dcc:	1092      	asrs	r2, r2, #2
 8000dce:	17db      	asrs	r3, r3, #31
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 f840 	bl	8001e5c <led7_SetDigit>
				led7_SetDigit(init_red_time%10, 3, 0);
 8000ddc:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <fsm_traffic_light+0x2b0>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b55      	ldr	r3, [pc, #340]	; (8000f38 <fsm_traffic_light+0x2e4>)
 8000de2:	fb83 1302 	smull	r1, r3, r3, r2
 8000de6:	1099      	asrs	r1, r3, #2
 8000de8:	17d3      	asrs	r3, r2, #31
 8000dea:	1ac8      	subs	r0, r1, r3
 8000dec:	4603      	mov	r3, r0
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4403      	add	r3, r0
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	1ad0      	subs	r0, r2, r3
 8000df6:	2200      	movs	r2, #0
 8000df8:	2103      	movs	r1, #3
 8000dfa:	f001 f82f 	bl	8001e5c <led7_SetDigit>
			}
			if(flag_timer2[2] == 1)
 8000dfe:	4b4d      	ldr	r3, [pc, #308]	; (8000f34 <fsm_traffic_light+0x2e0>)
 8000e00:	889b      	ldrh	r3, [r3, #4]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d11b      	bne.n	8000e3e <fsm_traffic_light+0x1ea>
			{
				if(blink == 0)
 8000e06:	4b4f      	ldr	r3, [pc, #316]	; (8000f44 <fsm_traffic_light+0x2f0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10b      	bne.n	8000e26 <fsm_traffic_light+0x1d2>
				{
					display_led(RED_LED, NORTH_SOUTH);
 8000e0e:	494e      	ldr	r1, [pc, #312]	; (8000f48 <fsm_traffic_light+0x2f4>)
 8000e10:	4842      	ldr	r0, [pc, #264]	; (8000f1c <fsm_traffic_light+0x2c8>)
 8000e12:	f7ff fc45 	bl	80006a0 <display_led>
					display_led(RED_LED, EAST_WEST);
 8000e16:	494d      	ldr	r1, [pc, #308]	; (8000f4c <fsm_traffic_light+0x2f8>)
 8000e18:	4840      	ldr	r0, [pc, #256]	; (8000f1c <fsm_traffic_light+0x2c8>)
 8000e1a:	f7ff fc41 	bl	80006a0 <display_led>
					blink = 1;
 8000e1e:	4b49      	ldr	r3, [pc, #292]	; (8000f44 <fsm_traffic_light+0x2f0>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	e008      	b.n	8000e38 <fsm_traffic_light+0x1e4>
				}
				else
				{
					blink = 0;
 8000e26:	4b47      	ldr	r3, [pc, #284]	; (8000f44 <fsm_traffic_light+0x2f0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
					lcd_Clear(WHITE);
 8000e2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e30:	f000 fcb6 	bl	80017a0 <lcd_Clear>
					led_blink();
 8000e34:	f7ff fbbe 	bl	80005b4 <led_blink>
				}
				flag_timer2[2] = 0;
 8000e38:	4b3e      	ldr	r3, [pc, #248]	; (8000f34 <fsm_traffic_light+0x2e0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	809a      	strh	r2, [r3, #4]
			}
			if(button_count[0] == 1)
 8000e3e:	4b3f      	ldr	r3, [pc, #252]	; (8000f3c <fsm_traffic_light+0x2e8>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d10b      	bne.n	8000e5e <fsm_traffic_light+0x20a>
			{
				HAL_Delay(300);
 8000e46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e4a:	f001 fb5b 	bl	8002504 <HAL_Delay>
				button_count[0] = 0;
 8000e4e:	4b3b      	ldr	r3, [pc, #236]	; (8000f3c <fsm_traffic_light+0x2e8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	801a      	strh	r2, [r3, #0]
				led_blink();
 8000e54:	f7ff fbae 	bl	80005b4 <led_blink>
				status_mode = MOD_GREEN;
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <fsm_traffic_light+0x2a8>)
 8000e5a:	4a3d      	ldr	r2, [pc, #244]	; (8000f50 <fsm_traffic_light+0x2fc>)
 8000e5c:	601a      	str	r2, [r3, #0]
			}
			if(button_count[1] == 1)
 8000e5e:	4b37      	ldr	r3, [pc, #220]	; (8000f3c <fsm_traffic_light+0x2e8>)
 8000e60:	885b      	ldrh	r3, [r3, #2]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d108      	bne.n	8000e78 <fsm_traffic_light+0x224>
			{
				HAL_Delay(300);
 8000e66:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e6a:	f001 fb4b 	bl	8002504 <HAL_Delay>
				button_count[1] = 0;
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <fsm_traffic_light+0x2e8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	805a      	strh	r2, [r3, #2]
				increase_time_led();
 8000e74:	f7ff fe48 	bl	8000b08 <increase_time_led>
			}
			if(button_count[2] == 1)
 8000e78:	4b30      	ldr	r3, [pc, #192]	; (8000f3c <fsm_traffic_light+0x2e8>)
 8000e7a:	889b      	ldrh	r3, [r3, #4]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d108      	bne.n	8000e92 <fsm_traffic_light+0x23e>
			{
				HAL_Delay(300);
 8000e80:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e84:	f001 fb3e 	bl	8002504 <HAL_Delay>
				button_count[2] = 0;
 8000e88:	4b2c      	ldr	r3, [pc, #176]	; (8000f3c <fsm_traffic_light+0x2e8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	809a      	strh	r2, [r3, #4]
				decrease_time_led();
 8000e8e:	f7ff fe8d 	bl	8000bac <decrease_time_led>
			}
			if(button_count[3]==1)
 8000e92:	4b2a      	ldr	r3, [pc, #168]	; (8000f3c <fsm_traffic_light+0x2e8>)
 8000e94:	88db      	ldrh	r3, [r3, #6]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	f040 8219 	bne.w	80012ce <fsm_traffic_light+0x67a>
			{
				HAL_Delay(300);
 8000e9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ea0:	f001 fb30 	bl	8002504 <HAL_Delay>
				button_count[3] = 0;
 8000ea4:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <fsm_traffic_light+0x2e8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	80da      	strh	r2, [r3, #6]
				init_red_time = red_time;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <fsm_traffic_light+0x2ac>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a15      	ldr	r2, [pc, #84]	; (8000f04 <fsm_traffic_light+0x2b0>)
 8000eb0:	6013      	str	r3, [r2, #0]
				init_green_time = init_red_time - init_yellow_time - 1;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <fsm_traffic_light+0x2b0>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <fsm_traffic_light+0x2b8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <fsm_traffic_light+0x2c0>)
 8000ec0:	6013      	str	r3, [r2, #0]
				if(status_NS == RED_LED)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <fsm_traffic_light+0x2c4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <fsm_traffic_light+0x2c8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d108      	bne.n	8000ede <fsm_traffic_light+0x28a>
				{
					counter_NS = init_red_time;
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <fsm_traffic_light+0x2b0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <fsm_traffic_light+0x2cc>)
 8000ed2:	6013      	str	r3, [r2, #0]
					counter_EW = init_green_time;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <fsm_traffic_light+0x2c0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <fsm_traffic_light+0x2d8>)
 8000eda:	6013      	str	r3, [r2, #0]
				{
					counter_NS = init_green_time;
					counter_EW = init_red_time;
				}
			}
			break;
 8000edc:	e1f7      	b.n	80012ce <fsm_traffic_light+0x67a>
				else if(status_EW == RED_LED)
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <fsm_traffic_light+0x2d0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <fsm_traffic_light+0x2c8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	f040 81f2 	bne.w	80012ce <fsm_traffic_light+0x67a>
					counter_NS = init_green_time;
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <fsm_traffic_light+0x2c0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <fsm_traffic_light+0x2cc>)
 8000ef0:	6013      	str	r3, [r2, #0]
					counter_EW = init_red_time;
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <fsm_traffic_light+0x2b0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <fsm_traffic_light+0x2d8>)
 8000ef8:	6013      	str	r3, [r2, #0]
			break;
 8000efa:	e1e8      	b.n	80012ce <fsm_traffic_light+0x67a>
 8000efc:	20000008 	.word	0x20000008
 8000f00:	2000000c 	.word	0x2000000c
 8000f04:	20000080 	.word	0x20000080
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	20000084 	.word	0x20000084
 8000f10:	20000014 	.word	0x20000014
 8000f14:	20000088 	.word	0x20000088
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	000f4245 	.word	0x000f4245
 8000f20:	20000074 	.word	0x20000074
 8000f24:	20000004 	.word	0x20000004
 8000f28:	000f4249 	.word	0x000f4249
 8000f2c:	20000078 	.word	0x20000078
 8000f30:	000f4241 	.word	0x000f4241
 8000f34:	200000e8 	.word	0x200000e8
 8000f38:	66666667 	.word	0x66666667
 8000f3c:	20000050 	.word	0x20000050
 8000f40:	000f4242 	.word	0x000f4242
 8000f44:	2000007c 	.word	0x2000007c
 8000f48:	000f424b 	.word	0x000f424b
 8000f4c:	000f424c 	.word	0x000f424c
 8000f50:	000f4244 	.word	0x000f4244
		case MOD_YELLOW:
			if(flag_timer2[5] == 1)
 8000f54:	4b92      	ldr	r3, [pc, #584]	; (80011a0 <fsm_traffic_light+0x54c>)
 8000f56:	895b      	ldrh	r3, [r3, #10]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d13e      	bne.n	8000fda <fsm_traffic_light+0x386>
			{
				flag_timer2[5] = 0;
 8000f5c:	4b90      	ldr	r3, [pc, #576]	; (80011a0 <fsm_traffic_light+0x54c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	815a      	strh	r2, [r3, #10]
				led7_SetDigit(yellow_time/10, 0, 0);
 8000f62:	4b90      	ldr	r3, [pc, #576]	; (80011a4 <fsm_traffic_light+0x550>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a90      	ldr	r2, [pc, #576]	; (80011a8 <fsm_traffic_light+0x554>)
 8000f68:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6c:	1092      	asrs	r2, r2, #2
 8000f6e:	17db      	asrs	r3, r3, #31
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 ff70 	bl	8001e5c <led7_SetDigit>
				led7_SetDigit(yellow_time%10, 1, 0);
 8000f7c:	4b89      	ldr	r3, [pc, #548]	; (80011a4 <fsm_traffic_light+0x550>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b89      	ldr	r3, [pc, #548]	; (80011a8 <fsm_traffic_light+0x554>)
 8000f82:	fb83 1302 	smull	r1, r3, r3, r2
 8000f86:	1099      	asrs	r1, r3, #2
 8000f88:	17d3      	asrs	r3, r2, #31
 8000f8a:	1ac8      	subs	r0, r1, r3
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4403      	add	r3, r0
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	1ad0      	subs	r0, r2, r3
 8000f96:	2200      	movs	r2, #0
 8000f98:	2101      	movs	r1, #1
 8000f9a:	f000 ff5f 	bl	8001e5c <led7_SetDigit>
				led7_SetDigit(init_yellow_time/10, 2, 0);
 8000f9e:	4b83      	ldr	r3, [pc, #524]	; (80011ac <fsm_traffic_light+0x558>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a81      	ldr	r2, [pc, #516]	; (80011a8 <fsm_traffic_light+0x554>)
 8000fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa8:	1092      	asrs	r2, r2, #2
 8000faa:	17db      	asrs	r3, r3, #31
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 ff52 	bl	8001e5c <led7_SetDigit>
				led7_SetDigit(init_yellow_time%10, 3, 0);
 8000fb8:	4b7c      	ldr	r3, [pc, #496]	; (80011ac <fsm_traffic_light+0x558>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b7a      	ldr	r3, [pc, #488]	; (80011a8 <fsm_traffic_light+0x554>)
 8000fbe:	fb83 1302 	smull	r1, r3, r3, r2
 8000fc2:	1099      	asrs	r1, r3, #2
 8000fc4:	17d3      	asrs	r3, r2, #31
 8000fc6:	1ac8      	subs	r0, r1, r3
 8000fc8:	4603      	mov	r3, r0
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	4403      	add	r3, r0
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	1ad0      	subs	r0, r2, r3
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	f000 ff41 	bl	8001e5c <led7_SetDigit>
			}
			if(flag_timer2[3] == 1)
 8000fda:	4b71      	ldr	r3, [pc, #452]	; (80011a0 <fsm_traffic_light+0x54c>)
 8000fdc:	88db      	ldrh	r3, [r3, #6]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d11b      	bne.n	800101a <fsm_traffic_light+0x3c6>
			{
				if(blink == 0)
 8000fe2:	4b73      	ldr	r3, [pc, #460]	; (80011b0 <fsm_traffic_light+0x55c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10b      	bne.n	8001002 <fsm_traffic_light+0x3ae>
				{
					display_led(YELLOW_LED, NORTH_SOUTH);
 8000fea:	4972      	ldr	r1, [pc, #456]	; (80011b4 <fsm_traffic_light+0x560>)
 8000fec:	4872      	ldr	r0, [pc, #456]	; (80011b8 <fsm_traffic_light+0x564>)
 8000fee:	f7ff fb57 	bl	80006a0 <display_led>
					display_led(YELLOW_LED, EAST_WEST);
 8000ff2:	4972      	ldr	r1, [pc, #456]	; (80011bc <fsm_traffic_light+0x568>)
 8000ff4:	4870      	ldr	r0, [pc, #448]	; (80011b8 <fsm_traffic_light+0x564>)
 8000ff6:	f7ff fb53 	bl	80006a0 <display_led>
					blink = 1;
 8000ffa:	4b6d      	ldr	r3, [pc, #436]	; (80011b0 <fsm_traffic_light+0x55c>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	e008      	b.n	8001014 <fsm_traffic_light+0x3c0>
				}
				else
				{
					blink = 0;
 8001002:	4b6b      	ldr	r3, [pc, #428]	; (80011b0 <fsm_traffic_light+0x55c>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
					lcd_Clear(WHITE);
 8001008:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800100c:	f000 fbc8 	bl	80017a0 <lcd_Clear>
					led_blink();
 8001010:	f7ff fad0 	bl	80005b4 <led_blink>
				}
				flag_timer2[3] = 0;
 8001014:	4b62      	ldr	r3, [pc, #392]	; (80011a0 <fsm_traffic_light+0x54c>)
 8001016:	2200      	movs	r2, #0
 8001018:	80da      	strh	r2, [r3, #6]
			}
			if(button_count[0] == 1)
 800101a:	4b69      	ldr	r3, [pc, #420]	; (80011c0 <fsm_traffic_light+0x56c>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d117      	bne.n	8001052 <fsm_traffic_light+0x3fe>
			{
				HAL_Delay(300);
 8001022:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001026:	f001 fa6d 	bl	8002504 <HAL_Delay>
				button_count[0] = 0;
 800102a:	4b65      	ldr	r3, [pc, #404]	; (80011c0 <fsm_traffic_light+0x56c>)
 800102c:	2200      	movs	r2, #0
 800102e:	801a      	strh	r2, [r3, #0]
				led_blink();
 8001030:	f7ff fac0 	bl	80005b4 <led_blink>
				status_mode = NORMAL;
 8001034:	4b63      	ldr	r3, [pc, #396]	; (80011c4 <fsm_traffic_light+0x570>)
 8001036:	4a64      	ldr	r2, [pc, #400]	; (80011c8 <fsm_traffic_light+0x574>)
 8001038:	601a      	str	r2, [r3, #0]
				red_time = init_red_time;
 800103a:	4b64      	ldr	r3, [pc, #400]	; (80011cc <fsm_traffic_light+0x578>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a64      	ldr	r2, [pc, #400]	; (80011d0 <fsm_traffic_light+0x57c>)
 8001040:	6013      	str	r3, [r2, #0]
				yellow_time = init_yellow_time;
 8001042:	4b5a      	ldr	r3, [pc, #360]	; (80011ac <fsm_traffic_light+0x558>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a57      	ldr	r2, [pc, #348]	; (80011a4 <fsm_traffic_light+0x550>)
 8001048:	6013      	str	r3, [r2, #0]
				green_time = init_green_time;
 800104a:	4b62      	ldr	r3, [pc, #392]	; (80011d4 <fsm_traffic_light+0x580>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a62      	ldr	r2, [pc, #392]	; (80011d8 <fsm_traffic_light+0x584>)
 8001050:	6013      	str	r3, [r2, #0]
			}
			if(button_count[1] == 1)
 8001052:	4b5b      	ldr	r3, [pc, #364]	; (80011c0 <fsm_traffic_light+0x56c>)
 8001054:	885b      	ldrh	r3, [r3, #2]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <fsm_traffic_light+0x418>
			{
				HAL_Delay(300);
 800105a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800105e:	f001 fa51 	bl	8002504 <HAL_Delay>
				button_count[1] = 0;
 8001062:	4b57      	ldr	r3, [pc, #348]	; (80011c0 <fsm_traffic_light+0x56c>)
 8001064:	2200      	movs	r2, #0
 8001066:	805a      	strh	r2, [r3, #2]
				increase_time_led();
 8001068:	f7ff fd4e 	bl	8000b08 <increase_time_led>
			}
			if(button_count[2] == 1)
 800106c:	4b54      	ldr	r3, [pc, #336]	; (80011c0 <fsm_traffic_light+0x56c>)
 800106e:	889b      	ldrh	r3, [r3, #4]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d108      	bne.n	8001086 <fsm_traffic_light+0x432>
			{
				HAL_Delay(300);
 8001074:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001078:	f001 fa44 	bl	8002504 <HAL_Delay>
				button_count[2] = 0;
 800107c:	4b50      	ldr	r3, [pc, #320]	; (80011c0 <fsm_traffic_light+0x56c>)
 800107e:	2200      	movs	r2, #0
 8001080:	809a      	strh	r2, [r3, #4]
				decrease_time_led();
 8001082:	f7ff fd93 	bl	8000bac <decrease_time_led>
			}
			if(button_count[3]==1)
 8001086:	4b4e      	ldr	r3, [pc, #312]	; (80011c0 <fsm_traffic_light+0x56c>)
 8001088:	88db      	ldrh	r3, [r3, #6]
 800108a:	2b01      	cmp	r3, #1
 800108c:	f040 8121 	bne.w	80012d2 <fsm_traffic_light+0x67e>
			{
				HAL_Delay(300);
 8001090:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001094:	f001 fa36 	bl	8002504 <HAL_Delay>
				button_count[3] = 0;
 8001098:	4b49      	ldr	r3, [pc, #292]	; (80011c0 <fsm_traffic_light+0x56c>)
 800109a:	2200      	movs	r2, #0
 800109c:	80da      	strh	r2, [r3, #6]
				init_yellow_time = red_time;
 800109e:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <fsm_traffic_light+0x57c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a42      	ldr	r2, [pc, #264]	; (80011ac <fsm_traffic_light+0x558>)
 80010a4:	6013      	str	r3, [r2, #0]
				init_green_time = init_red_time - init_yellow_time - 1;
 80010a6:	4b49      	ldr	r3, [pc, #292]	; (80011cc <fsm_traffic_light+0x578>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b40      	ldr	r3, [pc, #256]	; (80011ac <fsm_traffic_light+0x558>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	3b01      	subs	r3, #1
 80010b2:	4a48      	ldr	r2, [pc, #288]	; (80011d4 <fsm_traffic_light+0x580>)
 80010b4:	6013      	str	r3, [r2, #0]
				if(status_NS == RED_LED)
 80010b6:	4b49      	ldr	r3, [pc, #292]	; (80011dc <fsm_traffic_light+0x588>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a49      	ldr	r2, [pc, #292]	; (80011e0 <fsm_traffic_light+0x58c>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d108      	bne.n	80010d2 <fsm_traffic_light+0x47e>
				{
					counter_NS = init_red_time;
 80010c0:	4b42      	ldr	r3, [pc, #264]	; (80011cc <fsm_traffic_light+0x578>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a47      	ldr	r2, [pc, #284]	; (80011e4 <fsm_traffic_light+0x590>)
 80010c6:	6013      	str	r3, [r2, #0]
					counter_EW = init_green_time;
 80010c8:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <fsm_traffic_light+0x580>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <fsm_traffic_light+0x594>)
 80010ce:	6013      	str	r3, [r2, #0]
				{
					counter_NS = init_green_time;
					counter_EW = init_red_time;
				}
			}
			break;
 80010d0:	e0ff      	b.n	80012d2 <fsm_traffic_light+0x67e>
				else if(status_EW == RED_LED)
 80010d2:	4b46      	ldr	r3, [pc, #280]	; (80011ec <fsm_traffic_light+0x598>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a42      	ldr	r2, [pc, #264]	; (80011e0 <fsm_traffic_light+0x58c>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	f040 80fa 	bne.w	80012d2 <fsm_traffic_light+0x67e>
					counter_NS = init_green_time;
 80010de:	4b3d      	ldr	r3, [pc, #244]	; (80011d4 <fsm_traffic_light+0x580>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a40      	ldr	r2, [pc, #256]	; (80011e4 <fsm_traffic_light+0x590>)
 80010e4:	6013      	str	r3, [r2, #0]
					counter_EW = init_red_time;
 80010e6:	4b39      	ldr	r3, [pc, #228]	; (80011cc <fsm_traffic_light+0x578>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a3f      	ldr	r2, [pc, #252]	; (80011e8 <fsm_traffic_light+0x594>)
 80010ec:	6013      	str	r3, [r2, #0]
			break;
 80010ee:	e0f0      	b.n	80012d2 <fsm_traffic_light+0x67e>
		case MOD_GREEN:
			if(flag_timer2[5] == 1)
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <fsm_traffic_light+0x54c>)
 80010f2:	895b      	ldrh	r3, [r3, #10]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d13e      	bne.n	8001176 <fsm_traffic_light+0x522>
			{
				flag_timer2[5] = 0;
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <fsm_traffic_light+0x54c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	815a      	strh	r2, [r3, #10]
				led7_SetDigit(green_time/10, 0, 0);
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <fsm_traffic_light+0x584>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a29      	ldr	r2, [pc, #164]	; (80011a8 <fsm_traffic_light+0x554>)
 8001104:	fb82 1203 	smull	r1, r2, r2, r3
 8001108:	1092      	asrs	r2, r2, #2
 800110a:	17db      	asrs	r3, r3, #31
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fea2 	bl	8001e5c <led7_SetDigit>
				led7_SetDigit(green_time%10, 1, 0);
 8001118:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <fsm_traffic_light+0x584>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <fsm_traffic_light+0x554>)
 800111e:	fb83 1302 	smull	r1, r3, r3, r2
 8001122:	1099      	asrs	r1, r3, #2
 8001124:	17d3      	asrs	r3, r2, #31
 8001126:	1ac8      	subs	r0, r1, r3
 8001128:	4603      	mov	r3, r0
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4403      	add	r3, r0
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	1ad0      	subs	r0, r2, r3
 8001132:	2200      	movs	r2, #0
 8001134:	2101      	movs	r1, #1
 8001136:	f000 fe91 	bl	8001e5c <led7_SetDigit>
				led7_SetDigit(init_green_time/10, 2, 0);
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <fsm_traffic_light+0x580>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <fsm_traffic_light+0x554>)
 8001140:	fb82 1203 	smull	r1, r2, r2, r3
 8001144:	1092      	asrs	r2, r2, #2
 8001146:	17db      	asrs	r3, r3, #31
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2200      	movs	r2, #0
 800114c:	2102      	movs	r1, #2
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fe84 	bl	8001e5c <led7_SetDigit>
				led7_SetDigit(init_green_time%10, 3, 0);
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <fsm_traffic_light+0x580>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <fsm_traffic_light+0x554>)
 800115a:	fb83 1302 	smull	r1, r3, r3, r2
 800115e:	1099      	asrs	r1, r3, #2
 8001160:	17d3      	asrs	r3, r2, #31
 8001162:	1ac8      	subs	r0, r1, r3
 8001164:	4603      	mov	r3, r0
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4403      	add	r3, r0
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	1ad0      	subs	r0, r2, r3
 800116e:	2200      	movs	r2, #0
 8001170:	2103      	movs	r1, #3
 8001172:	f000 fe73 	bl	8001e5c <led7_SetDigit>
			}
			if(flag_timer2[4] == 1)
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <fsm_traffic_light+0x54c>)
 8001178:	891b      	ldrh	r3, [r3, #8]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d146      	bne.n	800120c <fsm_traffic_light+0x5b8>
			{
				if(blink == 0)
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <fsm_traffic_light+0x55c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d136      	bne.n	80011f4 <fsm_traffic_light+0x5a0>
				{
					display_led(GREEN_LED, NORTH_SOUTH);
 8001186:	490b      	ldr	r1, [pc, #44]	; (80011b4 <fsm_traffic_light+0x560>)
 8001188:	4819      	ldr	r0, [pc, #100]	; (80011f0 <fsm_traffic_light+0x59c>)
 800118a:	f7ff fa89 	bl	80006a0 <display_led>
					display_led(GREEN_LED, EAST_WEST);
 800118e:	490b      	ldr	r1, [pc, #44]	; (80011bc <fsm_traffic_light+0x568>)
 8001190:	4817      	ldr	r0, [pc, #92]	; (80011f0 <fsm_traffic_light+0x59c>)
 8001192:	f7ff fa85 	bl	80006a0 <display_led>
					blink = 1;
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <fsm_traffic_light+0x55c>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	e033      	b.n	8001206 <fsm_traffic_light+0x5b2>
 800119e:	bf00      	nop
 80011a0:	200000e8 	.word	0x200000e8
 80011a4:	20000010 	.word	0x20000010
 80011a8:	66666667 	.word	0x66666667
 80011ac:	20000084 	.word	0x20000084
 80011b0:	2000007c 	.word	0x2000007c
 80011b4:	000f424b 	.word	0x000f424b
 80011b8:	000f4247 	.word	0x000f4247
 80011bc:	000f424c 	.word	0x000f424c
 80011c0:	20000050 	.word	0x20000050
 80011c4:	20000008 	.word	0x20000008
 80011c8:	000f4241 	.word	0x000f4241
 80011cc:	20000080 	.word	0x20000080
 80011d0:	2000000c 	.word	0x2000000c
 80011d4:	20000088 	.word	0x20000088
 80011d8:	20000014 	.word	0x20000014
 80011dc:	20000000 	.word	0x20000000
 80011e0:	000f4245 	.word	0x000f4245
 80011e4:	20000074 	.word	0x20000074
 80011e8:	20000078 	.word	0x20000078
 80011ec:	20000004 	.word	0x20000004
 80011f0:	000f4249 	.word	0x000f4249
				}
				else
				{
					blink = 0;
 80011f4:	4b39      	ldr	r3, [pc, #228]	; (80012dc <fsm_traffic_light+0x688>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
					lcd_Clear(WHITE);
 80011fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011fe:	f000 facf 	bl	80017a0 <lcd_Clear>
					led_blink();
 8001202:	f7ff f9d7 	bl	80005b4 <led_blink>
				}
				flag_timer2[4] = 0;
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <fsm_traffic_light+0x68c>)
 8001208:	2200      	movs	r2, #0
 800120a:	811a      	strh	r2, [r3, #8]
			}
			if(button_count[0] == 1)
 800120c:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <fsm_traffic_light+0x690>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d10b      	bne.n	800122c <fsm_traffic_light+0x5d8>
			{
				HAL_Delay(300);
 8001214:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001218:	f001 f974 	bl	8002504 <HAL_Delay>
				button_count[0] = 0;
 800121c:	4b31      	ldr	r3, [pc, #196]	; (80012e4 <fsm_traffic_light+0x690>)
 800121e:	2200      	movs	r2, #0
 8001220:	801a      	strh	r2, [r3, #0]
				led_blink();
 8001222:	f7ff f9c7 	bl	80005b4 <led_blink>
				status_mode = MOD_YELLOW;
 8001226:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <fsm_traffic_light+0x694>)
 8001228:	4a30      	ldr	r2, [pc, #192]	; (80012ec <fsm_traffic_light+0x698>)
 800122a:	601a      	str	r2, [r3, #0]
			}
			if(button_count[1] == 1)
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <fsm_traffic_light+0x690>)
 800122e:	885b      	ldrh	r3, [r3, #2]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d108      	bne.n	8001246 <fsm_traffic_light+0x5f2>
			{
				HAL_Delay(300);
 8001234:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001238:	f001 f964 	bl	8002504 <HAL_Delay>
				button_count[1] = 0;
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <fsm_traffic_light+0x690>)
 800123e:	2200      	movs	r2, #0
 8001240:	805a      	strh	r2, [r3, #2]
				increase_time_led();
 8001242:	f7ff fc61 	bl	8000b08 <increase_time_led>
			}
			if(button_count[2] == 1)
 8001246:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <fsm_traffic_light+0x690>)
 8001248:	889b      	ldrh	r3, [r3, #4]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d108      	bne.n	8001260 <fsm_traffic_light+0x60c>
			{
				HAL_Delay(300);
 800124e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001252:	f001 f957 	bl	8002504 <HAL_Delay>
				button_count[2] = 0;
 8001256:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <fsm_traffic_light+0x690>)
 8001258:	2200      	movs	r2, #0
 800125a:	809a      	strh	r2, [r3, #4]
				decrease_time_led();
 800125c:	f7ff fca6 	bl	8000bac <decrease_time_led>
			}
			if(button_count[3]==1)
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <fsm_traffic_light+0x690>)
 8001262:	88db      	ldrh	r3, [r3, #6]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d136      	bne.n	80012d6 <fsm_traffic_light+0x682>
			{
				HAL_Delay(300);
 8001268:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800126c:	f001 f94a 	bl	8002504 <HAL_Delay>
				button_count[3] = 0;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <fsm_traffic_light+0x690>)
 8001272:	2200      	movs	r2, #0
 8001274:	80da      	strh	r2, [r3, #6]
				init_green_time = green_time;
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <fsm_traffic_light+0x69c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a1e      	ldr	r2, [pc, #120]	; (80012f4 <fsm_traffic_light+0x6a0>)
 800127c:	6013      	str	r3, [r2, #0]
				init_red_time = init_green_time + init_yellow_time + 1;
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <fsm_traffic_light+0x6a0>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <fsm_traffic_light+0x6a4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	3301      	adds	r3, #1
 800128a:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <fsm_traffic_light+0x6a8>)
 800128c:	6013      	str	r3, [r2, #0]
				if(status_NS == RED_LED)
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <fsm_traffic_light+0x6ac>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <fsm_traffic_light+0x6b0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d108      	bne.n	80012aa <fsm_traffic_light+0x656>
				{
					counter_NS = init_red_time;
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <fsm_traffic_light+0x6a8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a1a      	ldr	r2, [pc, #104]	; (8001308 <fsm_traffic_light+0x6b4>)
 800129e:	6013      	str	r3, [r2, #0]
					counter_EW = init_green_time;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <fsm_traffic_light+0x6a0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	; (800130c <fsm_traffic_light+0x6b8>)
 80012a6:	6013      	str	r3, [r2, #0]
				{
					counter_NS = init_green_time;
					counter_EW = init_red_time;
				}
			}
			break;
 80012a8:	e015      	b.n	80012d6 <fsm_traffic_light+0x682>
				else if(status_EW == RED_LED)
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <fsm_traffic_light+0x6bc>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <fsm_traffic_light+0x6b0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d110      	bne.n	80012d6 <fsm_traffic_light+0x682>
					counter_NS = init_green_time;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <fsm_traffic_light+0x6a0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a13      	ldr	r2, [pc, #76]	; (8001308 <fsm_traffic_light+0x6b4>)
 80012ba:	6013      	str	r3, [r2, #0]
					counter_EW = init_red_time;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <fsm_traffic_light+0x6a8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <fsm_traffic_light+0x6b8>)
 80012c2:	6013      	str	r3, [r2, #0]
			break;
 80012c4:	e007      	b.n	80012d6 <fsm_traffic_light+0x682>
		default:
			break;
 80012c6:	bf00      	nop
 80012c8:	e006      	b.n	80012d8 <fsm_traffic_light+0x684>
			break;
 80012ca:	bf00      	nop
 80012cc:	e004      	b.n	80012d8 <fsm_traffic_light+0x684>
			break;
 80012ce:	bf00      	nop
 80012d0:	e002      	b.n	80012d8 <fsm_traffic_light+0x684>
			break;
 80012d2:	bf00      	nop
 80012d4:	e000      	b.n	80012d8 <fsm_traffic_light+0x684>
			break;
 80012d6:	bf00      	nop
	}
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000007c 	.word	0x2000007c
 80012e0:	200000e8 	.word	0x200000e8
 80012e4:	20000050 	.word	0x20000050
 80012e8:	20000008 	.word	0x20000008
 80012ec:	000f4243 	.word	0x000f4243
 80012f0:	20000014 	.word	0x20000014
 80012f4:	20000088 	.word	0x20000088
 80012f8:	20000084 	.word	0x20000084
 80012fc:	20000080 	.word	0x20000080
 8001300:	20000000 	.word	0x20000000
 8001304:	000f4245 	.word	0x000f4245
 8001308:	20000074 	.word	0x20000074
 800130c:	20000078 	.word	0x20000078
 8001310:	20000004 	.word	0x20000004

08001314 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08e      	sub	sp, #56	; 0x38
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
 800132a:	615a      	str	r2, [r3, #20]
 800132c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <MX_FSMC_Init+0xec>)
 8001342:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001346:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001348:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <MX_FSMC_Init+0xec>)
 800134a:	4a2e      	ldr	r2, [pc, #184]	; (8001404 <MX_FSMC_Init+0xf0>)
 800134c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800134e:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <MX_FSMC_Init+0xec>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001354:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <MX_FSMC_Init+0xec>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <MX_FSMC_Init+0xec>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001360:	4b27      	ldr	r3, [pc, #156]	; (8001400 <MX_FSMC_Init+0xec>)
 8001362:	2210      	movs	r2, #16
 8001364:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001366:	4b26      	ldr	r3, [pc, #152]	; (8001400 <MX_FSMC_Init+0xec>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <MX_FSMC_Init+0xec>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001372:	4b23      	ldr	r3, [pc, #140]	; (8001400 <MX_FSMC_Init+0xec>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001378:	4b21      	ldr	r3, [pc, #132]	; (8001400 <MX_FSMC_Init+0xec>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <MX_FSMC_Init+0xec>)
 8001380:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <MX_FSMC_Init+0xec>)
 8001388:	2200      	movs	r2, #0
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_FSMC_Init+0xec>)
 800138e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001392:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_FSMC_Init+0xec>)
 8001396:	2200      	movs	r2, #0
 8001398:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MX_FSMC_Init+0xec>)
 800139c:	2200      	movs	r2, #0
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_FSMC_Init+0xec>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80013a6:	230f      	movs	r3, #15
 80013a8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80013aa:	230f      	movs	r3, #15
 80013ac:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80013ae:	233c      	movs	r3, #60	; 0x3c
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80013b6:	2310      	movs	r3, #16
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80013ba:	2311      	movs	r3, #17
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80013be:	2300      	movs	r3, #0
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80013c2:	2308      	movs	r3, #8
 80013c4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80013c6:	230f      	movs	r3, #15
 80013c8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80013ca:	2309      	movs	r3, #9
 80013cc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80013d2:	2310      	movs	r3, #16
 80013d4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80013d6:	2311      	movs	r3, #17
 80013d8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80013da:	2300      	movs	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80013de:	463a      	mov	r2, r7
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <MX_FSMC_Init+0xec>)
 80013e8:	f002 fd84 	bl	8003ef4 <HAL_SRAM_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80013f2:	f000 fe18 	bl	8002026 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80013f6:	bf00      	nop
 80013f8:	3738      	adds	r7, #56	; 0x38
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000008c 	.word	0x2000008c
 8001404:	a0000104 	.word	0xa0000104

08001408 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_FSMC_MspInit+0x88>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d131      	bne.n	8001488 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_FSMC_MspInit+0x88>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_FSMC_MspInit+0x8c>)
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	4a18      	ldr	r2, [pc, #96]	; (8001494 <HAL_FSMC_MspInit+0x8c>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6393      	str	r3, [r2, #56]	; 0x38
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_FSMC_MspInit+0x8c>)
 800143c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001446:	f64f 7388 	movw	r3, #65416	; 0xff88
 800144a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001458:	230c      	movs	r3, #12
 800145a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <HAL_FSMC_MspInit+0x90>)
 8001462:	f001 f985 	bl	8002770 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001466:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800146a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001478:	230c      	movs	r3, #12
 800147a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4806      	ldr	r0, [pc, #24]	; (800149c <HAL_FSMC_MspInit+0x94>)
 8001482:	f001 f975 	bl	8002770 <HAL_GPIO_Init>
 8001486:	e000      	b.n	800148a <HAL_FSMC_MspInit+0x82>
    return;
 8001488:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200000dc 	.word	0x200000dc
 8001494:	40023800 	.word	0x40023800
 8001498:	40021000 	.word	0x40021000
 800149c:	40020c00 	.word	0x40020c00

080014a0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80014a8:	f7ff ffae 	bl	8001408 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	; 0x30
 80014b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	4b6f      	ldr	r3, [pc, #444]	; (800168c <MX_GPIO_Init+0x1d8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a6e      	ldr	r2, [pc, #440]	; (800168c <MX_GPIO_Init+0x1d8>)
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b6c      	ldr	r3, [pc, #432]	; (800168c <MX_GPIO_Init+0x1d8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	4b68      	ldr	r3, [pc, #416]	; (800168c <MX_GPIO_Init+0x1d8>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a67      	ldr	r2, [pc, #412]	; (800168c <MX_GPIO_Init+0x1d8>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b65      	ldr	r3, [pc, #404]	; (800168c <MX_GPIO_Init+0x1d8>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b61      	ldr	r3, [pc, #388]	; (800168c <MX_GPIO_Init+0x1d8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a60      	ldr	r2, [pc, #384]	; (800168c <MX_GPIO_Init+0x1d8>)
 800150c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b5e      	ldr	r3, [pc, #376]	; (800168c <MX_GPIO_Init+0x1d8>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b5a      	ldr	r3, [pc, #360]	; (800168c <MX_GPIO_Init+0x1d8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a59      	ldr	r2, [pc, #356]	; (800168c <MX_GPIO_Init+0x1d8>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b57      	ldr	r3, [pc, #348]	; (800168c <MX_GPIO_Init+0x1d8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b53      	ldr	r3, [pc, #332]	; (800168c <MX_GPIO_Init+0x1d8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a52      	ldr	r2, [pc, #328]	; (800168c <MX_GPIO_Init+0x1d8>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b50      	ldr	r3, [pc, #320]	; (800168c <MX_GPIO_Init+0x1d8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b4c      	ldr	r3, [pc, #304]	; (800168c <MX_GPIO_Init+0x1d8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a4b      	ldr	r2, [pc, #300]	; (800168c <MX_GPIO_Init+0x1d8>)
 8001560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b49      	ldr	r3, [pc, #292]	; (800168c <MX_GPIO_Init+0x1d8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	4b45      	ldr	r3, [pc, #276]	; (800168c <MX_GPIO_Init+0x1d8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a44      	ldr	r2, [pc, #272]	; (800168c <MX_GPIO_Init+0x1d8>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b42      	ldr	r3, [pc, #264]	; (800168c <MX_GPIO_Init+0x1d8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2170      	movs	r1, #112	; 0x70
 8001592:	483f      	ldr	r0, [pc, #252]	; (8001690 <MX_GPIO_Init+0x1dc>)
 8001594:	f001 fa88 	bl	8002aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159e:	483d      	ldr	r0, [pc, #244]	; (8001694 <MX_GPIO_Init+0x1e0>)
 80015a0:	f001 fa82 	bl	8002aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2140      	movs	r1, #64	; 0x40
 80015a8:	483b      	ldr	r0, [pc, #236]	; (8001698 <MX_GPIO_Init+0x1e4>)
 80015aa:	f001 fa7d 	bl	8002aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b4:	4839      	ldr	r0, [pc, #228]	; (800169c <MX_GPIO_Init+0x1e8>)
 80015b6:	f001 fa77 	bl	8002aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2108      	movs	r1, #8
 80015be:	4838      	ldr	r0, [pc, #224]	; (80016a0 <MX_GPIO_Init+0x1ec>)
 80015c0:	f001 fa72 	bl	8002aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80015c4:	2370      	movs	r3, #112	; 0x70
 80015c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	482d      	ldr	r0, [pc, #180]	; (8001690 <MX_GPIO_Init+0x1dc>)
 80015dc:	f001 f8c8 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80015e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	4826      	ldr	r0, [pc, #152]	; (8001694 <MX_GPIO_Init+0x1e0>)
 80015fa:	f001 f8b9 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80015fe:	23c0      	movs	r3, #192	; 0xc0
 8001600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	4822      	ldr	r0, [pc, #136]	; (800169c <MX_GPIO_Init+0x1e8>)
 8001612:	f001 f8ad 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001616:	2330      	movs	r3, #48	; 0x30
 8001618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	4619      	mov	r1, r3
 8001628:	481a      	ldr	r0, [pc, #104]	; (8001694 <MX_GPIO_Init+0x1e0>)
 800162a:	f001 f8a1 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800162e:	2340      	movs	r3, #64	; 0x40
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	4814      	ldr	r0, [pc, #80]	; (8001698 <MX_GPIO_Init+0x1e4>)
 8001646:	f001 f893 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800164a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001650:	2301      	movs	r3, #1
 8001652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	480e      	ldr	r0, [pc, #56]	; (800169c <MX_GPIO_Init+0x1e8>)
 8001664:	f001 f884 	bl	8002770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001668:	2308      	movs	r3, #8
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	4808      	ldr	r0, [pc, #32]	; (80016a0 <MX_GPIO_Init+0x1ec>)
 8001680:	f001 f876 	bl	8002770 <HAL_GPIO_Init>

}
 8001684:	bf00      	nop
 8001686:	3730      	adds	r7, #48	; 0x30
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800
 8001690:	40021000 	.word	0x40021000
 8001694:	40020800 	.word	0x40020800
 8001698:	40021800 	.word	0x40021800
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020c00 	.word	0x40020c00

080016a4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <LCD_WR_REG+0x1c>)
 80016b0:	88fb      	ldrh	r3, [r7, #6]
 80016b2:	8013      	strh	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	600ffffe 	.word	0x600ffffe

080016c4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <LCD_WR_DATA+0x1c>)
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	8053      	strh	r3, [r2, #2]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	600ffffe 	.word	0x600ffffe

080016e4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <LCD_RD_DATA+0x20>)
 80016ec:	885b      	ldrh	r3, [r3, #2]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	b29b      	uxth	r3, r3
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	600ffffe 	.word	0x600ffffe

08001708 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4604      	mov	r4, r0
 8001710:	4608      	mov	r0, r1
 8001712:	4611      	mov	r1, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4623      	mov	r3, r4
 8001718:	80fb      	strh	r3, [r7, #6]
 800171a:	4603      	mov	r3, r0
 800171c:	80bb      	strh	r3, [r7, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	807b      	strh	r3, [r7, #2]
 8001722:	4613      	mov	r3, r2
 8001724:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001726:	202a      	movs	r0, #42	; 0x2a
 8001728:	f7ff ffbc 	bl	80016a4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800172c:	88fb      	ldrh	r3, [r7, #6]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	b29b      	uxth	r3, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ffc6 	bl	80016c4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	b29b      	uxth	r3, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff ffc0 	bl	80016c4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	b29b      	uxth	r3, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ffba 	bl	80016c4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001750:	887b      	ldrh	r3, [r7, #2]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	b29b      	uxth	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ffb4 	bl	80016c4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800175c:	202b      	movs	r0, #43	; 0x2b
 800175e:	f7ff ffa1 	bl	80016a4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001762:	88bb      	ldrh	r3, [r7, #4]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	b29b      	uxth	r3, r3
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ffab 	bl	80016c4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800176e:	88bb      	ldrh	r3, [r7, #4]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	b29b      	uxth	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ffa5 	bl	80016c4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800177a:	883b      	ldrh	r3, [r7, #0]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	b29b      	uxth	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff9f 	bl	80016c4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001786:	883b      	ldrh	r3, [r7, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	b29b      	uxth	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff99 	bl	80016c4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001792:	202c      	movs	r0, #44	; 0x2c
 8001794:	f7ff ff86 	bl	80016a4 <LCD_WR_REG>
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bd90      	pop	{r4, r7, pc}

080017a0 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <lcd_Clear+0x60>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <lcd_Clear+0x60>)
 80017b4:	885b      	ldrh	r3, [r3, #2]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	2100      	movs	r1, #0
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff ffa3 	bl	8001708 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	81fb      	strh	r3, [r7, #14]
 80017c6:	e011      	b.n	80017ec <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	81bb      	strh	r3, [r7, #12]
 80017cc:	e006      	b.n	80017dc <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff77 	bl	80016c4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80017d6:	89bb      	ldrh	r3, [r7, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	81bb      	strh	r3, [r7, #12]
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <lcd_Clear+0x60>)
 80017de:	885b      	ldrh	r3, [r3, #2]
 80017e0:	89ba      	ldrh	r2, [r7, #12]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d3f3      	bcc.n	80017ce <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80017e6:	89fb      	ldrh	r3, [r7, #14]
 80017e8:	3301      	adds	r3, #1
 80017ea:	81fb      	strh	r3, [r7, #14]
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <lcd_Clear+0x60>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	89fa      	ldrh	r2, [r7, #14]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3e8      	bcc.n	80017c8 <lcd_Clear+0x28>
		}
	}
}
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200000e0 	.word	0x200000e0

08001804 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
 800180e:	460b      	mov	r3, r1
 8001810:	80bb      	strh	r3, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001816:	88bb      	ldrh	r3, [r7, #4]
 8001818:	88fa      	ldrh	r2, [r7, #6]
 800181a:	88b9      	ldrh	r1, [r7, #4]
 800181c:	88f8      	ldrh	r0, [r7, #6]
 800181e:	f7ff ff73 	bl	8001708 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff4d 	bl	80016c4 <LCD_WR_DATA>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	091b      	lsrs	r3, r3, #4
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <lcd_SetDir+0x44>)
 8001850:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001854:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <lcd_SetDir+0x44>)
 8001858:	22f0      	movs	r2, #240	; 0xf0
 800185a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800185c:	e006      	b.n	800186c <lcd_SetDir+0x38>
		lcddev.width=240;
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <lcd_SetDir+0x44>)
 8001860:	22f0      	movs	r2, #240	; 0xf0
 8001862:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <lcd_SetDir+0x44>)
 8001866:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800186a:	805a      	strh	r2, [r3, #2]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	200000e0 	.word	0x200000e0

0800187c <lcd_init>:


void lcd_init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001886:	48aa      	ldr	r0, [pc, #680]	; (8001b30 <lcd_init+0x2b4>)
 8001888:	f001 f90e 	bl	8002aa8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800188c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001890:	f000 fe38 	bl	8002504 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189a:	48a5      	ldr	r0, [pc, #660]	; (8001b30 <lcd_init+0x2b4>)
 800189c:	f001 f904 	bl	8002aa8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80018a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018a4:	f000 fe2e 	bl	8002504 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff ffc3 	bl	8001834 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80018ae:	20d3      	movs	r0, #211	; 0xd3
 80018b0:	f7ff fef8 	bl	80016a4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80018b4:	f7ff ff16 	bl	80016e4 <LCD_RD_DATA>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b9d      	ldr	r3, [pc, #628]	; (8001b34 <lcd_init+0x2b8>)
 80018be:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80018c0:	f7ff ff10 	bl	80016e4 <LCD_RD_DATA>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b9a      	ldr	r3, [pc, #616]	; (8001b34 <lcd_init+0x2b8>)
 80018ca:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80018cc:	f7ff ff0a 	bl	80016e4 <LCD_RD_DATA>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b97      	ldr	r3, [pc, #604]	; (8001b34 <lcd_init+0x2b8>)
 80018d6:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80018d8:	4b96      	ldr	r3, [pc, #600]	; (8001b34 <lcd_init+0x2b8>)
 80018da:	889b      	ldrh	r3, [r3, #4]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b29a      	uxth	r2, r3
 80018e0:	4b94      	ldr	r3, [pc, #592]	; (8001b34 <lcd_init+0x2b8>)
 80018e2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80018e4:	f7ff fefe 	bl	80016e4 <LCD_RD_DATA>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b91      	ldr	r3, [pc, #580]	; (8001b34 <lcd_init+0x2b8>)
 80018ee:	889b      	ldrh	r3, [r3, #4]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	4b8f      	ldr	r3, [pc, #572]	; (8001b34 <lcd_init+0x2b8>)
 80018f6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80018f8:	20cf      	movs	r0, #207	; 0xcf
 80018fa:	f7ff fed3 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff fee0 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001904:	20c1      	movs	r0, #193	; 0xc1
 8001906:	f7ff fedd 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800190a:	2030      	movs	r0, #48	; 0x30
 800190c:	f7ff feda 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001910:	20ed      	movs	r0, #237	; 0xed
 8001912:	f7ff fec7 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001916:	2064      	movs	r0, #100	; 0x64
 8001918:	f7ff fed4 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800191c:	2003      	movs	r0, #3
 800191e:	f7ff fed1 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001922:	2012      	movs	r0, #18
 8001924:	f7ff fece 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001928:	2081      	movs	r0, #129	; 0x81
 800192a:	f7ff fecb 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800192e:	20e8      	movs	r0, #232	; 0xe8
 8001930:	f7ff feb8 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001934:	2085      	movs	r0, #133	; 0x85
 8001936:	f7ff fec5 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800193a:	2010      	movs	r0, #16
 800193c:	f7ff fec2 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001940:	207a      	movs	r0, #122	; 0x7a
 8001942:	f7ff febf 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001946:	20cb      	movs	r0, #203	; 0xcb
 8001948:	f7ff feac 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800194c:	2039      	movs	r0, #57	; 0x39
 800194e:	f7ff feb9 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001952:	202c      	movs	r0, #44	; 0x2c
 8001954:	f7ff feb6 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff feb3 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800195e:	2034      	movs	r0, #52	; 0x34
 8001960:	f7ff feb0 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001964:	2002      	movs	r0, #2
 8001966:	f7ff fead 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800196a:	20f7      	movs	r0, #247	; 0xf7
 800196c:	f7ff fe9a 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001970:	2020      	movs	r0, #32
 8001972:	f7ff fea7 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001976:	20ea      	movs	r0, #234	; 0xea
 8001978:	f7ff fe94 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800197c:	2000      	movs	r0, #0
 800197e:	f7ff fea1 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff fe9e 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001988:	20c0      	movs	r0, #192	; 0xc0
 800198a:	f7ff fe8b 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800198e:	201b      	movs	r0, #27
 8001990:	f7ff fe98 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001994:	20c1      	movs	r0, #193	; 0xc1
 8001996:	f7ff fe85 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800199a:	2001      	movs	r0, #1
 800199c:	f7ff fe92 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80019a0:	20c5      	movs	r0, #197	; 0xc5
 80019a2:	f7ff fe7f 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80019a6:	2030      	movs	r0, #48	; 0x30
 80019a8:	f7ff fe8c 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80019ac:	2030      	movs	r0, #48	; 0x30
 80019ae:	f7ff fe89 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80019b2:	20c7      	movs	r0, #199	; 0xc7
 80019b4:	f7ff fe76 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80019b8:	20b7      	movs	r0, #183	; 0xb7
 80019ba:	f7ff fe83 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80019be:	2036      	movs	r0, #54	; 0x36
 80019c0:	f7ff fe70 	bl	80016a4 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80019c4:	2008      	movs	r0, #8
 80019c6:	f7ff fe7d 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80019ca:	203a      	movs	r0, #58	; 0x3a
 80019cc:	f7ff fe6a 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80019d0:	2055      	movs	r0, #85	; 0x55
 80019d2:	f7ff fe77 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80019d6:	20b1      	movs	r0, #177	; 0xb1
 80019d8:	f7ff fe64 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff fe71 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80019e2:	201a      	movs	r0, #26
 80019e4:	f7ff fe6e 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80019e8:	20b6      	movs	r0, #182	; 0xb6
 80019ea:	f7ff fe5b 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80019ee:	200a      	movs	r0, #10
 80019f0:	f7ff fe68 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80019f4:	20a2      	movs	r0, #162	; 0xa2
 80019f6:	f7ff fe65 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80019fa:	20f2      	movs	r0, #242	; 0xf2
 80019fc:	f7ff fe52 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff fe5f 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001a06:	2026      	movs	r0, #38	; 0x26
 8001a08:	f7ff fe4c 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f7ff fe59 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001a12:	20e0      	movs	r0, #224	; 0xe0
 8001a14:	f7ff fe46 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001a18:	200f      	movs	r0, #15
 8001a1a:	f7ff fe53 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001a1e:	202a      	movs	r0, #42	; 0x2a
 8001a20:	f7ff fe50 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001a24:	2028      	movs	r0, #40	; 0x28
 8001a26:	f7ff fe4d 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001a2a:	2008      	movs	r0, #8
 8001a2c:	f7ff fe4a 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001a30:	200e      	movs	r0, #14
 8001a32:	f7ff fe47 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001a36:	2008      	movs	r0, #8
 8001a38:	f7ff fe44 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001a3c:	2054      	movs	r0, #84	; 0x54
 8001a3e:	f7ff fe41 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001a42:	20a9      	movs	r0, #169	; 0xa9
 8001a44:	f7ff fe3e 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001a48:	2043      	movs	r0, #67	; 0x43
 8001a4a:	f7ff fe3b 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001a4e:	200a      	movs	r0, #10
 8001a50:	f7ff fe38 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001a54:	200f      	movs	r0, #15
 8001a56:	f7ff fe35 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f7ff fe32 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff fe2f 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff fe2c 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	f7ff fe29 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001a72:	20e1      	movs	r0, #225	; 0xe1
 8001a74:	f7ff fe16 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff fe23 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001a7e:	2015      	movs	r0, #21
 8001a80:	f7ff fe20 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001a84:	2017      	movs	r0, #23
 8001a86:	f7ff fe1d 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001a8a:	2007      	movs	r0, #7
 8001a8c:	f7ff fe1a 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001a90:	2011      	movs	r0, #17
 8001a92:	f7ff fe17 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001a96:	2006      	movs	r0, #6
 8001a98:	f7ff fe14 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001a9c:	202b      	movs	r0, #43	; 0x2b
 8001a9e:	f7ff fe11 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001aa2:	2056      	movs	r0, #86	; 0x56
 8001aa4:	f7ff fe0e 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001aa8:	203c      	movs	r0, #60	; 0x3c
 8001aaa:	f7ff fe0b 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001aae:	2005      	movs	r0, #5
 8001ab0:	f7ff fe08 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ab4:	2010      	movs	r0, #16
 8001ab6:	f7ff fe05 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001aba:	200f      	movs	r0, #15
 8001abc:	f7ff fe02 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ac0:	203f      	movs	r0, #63	; 0x3f
 8001ac2:	f7ff fdff 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ac6:	203f      	movs	r0, #63	; 0x3f
 8001ac8:	f7ff fdfc 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001acc:	200f      	movs	r0, #15
 8001ace:	f7ff fdf9 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001ad2:	202b      	movs	r0, #43	; 0x2b
 8001ad4:	f7ff fde6 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff fdf3 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff fdf0 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7ff fded 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001aea:	203f      	movs	r0, #63	; 0x3f
 8001aec:	f7ff fdea 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001af0:	202a      	movs	r0, #42	; 0x2a
 8001af2:	f7ff fdd7 	bl	80016a4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7ff fde4 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7ff fde1 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001b02:	2000      	movs	r0, #0
 8001b04:	f7ff fdde 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001b08:	20ef      	movs	r0, #239	; 0xef
 8001b0a:	f7ff fddb 	bl	80016c4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001b0e:	2011      	movs	r0, #17
 8001b10:	f7ff fdc8 	bl	80016a4 <LCD_WR_REG>
	HAL_Delay(120);
 8001b14:	2078      	movs	r0, #120	; 0x78
 8001b16:	f000 fcf5 	bl	8002504 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001b1a:	2029      	movs	r0, #41	; 0x29
 8001b1c:	f7ff fdc2 	bl	80016a4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001b20:	2201      	movs	r2, #1
 8001b22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b26:	4804      	ldr	r0, [pc, #16]	; (8001b38 <lcd_init+0x2bc>)
 8001b28:	f000 ffbe 	bl	8002aa8 <HAL_GPIO_WritePin>
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40020800 	.word	0x40020800
 8001b34:	200000e0 	.word	0x200000e0
 8001b38:	40020000 	.word	0x40020000

08001b3c <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	b298      	uxth	r0, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	8b3a      	ldrh	r2, [r7, #24]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7ff fe4d 	bl	8001804 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	b298      	uxth	r0, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	8b3a      	ldrh	r2, [r7, #24]
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff fe3d 	bl	8001804 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	b298      	uxth	r0, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	8b3a      	ldrh	r2, [r7, #24]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7ff fe2d 	bl	8001804 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	b298      	uxth	r0, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	8b3a      	ldrh	r2, [r7, #24]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7ff fe1d 	bl	8001804 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b298      	uxth	r0, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	8b3a      	ldrh	r2, [r7, #24]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7ff fe0d 	bl	8001804 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	b298      	uxth	r0, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	8b3a      	ldrh	r2, [r7, #24]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7ff fdfd 	bl	8001804 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	b298      	uxth	r0, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	8b3a      	ldrh	r2, [r7, #24]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f7ff fded 	bl	8001804 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	b298      	uxth	r0, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	8b3a      	ldrh	r2, [r7, #24]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7ff fddd 	bl	8001804 <lcd_DrawPoint>
}
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b08a      	sub	sp, #40	; 0x28
 8001c56:	af02      	add	r7, sp, #8
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	f1c3 0303 	rsb	r3, r3, #3
 8001c72:	613b      	str	r3, [r7, #16]


	if (fill)
 8001c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d04f      	beq.n	8001d1a <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001c7a:	e029      	b.n	8001cd0 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e00a      	b.n	8001c98 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	69fa      	ldr	r2, [r7, #28]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f7ff ff55 	bl	8001b3c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	ddf0      	ble.n	8001c82 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da06      	bge.n	8001cb4 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	009a      	lsls	r2, r3, #2
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	3306      	adds	r3, #6
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	e00a      	b.n	8001cca <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	009a      	lsls	r2, r3, #2
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	330a      	adds	r3, #10
 8001cc2:	613b      	str	r3, [r7, #16]
				y--;
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	ddd1      	ble.n	8001c7c <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001cd8:	e023      	b.n	8001d22 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	69fa      	ldr	r2, [r7, #28]
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f7ff ff29 	bl	8001b3c <_draw_circle_8>
			if (d < 0) {
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	da06      	bge.n	8001cfe <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	009a      	lsls	r2, r3, #2
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3306      	adds	r3, #6
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	e00a      	b.n	8001d14 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	009a      	lsls	r2, r3, #2
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4413      	add	r3, r2
 8001d0a:	330a      	adds	r3, #10
 8001d0c:	613b      	str	r3, [r7, #16]
				y--;
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	61bb      	str	r3, [r7, #24]
			x++;
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	3301      	adds	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	dddb      	ble.n	8001cda <lcd_DrawCircle+0x88>
}
 8001d22:	bf00      	nop
 8001d24:	3720      	adds	r7, #32
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001d30:	2201      	movs	r2, #1
 8001d32:	2140      	movs	r1, #64	; 0x40
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <led7_init+0x14>)
 8001d36:	f000 feb7 	bl	8002aa8 <HAL_GPIO_WritePin>
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40021800 	.word	0x40021800

08001d44 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001d48:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <led7_Scan+0x104>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <led7_Scan+0x104>)
 8001d52:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001d54:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <led7_Scan+0x108>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <led7_Scan+0x10c>)
 8001d5c:	5c9b      	ldrb	r3, [r3, r2]
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	b21a      	sxth	r2, r3
 8001d62:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <led7_Scan+0x104>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <led7_Scan+0x104>)
 8001d70:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001d72:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <led7_Scan+0x108>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d846      	bhi.n	8001e08 <led7_Scan+0xc4>
 8001d7a:	a201      	add	r2, pc, #4	; (adr r2, 8001d80 <led7_Scan+0x3c>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001d91 	.word	0x08001d91
 8001d84:	08001daf 	.word	0x08001daf
 8001d88:	08001dcd 	.word	0x08001dcd
 8001d8c:	08001deb 	.word	0x08001deb
	case 0:
		spi_buffer |= 0x00b0;
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <led7_Scan+0x104>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <led7_Scan+0x104>)
 8001d9c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <led7_Scan+0x104>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <led7_Scan+0x104>)
 8001daa:	801a      	strh	r2, [r3, #0]
		break;
 8001dac:	e02d      	b.n	8001e0a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <led7_Scan+0x104>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <led7_Scan+0x104>)
 8001dba:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <led7_Scan+0x104>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	f023 0320 	bic.w	r3, r3, #32
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <led7_Scan+0x104>)
 8001dc8:	801a      	strh	r2, [r3, #0]
		break;
 8001dca:	e01e      	b.n	8001e0a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <led7_Scan+0x104>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <led7_Scan+0x104>)
 8001dd8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <led7_Scan+0x104>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	f023 0310 	bic.w	r3, r3, #16
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <led7_Scan+0x104>)
 8001de6:	801a      	strh	r2, [r3, #0]
		break;
 8001de8:	e00f      	b.n	8001e0a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <led7_Scan+0x104>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <led7_Scan+0x104>)
 8001df6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <led7_Scan+0x104>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <led7_Scan+0x104>)
 8001e04:	801a      	strh	r2, [r3, #0]
		break;
 8001e06:	e000      	b.n	8001e0a <led7_Scan+0xc6>
	default:
		break;
 8001e08:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <led7_Scan+0x108>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	425a      	negs	r2, r3
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	f002 0203 	and.w	r2, r2, #3
 8001e1a:	bf58      	it	pl
 8001e1c:	4253      	negpl	r3, r2
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <led7_Scan+0x108>)
 8001e22:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2140      	movs	r1, #64	; 0x40
 8001e28:	480a      	ldr	r0, [pc, #40]	; (8001e54 <led7_Scan+0x110>)
 8001e2a:	f000 fe3d 	bl	8002aa8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001e2e:	2301      	movs	r3, #1
 8001e30:	2202      	movs	r2, #2
 8001e32:	4905      	ldr	r1, [pc, #20]	; (8001e48 <led7_Scan+0x104>)
 8001e34:	4808      	ldr	r0, [pc, #32]	; (8001e58 <led7_Scan+0x114>)
 8001e36:	f001 fb3e 	bl	80034b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	2140      	movs	r1, #64	; 0x40
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <led7_Scan+0x110>)
 8001e40:	f000 fe32 	bl	8002aa8 <HAL_GPIO_WritePin>
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000026 	.word	0x20000026
 8001e4c:	200000e6 	.word	0x200000e6
 8001e50:	20000018 	.word	0x20000018
 8001e54:	40021800 	.word	0x40021800
 8001e58:	20000130 	.word	0x20000130

08001e5c <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	4613      	mov	r3, r2
 8001e68:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	db0e      	blt.n	8001e8e <led7_SetDigit+0x32>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	dc0b      	bgt.n	8001e8e <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8001e76:	4a09      	ldr	r2, [pc, #36]	; (8001e9c <led7_SetDigit+0x40>)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	b2d9      	uxtb	r1, r3
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <led7_SetDigit+0x44>)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4413      	add	r3, r2
 8001e8a:	460a      	mov	r2, r1
 8001e8c:	701a      	strb	r2, [r3, #0]
	}
}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	2000001c 	.word	0x2000001c
 8001ea0:	20000018 	.word	0x20000018

08001ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ea8:	f000 faba 	bl	8002420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eac:	f000 f814 	bl	8001ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb0:	f7ff fb00 	bl	80014b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001eb4:	f000 fa18 	bl	80022e8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001eb8:	f000 f92a 	bl	8002110 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001ebc:	f7ff fa2a 	bl	8001314 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001ec0:	f000 f874 	bl	8001fac <system_init>
  lcd_Clear(WHITE);
 8001ec4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ec8:	f7ff fc6a 	bl	80017a0 <lcd_Clear>
  test_lcd();
 8001ecc:	f000 f8a4 	bl	8002018 <test_lcd>
  {
//	  while(!flag_timer2[0]);
//	  flag_timer2[0] = 0;
//	  button_Scan();
//	  test_button();
	  fsm_traffic_light();
 8001ed0:	f7fe fec0 	bl	8000c54 <fsm_traffic_light>
 8001ed4:	e7fc      	b.n	8001ed0 <main+0x2c>
	...

08001ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b094      	sub	sp, #80	; 0x50
 8001edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ede:	f107 0320 	add.w	r3, r7, #32
 8001ee2:	2230      	movs	r2, #48	; 0x30
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 fd9a 	bl	8004a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	4a27      	ldr	r2, [pc, #156]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <SystemClock_Config+0xcc>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a21      	ldr	r2, [pc, #132]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <SystemClock_Config+0xd0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f34:	2302      	movs	r3, #2
 8001f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f3c:	2310      	movs	r3, #16
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f40:	2302      	movs	r3, #2
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f44:	2300      	movs	r3, #0
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f48:	2308      	movs	r3, #8
 8001f4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f4c:	23a8      	movs	r3, #168	; 0xa8
 8001f4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f50:	2302      	movs	r3, #2
 8001f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f54:	2304      	movs	r3, #4
 8001f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f58:	f107 0320 	add.w	r3, r7, #32
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fdbd 	bl	8002adc <HAL_RCC_OscConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f68:	f000 f85d 	bl	8002026 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6c:	230f      	movs	r3, #15
 8001f6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f70:	2302      	movs	r3, #2
 8001f72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001f7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2105      	movs	r1, #5
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f001 f81e 	bl	8002fcc <HAL_RCC_ClockConfig>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f96:	f000 f846 	bl	8002026 <Error_Handler>
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3750      	adds	r7, #80	; 0x50
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40007000 	.word	0x40007000

08001fac <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2120      	movs	r1, #32
 8001fb4:	4817      	ldr	r0, [pc, #92]	; (8002014 <system_init+0x68>)
 8001fb6:	f000 fd77 	bl	8002aa8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2140      	movs	r1, #64	; 0x40
 8001fbe:	4815      	ldr	r0, [pc, #84]	; (8002014 <system_init+0x68>)
 8001fc0:	f000 fd72 	bl	8002aa8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	4812      	ldr	r0, [pc, #72]	; (8002014 <system_init+0x68>)
 8001fca:	f000 fd6d 	bl	8002aa8 <HAL_GPIO_WritePin>
	  timer_init();
 8001fce:	f000 f82f 	bl	8002030 <timer_init>
	  led7_init();
 8001fd2:	f7ff feab 	bl	8001d2c <led7_init>
	  button_init();
 8001fd6:	f7fe fa75 	bl	80004c4 <button_init>
	  lcd_init();
 8001fda:	f7ff fc4f 	bl	800187c <lcd_init>
	  setTimer2(50,0);
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2032      	movs	r0, #50	; 0x32
 8001fe2:	f000 f82f 	bl	8002044 <setTimer2>
	  setTimer2(1000, 1);
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fec:	f000 f82a 	bl	8002044 <setTimer2>
	  setTimer2(250, 2);
 8001ff0:	2102      	movs	r1, #2
 8001ff2:	20fa      	movs	r0, #250	; 0xfa
 8001ff4:	f000 f826 	bl	8002044 <setTimer2>
	  setTimer2(250, 3);
 8001ff8:	2103      	movs	r1, #3
 8001ffa:	20fa      	movs	r0, #250	; 0xfa
 8001ffc:	f000 f822 	bl	8002044 <setTimer2>
	  setTimer2(250, 4);
 8002000:	2104      	movs	r1, #4
 8002002:	20fa      	movs	r0, #250	; 0xfa
 8002004:	f000 f81e 	bl	8002044 <setTimer2>
	  setTimer2(50, 5);
 8002008:	2105      	movs	r1, #5
 800200a:	2032      	movs	r0, #50	; 0x32
 800200c:	f000 f81a 	bl	8002044 <setTimer2>
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000

08002018 <test_lcd>:
		if(button_count[i] == 1){
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
void test_lcd(){
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
//	lcd_DrawCircle(30, 210, GREEN, 18, 1);
//
//	lcd_DrawCircle(210, 210, RED, 18, 1);
//	lcd_DrawCircle(210, 150, YELLOW, 18, 1);
//	lcd_DrawCircle(210, 90, GREEN, 18, 1);
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800202a:	b672      	cpsid	i
}
 800202c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800202e:	e7fe      	b.n	800202e <Error_Handler+0x8>

08002030 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <timer_init+0x10>)
 8002036:	f001 fff1 	bl	800401c <HAL_TIM_Base_Start_IT>
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000188 	.word	0x20000188

08002044 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration, int tim2_arr_pos){
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	80fb      	strh	r3, [r7, #6]
	timer2_MUL[tim2_arr_pos] = duration/TIMER_CYCLE_2;
 8002050:	490b      	ldr	r1, [pc, #44]	; (8002080 <setTimer2+0x3c>)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	88fa      	ldrh	r2, [r7, #6]
 8002056:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	timer2_counter[tim2_arr_pos] = timer2_MUL[tim2_arr_pos];
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <setTimer2+0x3c>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <setTimer2+0x40>)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	flag_timer2[tim2_arr_pos] = 0;
 800206a:	4a07      	ldr	r2, [pc, #28]	; (8002088 <setTimer2+0x44>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2100      	movs	r1, #0
 8002070:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	20000118 	.word	0x20000118
 8002084:	20000100 	.word	0x20000100
 8002088:	200000e8 	.word	0x200000e8

0800208c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209c:	d12d      	bne.n	80020fa <HAL_TIM_PeriodElapsedCallback+0x6e>
		for(int i = 0; i < 12; i++)
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	e025      	b.n	80020f0 <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			if(timer2_counter[i] > 0){
 80020a4:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01c      	beq.n	80020ea <HAL_TIM_PeriodElapsedCallback+0x5e>
				timer2_counter[i]--;
 80020b0:	4a14      	ldr	r2, [pc, #80]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b299      	uxth	r1, r3
 80020bc:	4a11      	ldr	r2, [pc, #68]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(timer2_counter[i] == 0) {
 80020c4:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10c      	bne.n	80020ea <HAL_TIM_PeriodElapsedCallback+0x5e>
					flag_timer2[i] = 1;
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2101      	movs	r1, #1
 80020d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					timer2_counter[i] = timer2_MUL[i];
 80020da:	4a0c      	ldr	r2, [pc, #48]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80020e2:	4a08      	ldr	r2, [pc, #32]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < 12; i++)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3301      	adds	r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b0b      	cmp	r3, #11
 80020f4:	ddd6      	ble.n	80020a4 <HAL_TIM_PeriodElapsedCallback+0x18>
				}
			}
		}
		// 1ms interrupt here
		led7_Scan();
 80020f6:	f7ff fe25 	bl	8001d44 <led7_Scan>
	}
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000100 	.word	0x20000100
 8002108:	200000e8 	.word	0x200000e8
 800210c:	20000118 	.word	0x20000118

08002110 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <MX_SPI1_Init+0x64>)
 8002116:	4a18      	ldr	r2, [pc, #96]	; (8002178 <MX_SPI1_Init+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <MX_SPI1_Init+0x64>)
 800211c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002120:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_SPI1_Init+0x64>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <MX_SPI1_Init+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_SPI1_Init+0x64>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <MX_SPI1_Init+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_SPI1_Init+0x64>)
 800213c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002140:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_SPI1_Init+0x64>)
 8002144:	2200      	movs	r2, #0
 8002146:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <MX_SPI1_Init+0x64>)
 800214a:	2200      	movs	r2, #0
 800214c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <MX_SPI1_Init+0x64>)
 8002150:	2200      	movs	r2, #0
 8002152:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002154:	4b07      	ldr	r3, [pc, #28]	; (8002174 <MX_SPI1_Init+0x64>)
 8002156:	2200      	movs	r2, #0
 8002158:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <MX_SPI1_Init+0x64>)
 800215c:	220a      	movs	r2, #10
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002160:	4804      	ldr	r0, [pc, #16]	; (8002174 <MX_SPI1_Init+0x64>)
 8002162:	f001 f91f 	bl	80033a4 <HAL_SPI_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800216c:	f7ff ff5b 	bl	8002026 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000130 	.word	0x20000130
 8002178:	40013000 	.word	0x40013000

0800217c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	; 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a19      	ldr	r2, [pc, #100]	; (8002200 <HAL_SPI_MspInit+0x84>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d12b      	bne.n	80021f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_SPI_MspInit+0x88>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	4a17      	ldr	r2, [pc, #92]	; (8002204 <HAL_SPI_MspInit+0x88>)
 80021a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021ac:	6453      	str	r3, [r2, #68]	; 0x44
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_SPI_MspInit+0x88>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_SPI_MspInit+0x88>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a10      	ldr	r2, [pc, #64]	; (8002204 <HAL_SPI_MspInit+0x88>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_SPI_MspInit+0x88>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80021d6:	2338      	movs	r3, #56	; 0x38
 80021d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021e6:	2305      	movs	r3, #5
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	4805      	ldr	r0, [pc, #20]	; (8002208 <HAL_SPI_MspInit+0x8c>)
 80021f2:	f000 fabd 	bl	8002770 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80021f6:	bf00      	nop
 80021f8:	3728      	adds	r7, #40	; 0x28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40013000 	.word	0x40013000
 8002204:	40023800 	.word	0x40023800
 8002208:	40020400 	.word	0x40020400

0800220c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_MspInit+0x4c>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <HAL_MspInit+0x4c>)
 800221c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002220:	6453      	str	r3, [r2, #68]	; 0x44
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_MspInit+0x4c>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_MspInit+0x4c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a08      	ldr	r2, [pc, #32]	; (8002258 <HAL_MspInit+0x4c>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_MspInit+0x4c>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800

0800225c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <NMI_Handler+0x4>

08002262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002266:	e7fe      	b.n	8002266 <HardFault_Handler+0x4>

08002268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800226c:	e7fe      	b.n	800226c <MemManage_Handler+0x4>

0800226e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002272:	e7fe      	b.n	8002272 <BusFault_Handler+0x4>

08002274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <UsageFault_Handler+0x4>

0800227a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a8:	f000 f90c 	bl	80024c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022b4:	4802      	ldr	r0, [pc, #8]	; (80022c0 <TIM2_IRQHandler+0x10>)
 80022b6:	f001 ff21 	bl	80040fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000188 	.word	0x20000188

080022c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <SystemInit+0x20>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <SystemInit+0x20>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ee:	f107 0308 	add.w	r3, r7, #8
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fc:	463b      	mov	r3, r7
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <MX_TIM2_Init+0x94>)
 8002306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800230a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <MX_TIM2_Init+0x94>)
 800230e:	f240 3247 	movw	r2, #839	; 0x347
 8002312:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <MX_TIM2_Init+0x94>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <MX_TIM2_Init+0x94>)
 800231c:	2263      	movs	r2, #99	; 0x63
 800231e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <MX_TIM2_Init+0x94>)
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <MX_TIM2_Init+0x94>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800232c:	4813      	ldr	r0, [pc, #76]	; (800237c <MX_TIM2_Init+0x94>)
 800232e:	f001 fe25 	bl	8003f7c <HAL_TIM_Base_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002338:	f7ff fe75 	bl	8002026 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800233c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002340:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002342:	f107 0308 	add.w	r3, r7, #8
 8002346:	4619      	mov	r1, r3
 8002348:	480c      	ldr	r0, [pc, #48]	; (800237c <MX_TIM2_Init+0x94>)
 800234a:	f001 ffdf 	bl	800430c <HAL_TIM_ConfigClockSource>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002354:	f7ff fe67 	bl	8002026 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002358:	2300      	movs	r3, #0
 800235a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002360:	463b      	mov	r3, r7
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_TIM2_Init+0x94>)
 8002366:	f002 f9fb 	bl	8004760 <HAL_TIMEx_MasterConfigSynchronization>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002370:	f7ff fe59 	bl	8002026 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000188 	.word	0x20000188

08002380 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002390:	d115      	bne.n	80023be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <HAL_TIM_Base_MspInit+0x48>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <HAL_TIM_Base_MspInit+0x48>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_TIM_Base_MspInit+0x48>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2100      	movs	r1, #0
 80023b2:	201c      	movs	r0, #28
 80023b4:	f000 f9a5 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023b8:	201c      	movs	r0, #28
 80023ba:	f000 f9be 	bl	800273a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800

080023cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d0:	480d      	ldr	r0, [pc, #52]	; (8002408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023d2:	490e      	ldr	r1, [pc, #56]	; (800240c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e8:	4c0b      	ldr	r4, [pc, #44]	; (8002418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023f6:	f7ff ff65 	bl	80022c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f002 fb19 	bl	8004a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fe:	f7ff fd51 	bl	8001ea4 <main>
  bx  lr    
 8002402:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8002410:	08004ab0 	.word	0x08004ab0
  ldr r2, =_sbss
 8002414:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8002418:	200001d4 	.word	0x200001d4

0800241c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC_IRQHandler>
	...

08002420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <HAL_Init+0x40>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <HAL_Init+0x40>)
 800242a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <HAL_Init+0x40>)
 8002436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <HAL_Init+0x40>)
 8002442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002446:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002448:	2003      	movs	r0, #3
 800244a:	f000 f94f 	bl	80026ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244e:	200f      	movs	r0, #15
 8002450:	f000 f808 	bl	8002464 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002454:	f7ff feda 	bl	800220c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00

08002464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_InitTick+0x54>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_InitTick+0x58>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247a:	fbb3 f3f1 	udiv	r3, r3, r1
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f967 	bl	8002756 <HAL_SYSTICK_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e00e      	b.n	80024b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b0f      	cmp	r3, #15
 8002496:	d80a      	bhi.n	80024ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002498:	2200      	movs	r2, #0
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	f000 f92f 	bl	8002702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a4:	4a06      	ldr	r2, [pc, #24]	; (80024c0 <HAL_InitTick+0x5c>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000028 	.word	0x20000028
 80024bc:	20000030 	.word	0x20000030
 80024c0:	2000002c 	.word	0x2000002c

080024c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_IncTick+0x20>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_IncTick+0x24>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_IncTick+0x24>)
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000030 	.word	0x20000030
 80024e8:	200001d0 	.word	0x200001d0

080024ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return uwTick;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_GetTick+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	200001d0 	.word	0x200001d0

08002504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff ffee 	bl	80024ec <HAL_GetTick>
 8002510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d005      	beq.n	800252a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_Delay+0x44>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800252a:	bf00      	nop
 800252c:	f7ff ffde 	bl	80024ec <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	429a      	cmp	r2, r3
 800253a:	d8f7      	bhi.n	800252c <HAL_Delay+0x28>
  {
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000030 	.word	0x20000030

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0b      	blt.n	80025da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <__NVIC_EnableIRQ+0x38>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db0a      	blt.n	8002616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	490c      	ldr	r1, [pc, #48]	; (8002638 <__NVIC_SetPriority+0x4c>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	440b      	add	r3, r1
 8002610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002614:	e00a      	b.n	800262c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4908      	ldr	r1, [pc, #32]	; (800263c <__NVIC_SetPriority+0x50>)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	3b04      	subs	r3, #4
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	440b      	add	r3, r1
 800262a:	761a      	strb	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f1c3 0307 	rsb	r3, r3, #7
 800265a:	2b04      	cmp	r3, #4
 800265c:	bf28      	it	cs
 800265e:	2304      	movcs	r3, #4
 8002660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3304      	adds	r3, #4
 8002666:	2b06      	cmp	r3, #6
 8002668:	d902      	bls.n	8002670 <NVIC_EncodePriority+0x30>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3b03      	subs	r3, #3
 800266e:	e000      	b.n	8002672 <NVIC_EncodePriority+0x32>
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	f04f 32ff 	mov.w	r2, #4294967295
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	401a      	ands	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002688:	f04f 31ff 	mov.w	r1, #4294967295
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	43d9      	mvns	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	4313      	orrs	r3, r2
         );
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b8:	d301      	bcc.n	80026be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00f      	b.n	80026de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <SysTick_Config+0x40>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c6:	210f      	movs	r1, #15
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f7ff ff8e 	bl	80025ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <SysTick_Config+0x40>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <SysTick_Config+0x40>)
 80026d8:	2207      	movs	r2, #7
 80026da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	e000e010 	.word	0xe000e010

080026ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ff29 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002714:	f7ff ff3e 	bl	8002594 <__NVIC_GetPriorityGrouping>
 8002718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	6978      	ldr	r0, [r7, #20]
 8002720:	f7ff ff8e 	bl	8002640 <NVIC_EncodePriority>
 8002724:	4602      	mov	r2, r0
 8002726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff5d 	bl	80025ec <__NVIC_SetPriority>
}
 8002732:	bf00      	nop
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff31 	bl	80025b0 <__NVIC_EnableIRQ>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ffa2 	bl	80026a8 <SysTick_Config>
 8002764:	4603      	mov	r3, r0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	e16b      	b.n	8002a64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800278c:	2201      	movs	r2, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	f040 815a 	bne.w	8002a5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d005      	beq.n	80027c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d130      	bne.n	8002824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2203      	movs	r2, #3
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f8:	2201      	movs	r2, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 0201 	and.w	r2, r3, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b03      	cmp	r3, #3
 800282e:	d017      	beq.n	8002860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d123      	bne.n	80028b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	08da      	lsrs	r2, r3, #3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3208      	adds	r2, #8
 8002874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	220f      	movs	r2, #15
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	08da      	lsrs	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3208      	adds	r2, #8
 80028ae:	69b9      	ldr	r1, [r7, #24]
 80028b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0203 	and.w	r2, r3, #3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80b4 	beq.w	8002a5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b60      	ldr	r3, [pc, #384]	; (8002a7c <HAL_GPIO_Init+0x30c>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4a5f      	ldr	r2, [pc, #380]	; (8002a7c <HAL_GPIO_Init+0x30c>)
 8002900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002904:	6453      	str	r3, [r2, #68]	; 0x44
 8002906:	4b5d      	ldr	r3, [pc, #372]	; (8002a7c <HAL_GPIO_Init+0x30c>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002912:	4a5b      	ldr	r2, [pc, #364]	; (8002a80 <HAL_GPIO_Init+0x310>)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3302      	adds	r3, #2
 800291a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	220f      	movs	r2, #15
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_GPIO_Init+0x314>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d02b      	beq.n	8002996 <HAL_GPIO_Init+0x226>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a51      	ldr	r2, [pc, #324]	; (8002a88 <HAL_GPIO_Init+0x318>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d025      	beq.n	8002992 <HAL_GPIO_Init+0x222>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a50      	ldr	r2, [pc, #320]	; (8002a8c <HAL_GPIO_Init+0x31c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01f      	beq.n	800298e <HAL_GPIO_Init+0x21e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4f      	ldr	r2, [pc, #316]	; (8002a90 <HAL_GPIO_Init+0x320>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d019      	beq.n	800298a <HAL_GPIO_Init+0x21a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4e      	ldr	r2, [pc, #312]	; (8002a94 <HAL_GPIO_Init+0x324>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_GPIO_Init+0x216>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4d      	ldr	r2, [pc, #308]	; (8002a98 <HAL_GPIO_Init+0x328>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00d      	beq.n	8002982 <HAL_GPIO_Init+0x212>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4c      	ldr	r2, [pc, #304]	; (8002a9c <HAL_GPIO_Init+0x32c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d007      	beq.n	800297e <HAL_GPIO_Init+0x20e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4b      	ldr	r2, [pc, #300]	; (8002aa0 <HAL_GPIO_Init+0x330>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <HAL_GPIO_Init+0x20a>
 8002976:	2307      	movs	r3, #7
 8002978:	e00e      	b.n	8002998 <HAL_GPIO_Init+0x228>
 800297a:	2308      	movs	r3, #8
 800297c:	e00c      	b.n	8002998 <HAL_GPIO_Init+0x228>
 800297e:	2306      	movs	r3, #6
 8002980:	e00a      	b.n	8002998 <HAL_GPIO_Init+0x228>
 8002982:	2305      	movs	r3, #5
 8002984:	e008      	b.n	8002998 <HAL_GPIO_Init+0x228>
 8002986:	2304      	movs	r3, #4
 8002988:	e006      	b.n	8002998 <HAL_GPIO_Init+0x228>
 800298a:	2303      	movs	r3, #3
 800298c:	e004      	b.n	8002998 <HAL_GPIO_Init+0x228>
 800298e:	2302      	movs	r3, #2
 8002990:	e002      	b.n	8002998 <HAL_GPIO_Init+0x228>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_GPIO_Init+0x228>
 8002996:	2300      	movs	r3, #0
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	f002 0203 	and.w	r2, r2, #3
 800299e:	0092      	lsls	r2, r2, #2
 80029a0:	4093      	lsls	r3, r2
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a8:	4935      	ldr	r1, [pc, #212]	; (8002a80 <HAL_GPIO_Init+0x310>)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	3302      	adds	r3, #2
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029b6:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029da:	4a32      	ldr	r2, [pc, #200]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a04:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a0a:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a58:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3301      	adds	r3, #1
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	2b0f      	cmp	r3, #15
 8002a68:	f67f ae90 	bls.w	800278c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3724      	adds	r7, #36	; 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40013800 	.word	0x40013800
 8002a84:	40020000 	.word	0x40020000
 8002a88:	40020400 	.word	0x40020400
 8002a8c:	40020800 	.word	0x40020800
 8002a90:	40020c00 	.word	0x40020c00
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40021400 	.word	0x40021400
 8002a9c:	40021800 	.word	0x40021800
 8002aa0:	40021c00 	.word	0x40021c00
 8002aa4:	40013c00 	.word	0x40013c00

08002aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	807b      	strh	r3, [r7, #2]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab8:	787b      	ldrb	r3, [r7, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002abe:	887a      	ldrh	r2, [r7, #2]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ac4:	e003      	b.n	8002ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	041a      	lsls	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	619a      	str	r2, [r3, #24]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e267      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d075      	beq.n	8002be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002afa:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d00c      	beq.n	8002b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b06:	4b85      	ldr	r3, [pc, #532]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d112      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b12:	4b82      	ldr	r3, [pc, #520]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1e:	d10b      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	4b7e      	ldr	r3, [pc, #504]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d05b      	beq.n	8002be4 <HAL_RCC_OscConfig+0x108>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d157      	bne.n	8002be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e242      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b40:	d106      	bne.n	8002b50 <HAL_RCC_OscConfig+0x74>
 8002b42:	4b76      	ldr	r3, [pc, #472]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a75      	ldr	r2, [pc, #468]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e01d      	b.n	8002b8c <HAL_RCC_OscConfig+0xb0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x98>
 8002b5a:	4b70      	ldr	r3, [pc, #448]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6f      	ldr	r2, [pc, #444]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b6d      	ldr	r3, [pc, #436]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6c      	ldr	r2, [pc, #432]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0xb0>
 8002b74:	4b69      	ldr	r3, [pc, #420]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a68      	ldr	r2, [pc, #416]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a65      	ldr	r2, [pc, #404]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7ff fcaa 	bl	80024ec <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7ff fca6 	bl	80024ec <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e207      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b5b      	ldr	r3, [pc, #364]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0xc0>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7ff fc96 	bl	80024ec <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7ff fc92 	bl	80024ec <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1f3      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	4b51      	ldr	r3, [pc, #324]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xe8>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d063      	beq.n	8002cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bf2:	4b4a      	ldr	r3, [pc, #296]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfe:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d11c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0a:	4b44      	ldr	r3, [pc, #272]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d116      	bne.n	8002c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_RCC_OscConfig+0x152>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e1c7      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4937      	ldr	r1, [pc, #220]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	e03a      	b.n	8002cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4c:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <HAL_RCC_OscConfig+0x244>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7ff fc4b 	bl	80024ec <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7ff fc47 	bl	80024ec <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e1a8      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4925      	ldr	r1, [pc, #148]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]
 8002c8c:	e015      	b.n	8002cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8e:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCC_OscConfig+0x244>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7ff fc2a 	bl	80024ec <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c9c:	f7ff fc26 	bl	80024ec <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e187      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d036      	beq.n	8002d34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d016      	beq.n	8002cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_RCC_OscConfig+0x248>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7ff fc0a 	bl	80024ec <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7ff fc06 	bl	80024ec <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e167      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x200>
 8002cfa:	e01b      	b.n	8002d34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_RCC_OscConfig+0x248>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7ff fbf3 	bl	80024ec <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d08:	e00e      	b.n	8002d28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d0a:	f7ff fbef 	bl	80024ec <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d907      	bls.n	8002d28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e150      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	42470000 	.word	0x42470000
 8002d24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d28:	4b88      	ldr	r3, [pc, #544]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1ea      	bne.n	8002d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8097 	beq.w	8002e70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d46:	4b81      	ldr	r3, [pc, #516]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	4b7d      	ldr	r3, [pc, #500]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a7c      	ldr	r2, [pc, #496]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b7a      	ldr	r3, [pc, #488]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d72:	4b77      	ldr	r3, [pc, #476]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7e:	4b74      	ldr	r3, [pc, #464]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a73      	ldr	r2, [pc, #460]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8a:	f7ff fbaf 	bl	80024ec <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d92:	f7ff fbab 	bl	80024ec <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e10c      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x2ea>
 8002db8:	4b64      	ldr	r3, [pc, #400]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	4a63      	ldr	r2, [pc, #396]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc4:	e01c      	b.n	8002e00 <HAL_RCC_OscConfig+0x324>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b05      	cmp	r3, #5
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x30c>
 8002dce:	4b5f      	ldr	r3, [pc, #380]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a5e      	ldr	r2, [pc, #376]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dd4:	f043 0304 	orr.w	r3, r3, #4
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dda:	4b5c      	ldr	r3, [pc, #368]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a5b      	ldr	r2, [pc, #364]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
 8002de6:	e00b      	b.n	8002e00 <HAL_RCC_OscConfig+0x324>
 8002de8:	4b58      	ldr	r3, [pc, #352]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a57      	ldr	r2, [pc, #348]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	4b55      	ldr	r3, [pc, #340]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4a54      	ldr	r2, [pc, #336]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dfa:	f023 0304 	bic.w	r3, r3, #4
 8002dfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d015      	beq.n	8002e34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7ff fb70 	bl	80024ec <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7ff fb6c 	bl	80024ec <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e0cb      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e26:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0ee      	beq.n	8002e10 <HAL_RCC_OscConfig+0x334>
 8002e32:	e014      	b.n	8002e5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7ff fb5a 	bl	80024ec <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3c:	f7ff fb56 	bl	80024ec <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e0b5      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e52:	4b3e      	ldr	r3, [pc, #248]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1ee      	bne.n	8002e3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e64:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	4a38      	ldr	r2, [pc, #224]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80a1 	beq.w	8002fbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e7a:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d05c      	beq.n	8002f40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d141      	bne.n	8002f12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <HAL_RCC_OscConfig+0x478>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7ff fb2a 	bl	80024ec <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7ff fb26 	bl	80024ec <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e087      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	019b      	lsls	r3, r3, #6
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	491b      	ldr	r1, [pc, #108]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_RCC_OscConfig+0x478>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7ff faff 	bl	80024ec <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7ff fafb 	bl	80024ec <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e05c      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x416>
 8002f10:	e054      	b.n	8002fbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_RCC_OscConfig+0x478>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7ff fae8 	bl	80024ec <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f20:	f7ff fae4 	bl	80024ec <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e045      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x444>
 8002f3e:	e03d      	b.n	8002fbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e038      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40007000 	.word	0x40007000
 8002f54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x4ec>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d028      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d121      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d11a      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d111      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800

08002fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0cc      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b68      	ldr	r3, [pc, #416]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d90c      	bls.n	8003008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b65      	ldr	r3, [pc, #404]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b63      	ldr	r3, [pc, #396]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0b8      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d020      	beq.n	8003056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a58      	ldr	r2, [pc, #352]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800302a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003038:	4b53      	ldr	r3, [pc, #332]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4a52      	ldr	r2, [pc, #328]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003044:	4b50      	ldr	r3, [pc, #320]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	494d      	ldr	r1, [pc, #308]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d044      	beq.n	80030ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d119      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e07f      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d003      	beq.n	800308a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003086:	2b03      	cmp	r3, #3
 8003088:	d107      	bne.n	800309a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308a:	4b3f      	ldr	r3, [pc, #252]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e06f      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309a:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e067      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030aa:	4b37      	ldr	r3, [pc, #220]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f023 0203 	bic.w	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4934      	ldr	r1, [pc, #208]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030bc:	f7ff fa16 	bl	80024ec <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	e00a      	b.n	80030da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c4:	f7ff fa12 	bl	80024ec <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e04f      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030da:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 020c 	and.w	r2, r3, #12
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d1eb      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ec:	4b25      	ldr	r3, [pc, #148]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d20c      	bcs.n	8003114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b20      	ldr	r3, [pc, #128]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e032      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003120:	4b19      	ldr	r3, [pc, #100]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4916      	ldr	r1, [pc, #88]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	490e      	ldr	r1, [pc, #56]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003152:	f000 f821 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 8003156:	4602      	mov	r2, r0
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	490a      	ldr	r1, [pc, #40]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	5ccb      	ldrb	r3, [r1, r3]
 8003166:	fa22 f303 	lsr.w	r3, r2, r3
 800316a:	4a09      	ldr	r2, [pc, #36]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff f976 	bl	8002464 <HAL_InitTick>

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023c00 	.word	0x40023c00
 8003188:	40023800 	.word	0x40023800
 800318c:	08004a90 	.word	0x08004a90
 8003190:	20000028 	.word	0x20000028
 8003194:	2000002c 	.word	0x2000002c

08003198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800319c:	b094      	sub	sp, #80	; 0x50
 800319e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	647b      	str	r3, [r7, #68]	; 0x44
 80031a4:	2300      	movs	r3, #0
 80031a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a8:	2300      	movs	r3, #0
 80031aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b0:	4b79      	ldr	r3, [pc, #484]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d00d      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x40>
 80031bc:	2b08      	cmp	r3, #8
 80031be:	f200 80e1 	bhi.w	8003384 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x34>
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ca:	e0db      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_GetSysClockFreq+0x204>)
 80031ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031d0:	e0db      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031d2:	4b73      	ldr	r3, [pc, #460]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80031d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031d6:	e0d8      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d8:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031e2:	4b6d      	ldr	r3, [pc, #436]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d063      	beq.n	80032b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ee:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	2200      	movs	r2, #0
 80031f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003200:	633b      	str	r3, [r7, #48]	; 0x30
 8003202:	2300      	movs	r3, #0
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
 8003206:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800320a:	4622      	mov	r2, r4
 800320c:	462b      	mov	r3, r5
 800320e:	f04f 0000 	mov.w	r0, #0
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	0159      	lsls	r1, r3, #5
 8003218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800321c:	0150      	lsls	r0, r2, #5
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4621      	mov	r1, r4
 8003224:	1a51      	subs	r1, r2, r1
 8003226:	6139      	str	r1, [r7, #16]
 8003228:	4629      	mov	r1, r5
 800322a:	eb63 0301 	sbc.w	r3, r3, r1
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800323c:	4659      	mov	r1, fp
 800323e:	018b      	lsls	r3, r1, #6
 8003240:	4651      	mov	r1, sl
 8003242:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003246:	4651      	mov	r1, sl
 8003248:	018a      	lsls	r2, r1, #6
 800324a:	4651      	mov	r1, sl
 800324c:	ebb2 0801 	subs.w	r8, r2, r1
 8003250:	4659      	mov	r1, fp
 8003252:	eb63 0901 	sbc.w	r9, r3, r1
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800326a:	4690      	mov	r8, r2
 800326c:	4699      	mov	r9, r3
 800326e:	4623      	mov	r3, r4
 8003270:	eb18 0303 	adds.w	r3, r8, r3
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	462b      	mov	r3, r5
 8003278:	eb49 0303 	adc.w	r3, r9, r3
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800328a:	4629      	mov	r1, r5
 800328c:	024b      	lsls	r3, r1, #9
 800328e:	4621      	mov	r1, r4
 8003290:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003294:	4621      	mov	r1, r4
 8003296:	024a      	lsls	r2, r1, #9
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329e:	2200      	movs	r2, #0
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032a8:	f7fc ff8e 	bl	80001c8 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4613      	mov	r3, r2
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b4:	e058      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4b38      	ldr	r3, [pc, #224]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	2200      	movs	r2, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	4611      	mov	r1, r2
 80032c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032c6:	623b      	str	r3, [r7, #32]
 80032c8:	2300      	movs	r3, #0
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
 80032cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032d0:	4642      	mov	r2, r8
 80032d2:	464b      	mov	r3, r9
 80032d4:	f04f 0000 	mov.w	r0, #0
 80032d8:	f04f 0100 	mov.w	r1, #0
 80032dc:	0159      	lsls	r1, r3, #5
 80032de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e2:	0150      	lsls	r0, r2, #5
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4641      	mov	r1, r8
 80032ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80032ee:	4649      	mov	r1, r9
 80032f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003300:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003304:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003308:	ebb2 040a 	subs.w	r4, r2, sl
 800330c:	eb63 050b 	sbc.w	r5, r3, fp
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	00eb      	lsls	r3, r5, #3
 800331a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800331e:	00e2      	lsls	r2, r4, #3
 8003320:	4614      	mov	r4, r2
 8003322:	461d      	mov	r5, r3
 8003324:	4643      	mov	r3, r8
 8003326:	18e3      	adds	r3, r4, r3
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	464b      	mov	r3, r9
 800332c:	eb45 0303 	adc.w	r3, r5, r3
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800333e:	4629      	mov	r1, r5
 8003340:	028b      	lsls	r3, r1, #10
 8003342:	4621      	mov	r1, r4
 8003344:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003348:	4621      	mov	r1, r4
 800334a:	028a      	lsls	r2, r1, #10
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003352:	2200      	movs	r2, #0
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	61fa      	str	r2, [r7, #28]
 8003358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800335c:	f7fc ff34 	bl	80001c8 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4613      	mov	r3, r2
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	3301      	adds	r3, #1
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800337a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800337c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003380:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003382:	e002      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetSysClockFreq+0x204>)
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800338c:	4618      	mov	r0, r3
 800338e:	3750      	adds	r7, #80	; 0x50
 8003390:	46bd      	mov	sp, r7
 8003392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	00f42400 	.word	0x00f42400
 80033a0:	007a1200 	.word	0x007a1200

080033a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e07b      	b.n	80034ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d108      	bne.n	80033d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033c6:	d009      	beq.n	80033dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	61da      	str	r2, [r3, #28]
 80033ce:	e005      	b.n	80033dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe fec0 	bl	800217c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003412:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003424:	431a      	orrs	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	ea42 0103 	orr.w	r1, r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	f003 0104 	and.w	r1, r3, #4
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	f003 0210 	and.w	r2, r3, #16
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800349c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b088      	sub	sp, #32
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_SPI_Transmit+0x22>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e126      	b.n	8003726 <HAL_SPI_Transmit+0x270>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034e0:	f7ff f804 	bl	80024ec <HAL_GetTick>
 80034e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d002      	beq.n	80034fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034fa:	e10b      	b.n	8003714 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_SPI_Transmit+0x52>
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800350c:	e102      	b.n	8003714 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2203      	movs	r2, #3
 8003512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	88fa      	ldrh	r2, [r7, #6]
 8003526:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	88fa      	ldrh	r2, [r7, #6]
 800352c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003554:	d10f      	bne.n	8003576 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003564:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003574:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d007      	beq.n	8003594 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003592:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800359c:	d14b      	bne.n	8003636 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_SPI_Transmit+0xf6>
 80035a6:	8afb      	ldrh	r3, [r7, #22]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d13e      	bne.n	800362a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	881a      	ldrh	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	1c9a      	adds	r2, r3, #2
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035d0:	e02b      	b.n	800362a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d112      	bne.n	8003606 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	881a      	ldrh	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	1c9a      	adds	r2, r3, #2
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	86da      	strh	r2, [r3, #54]	; 0x36
 8003604:	e011      	b.n	800362a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003606:	f7fe ff71 	bl	80024ec <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d803      	bhi.n	800361e <HAL_SPI_Transmit+0x168>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d102      	bne.n	8003624 <HAL_SPI_Transmit+0x16e>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003628:	e074      	b.n	8003714 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1ce      	bne.n	80035d2 <HAL_SPI_Transmit+0x11c>
 8003634:	e04c      	b.n	80036d0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_SPI_Transmit+0x18e>
 800363e:	8afb      	ldrh	r3, [r7, #22]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d140      	bne.n	80036c6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	330c      	adds	r3, #12
 800364e:	7812      	ldrb	r2, [r2, #0]
 8003650:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800366a:	e02c      	b.n	80036c6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b02      	cmp	r3, #2
 8003678:	d113      	bne.n	80036a2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	7812      	ldrb	r2, [r2, #0]
 8003686:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	86da      	strh	r2, [r3, #54]	; 0x36
 80036a0:	e011      	b.n	80036c6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a2:	f7fe ff23 	bl	80024ec <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d803      	bhi.n	80036ba <HAL_SPI_Transmit+0x204>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b8:	d102      	bne.n	80036c0 <HAL_SPI_Transmit+0x20a>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036c4:	e026      	b.n	8003714 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1cd      	bne.n	800366c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	6839      	ldr	r1, [r7, #0]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fbcb 	bl	8003e70 <SPI_EndRxTxTransaction>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e000      	b.n	8003714 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003712:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003724:	7ffb      	ldrb	r3, [r7, #31]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b088      	sub	sp, #32
 8003732:	af02      	add	r7, sp, #8
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	4613      	mov	r3, r2
 800373c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800374a:	d112      	bne.n	8003772 <HAL_SPI_Receive+0x44>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10e      	bne.n	8003772 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2204      	movs	r2, #4
 8003758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800375c:	88fa      	ldrh	r2, [r7, #6]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	4613      	mov	r3, r2
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f8f1 	bl	8003950 <HAL_SPI_TransmitReceive>
 800376e:	4603      	mov	r3, r0
 8003770:	e0ea      	b.n	8003948 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_SPI_Receive+0x52>
 800377c:	2302      	movs	r3, #2
 800377e:	e0e3      	b.n	8003948 <HAL_SPI_Receive+0x21a>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003788:	f7fe feb0 	bl	80024ec <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d002      	beq.n	80037a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800379a:	2302      	movs	r3, #2
 800379c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800379e:	e0ca      	b.n	8003936 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_SPI_Receive+0x7e>
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d102      	bne.n	80037b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80037b0:	e0c1      	b.n	8003936 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2204      	movs	r2, #4
 80037b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	88fa      	ldrh	r2, [r7, #6]
 80037d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f8:	d10f      	bne.n	800381a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003808:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003818:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d007      	beq.n	8003838 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003836:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d162      	bne.n	8003906 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003840:	e02e      	b.n	80038a0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d115      	bne.n	800387c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f103 020c 	add.w	r2, r3, #12
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	7812      	ldrb	r2, [r2, #0]
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	87da      	strh	r2, [r3, #62]	; 0x3e
 800387a:	e011      	b.n	80038a0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800387c:	f7fe fe36 	bl	80024ec <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d803      	bhi.n	8003894 <HAL_SPI_Receive+0x166>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d102      	bne.n	800389a <HAL_SPI_Receive+0x16c>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800389e:	e04a      	b.n	8003936 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1cb      	bne.n	8003842 <HAL_SPI_Receive+0x114>
 80038aa:	e031      	b.n	8003910 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d113      	bne.n	80038e2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	b292      	uxth	r2, r2
 80038c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	1c9a      	adds	r2, r3, #2
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038e0:	e011      	b.n	8003906 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038e2:	f7fe fe03 	bl	80024ec <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d803      	bhi.n	80038fa <HAL_SPI_Receive+0x1cc>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d102      	bne.n	8003900 <HAL_SPI_Receive+0x1d2>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d102      	bne.n	8003906 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003904:	e017      	b.n	8003936 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1cd      	bne.n	80038ac <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fa45 	bl	8003da4 <SPI_EndRxTransaction>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	75fb      	strb	r3, [r7, #23]
 8003932:	e000      	b.n	8003936 <HAL_SPI_Receive+0x208>
  }

error :
 8003934:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003946:	7dfb      	ldrb	r3, [r7, #23]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08c      	sub	sp, #48	; 0x30
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800395e:	2301      	movs	r3, #1
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x26>
 8003972:	2302      	movs	r3, #2
 8003974:	e18a      	b.n	8003c8c <HAL_SPI_TransmitReceive+0x33c>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800397e:	f7fe fdb5 	bl	80024ec <HAL_GetTick>
 8003982:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003994:	887b      	ldrh	r3, [r7, #2]
 8003996:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003998:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800399c:	2b01      	cmp	r3, #1
 800399e:	d00f      	beq.n	80039c0 <HAL_SPI_TransmitReceive+0x70>
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039a6:	d107      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x68>
 80039b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d003      	beq.n	80039c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
 80039ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039be:	e15b      	b.n	8003c78 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d005      	beq.n	80039d2 <HAL_SPI_TransmitReceive+0x82>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_SPI_TransmitReceive+0x82>
 80039cc:	887b      	ldrh	r3, [r7, #2]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d103      	bne.n	80039da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039d8:	e14e      	b.n	8003c78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d003      	beq.n	80039ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2205      	movs	r2, #5
 80039ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	887a      	ldrh	r2, [r7, #2]
 80039fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	887a      	ldrh	r2, [r7, #2]
 8003a10:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	887a      	ldrh	r2, [r7, #2]
 8003a16:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d007      	beq.n	8003a42 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4a:	d178      	bne.n	8003b3e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_SPI_TransmitReceive+0x10a>
 8003a54:	8b7b      	ldrh	r3, [r7, #26]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d166      	bne.n	8003b28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	881a      	ldrh	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	1c9a      	adds	r2, r3, #2
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a7e:	e053      	b.n	8003b28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d11b      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x176>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d016      	beq.n	8003ac6 <HAL_SPI_TransmitReceive+0x176>
 8003a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d113      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	881a      	ldrh	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	1c9a      	adds	r2, r3, #2
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d119      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x1b8>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d014      	beq.n	8003b08 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	b292      	uxth	r2, r2
 8003aea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	1c9a      	adds	r2, r3, #2
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b04:	2301      	movs	r3, #1
 8003b06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b08:	f7fe fcf0 	bl	80024ec <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d807      	bhi.n	8003b28 <HAL_SPI_TransmitReceive+0x1d8>
 8003b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1e:	d003      	beq.n	8003b28 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b26:	e0a7      	b.n	8003c78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1a6      	bne.n	8003a80 <HAL_SPI_TransmitReceive+0x130>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1a1      	bne.n	8003a80 <HAL_SPI_TransmitReceive+0x130>
 8003b3c:	e07c      	b.n	8003c38 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_SPI_TransmitReceive+0x1fc>
 8003b46:	8b7b      	ldrh	r3, [r7, #26]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d16b      	bne.n	8003c24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	7812      	ldrb	r2, [r2, #0]
 8003b58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b72:	e057      	b.n	8003c24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d11c      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x26c>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d017      	beq.n	8003bbc <HAL_SPI_TransmitReceive+0x26c>
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d114      	bne.n	8003bbc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	7812      	ldrb	r2, [r2, #0]
 8003b9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d119      	bne.n	8003bfe <HAL_SPI_TransmitReceive+0x2ae>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d014      	beq.n	8003bfe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bfe:	f7fe fc75 	bl	80024ec <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d803      	bhi.n	8003c16 <HAL_SPI_TransmitReceive+0x2c6>
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d102      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x2cc>
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d103      	bne.n	8003c24 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c22:	e029      	b.n	8003c78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1a2      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x224>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d19d      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f917 	bl	8003e70 <SPI_EndRxTxTransaction>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d006      	beq.n	8003c56 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2220      	movs	r2, #32
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c54:	e010      	b.n	8003c78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10b      	bne.n	8003c76 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	e000      	b.n	8003c78 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3730      	adds	r7, #48	; 0x30
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ca4:	f7fe fc22 	bl	80024ec <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cb4:	f7fe fc1a 	bl	80024ec <HAL_GetTick>
 8003cb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cba:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	015b      	lsls	r3, r3, #5
 8003cc0:	0d1b      	lsrs	r3, r3, #20
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	fb02 f303 	mul.w	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cca:	e054      	b.n	8003d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd2:	d050      	beq.n	8003d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cd4:	f7fe fc0a 	bl	80024ec <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d902      	bls.n	8003cea <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d13d      	bne.n	8003d66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d02:	d111      	bne.n	8003d28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0c:	d004      	beq.n	8003d18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d16:	d107      	bne.n	8003d28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d30:	d10f      	bne.n	8003d52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e017      	b.n	8003d96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	bf0c      	ite	eq
 8003d86:	2301      	moveq	r3, #1
 8003d88:	2300      	movne	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d19b      	bne.n	8003ccc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20000028 	.word	0x20000028

08003da4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af02      	add	r7, sp, #8
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db8:	d111      	bne.n	8003dde <SPI_EndRxTransaction+0x3a>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc2:	d004      	beq.n	8003dce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dcc:	d107      	bne.n	8003dde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ddc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003de6:	d12a      	bne.n	8003e3e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df0:	d012      	beq.n	8003e18 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2180      	movs	r1, #128	; 0x80
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7ff ff49 	bl	8003c94 <SPI_WaitFlagStateUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d02d      	beq.n	8003e64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e026      	b.n	8003e66 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2101      	movs	r1, #1
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f7ff ff36 	bl	8003c94 <SPI_WaitFlagStateUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d01a      	beq.n	8003e64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	f043 0220 	orr.w	r2, r3, #32
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e013      	b.n	8003e66 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2200      	movs	r2, #0
 8003e46:	2101      	movs	r1, #1
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff ff23 	bl	8003c94 <SPI_WaitFlagStateUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d007      	beq.n	8003e64 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e58:	f043 0220 	orr.w	r2, r3, #32
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e000      	b.n	8003e66 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <SPI_EndRxTxTransaction+0x7c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1b      	ldr	r2, [pc, #108]	; (8003ef0 <SPI_EndRxTxTransaction+0x80>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	0d5b      	lsrs	r3, r3, #21
 8003e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e8c:	fb02 f303 	mul.w	r3, r2, r3
 8003e90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e9a:	d112      	bne.n	8003ec2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2180      	movs	r1, #128	; 0x80
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff fef4 	bl	8003c94 <SPI_WaitFlagStateUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb6:	f043 0220 	orr.w	r2, r3, #32
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e00f      	b.n	8003ee2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d0f2      	beq.n	8003ec2 <SPI_EndRxTxTransaction+0x52>
 8003edc:	e000      	b.n	8003ee0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ede:	bf00      	nop
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000028 	.word	0x20000028
 8003ef0:	165e9f81 	.word	0x165e9f81

08003ef4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e034      	b.n	8003f74 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7fd fabe 	bl	80014a0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f000 fca6 	bl	8004880 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	f000 fcf0 	bl	8004924 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6858      	ldr	r0, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	f000 fd25 	bl	80049a0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	6892      	ldr	r2, [r2, #8]
 8003f5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	6892      	ldr	r2, [r2, #8]
 8003f6a:	f041 0101 	orr.w	r1, r1, #1
 8003f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e041      	b.n	8004012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fe f9ec 	bl	8002380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f000 fa96 	bl	80044ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b01      	cmp	r3, #1
 800402e:	d001      	beq.n	8004034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e04e      	b.n	80040d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d022      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x80>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405e:	d01d      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x80>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1f      	ldr	r2, [pc, #124]	; (80040e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d018      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x80>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1e      	ldr	r2, [pc, #120]	; (80040e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d013      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x80>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1c      	ldr	r2, [pc, #112]	; (80040ec <HAL_TIM_Base_Start_IT+0xd0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00e      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x80>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1b      	ldr	r2, [pc, #108]	; (80040f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d009      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x80>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a19      	ldr	r2, [pc, #100]	; (80040f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d004      	beq.n	800409c <HAL_TIM_Base_Start_IT+0x80>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d111      	bne.n	80040c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b06      	cmp	r3, #6
 80040ac:	d010      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040be:	e007      	b.n	80040d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40000c00 	.word	0x40000c00
 80040f0:	40010400 	.word	0x40010400
 80040f4:	40014000 	.word	0x40014000
 80040f8:	40001800 	.word	0x40001800

080040fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d122      	bne.n	8004158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b02      	cmp	r3, #2
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0202 	mvn.w	r2, #2
 8004128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f9b5 	bl	80044ae <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f9a7 	bl	800449a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f9b8 	bl	80044c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b04      	cmp	r3, #4
 8004164:	d122      	bne.n	80041ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b04      	cmp	r3, #4
 8004172:	d11b      	bne.n	80041ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0204 	mvn.w	r2, #4
 800417c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2202      	movs	r2, #2
 8004182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f98b 	bl	80044ae <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f97d 	bl	800449a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f98e 	bl	80044c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d122      	bne.n	8004200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d11b      	bne.n	8004200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0208 	mvn.w	r2, #8
 80041d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2204      	movs	r2, #4
 80041d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f961 	bl	80044ae <HAL_TIM_IC_CaptureCallback>
 80041ec:	e005      	b.n	80041fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f953 	bl	800449a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f964 	bl	80044c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b10      	cmp	r3, #16
 800420c:	d122      	bne.n	8004254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b10      	cmp	r3, #16
 800421a:	d11b      	bne.n	8004254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0210 	mvn.w	r2, #16
 8004224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2208      	movs	r2, #8
 800422a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f937 	bl	80044ae <HAL_TIM_IC_CaptureCallback>
 8004240:	e005      	b.n	800424e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f929 	bl	800449a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f93a 	bl	80044c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d10e      	bne.n	8004280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d107      	bne.n	8004280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0201 	mvn.w	r2, #1
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd ff06 	bl	800208c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428a:	2b80      	cmp	r3, #128	; 0x80
 800428c:	d10e      	bne.n	80042ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004298:	2b80      	cmp	r3, #128	; 0x80
 800429a:	d107      	bne.n	80042ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fae0 	bl	800486c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b6:	2b40      	cmp	r3, #64	; 0x40
 80042b8:	d10e      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c4:	2b40      	cmp	r3, #64	; 0x40
 80042c6:	d107      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f8ff 	bl	80044d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d10e      	bne.n	8004304 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d107      	bne.n	8004304 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0220 	mvn.w	r2, #32
 80042fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 faaa 	bl	8004858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004316:	2300      	movs	r3, #0
 8004318:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_TIM_ConfigClockSource+0x1c>
 8004324:	2302      	movs	r3, #2
 8004326:	e0b4      	b.n	8004492 <HAL_TIM_ConfigClockSource+0x186>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800434e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004360:	d03e      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004366:	f200 8087 	bhi.w	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 800436a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436e:	f000 8086 	beq.w	800447e <HAL_TIM_ConfigClockSource+0x172>
 8004372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004376:	d87f      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 8004378:	2b70      	cmp	r3, #112	; 0x70
 800437a:	d01a      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0xa6>
 800437c:	2b70      	cmp	r3, #112	; 0x70
 800437e:	d87b      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 8004380:	2b60      	cmp	r3, #96	; 0x60
 8004382:	d050      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x11a>
 8004384:	2b60      	cmp	r3, #96	; 0x60
 8004386:	d877      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 8004388:	2b50      	cmp	r3, #80	; 0x50
 800438a:	d03c      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0xfa>
 800438c:	2b50      	cmp	r3, #80	; 0x50
 800438e:	d873      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d058      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0x13a>
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	d86f      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 8004398:	2b30      	cmp	r3, #48	; 0x30
 800439a:	d064      	beq.n	8004466 <HAL_TIM_ConfigClockSource+0x15a>
 800439c:	2b30      	cmp	r3, #48	; 0x30
 800439e:	d86b      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d060      	beq.n	8004466 <HAL_TIM_ConfigClockSource+0x15a>
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d867      	bhi.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d05c      	beq.n	8004466 <HAL_TIM_ConfigClockSource+0x15a>
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d05a      	beq.n	8004466 <HAL_TIM_ConfigClockSource+0x15a>
 80043b0:	e062      	b.n	8004478 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6899      	ldr	r1, [r3, #8]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f000 f9ad 	bl	8004720 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	609a      	str	r2, [r3, #8]
      break;
 80043de:	e04f      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	6899      	ldr	r1, [r3, #8]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f000 f996 	bl	8004720 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004402:	609a      	str	r2, [r3, #8]
      break;
 8004404:	e03c      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6859      	ldr	r1, [r3, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	461a      	mov	r2, r3
 8004414:	f000 f90a 	bl	800462c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2150      	movs	r1, #80	; 0x50
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f963 	bl	80046ea <TIM_ITRx_SetConfig>
      break;
 8004424:	e02c      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6859      	ldr	r1, [r3, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	461a      	mov	r2, r3
 8004434:	f000 f929 	bl	800468a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2160      	movs	r1, #96	; 0x60
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f953 	bl	80046ea <TIM_ITRx_SetConfig>
      break;
 8004444:	e01c      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6859      	ldr	r1, [r3, #4]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	461a      	mov	r2, r3
 8004454:	f000 f8ea 	bl	800462c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2140      	movs	r1, #64	; 0x40
 800445e:	4618      	mov	r0, r3
 8004460:	f000 f943 	bl	80046ea <TIM_ITRx_SetConfig>
      break;
 8004464:	e00c      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f000 f93a 	bl	80046ea <TIM_ITRx_SetConfig>
      break;
 8004476:	e003      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      break;
 800447c:	e000      	b.n	8004480 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800447e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a40      	ldr	r2, [pc, #256]	; (8004600 <TIM_Base_SetConfig+0x114>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d013      	beq.n	800452c <TIM_Base_SetConfig+0x40>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450a:	d00f      	beq.n	800452c <TIM_Base_SetConfig+0x40>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a3d      	ldr	r2, [pc, #244]	; (8004604 <TIM_Base_SetConfig+0x118>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d00b      	beq.n	800452c <TIM_Base_SetConfig+0x40>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a3c      	ldr	r2, [pc, #240]	; (8004608 <TIM_Base_SetConfig+0x11c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d007      	beq.n	800452c <TIM_Base_SetConfig+0x40>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a3b      	ldr	r2, [pc, #236]	; (800460c <TIM_Base_SetConfig+0x120>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <TIM_Base_SetConfig+0x40>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a3a      	ldr	r2, [pc, #232]	; (8004610 <TIM_Base_SetConfig+0x124>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d108      	bne.n	800453e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a2f      	ldr	r2, [pc, #188]	; (8004600 <TIM_Base_SetConfig+0x114>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d02b      	beq.n	800459e <TIM_Base_SetConfig+0xb2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454c:	d027      	beq.n	800459e <TIM_Base_SetConfig+0xb2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a2c      	ldr	r2, [pc, #176]	; (8004604 <TIM_Base_SetConfig+0x118>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d023      	beq.n	800459e <TIM_Base_SetConfig+0xb2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a2b      	ldr	r2, [pc, #172]	; (8004608 <TIM_Base_SetConfig+0x11c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d01f      	beq.n	800459e <TIM_Base_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a2a      	ldr	r2, [pc, #168]	; (800460c <TIM_Base_SetConfig+0x120>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d01b      	beq.n	800459e <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a29      	ldr	r2, [pc, #164]	; (8004610 <TIM_Base_SetConfig+0x124>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d017      	beq.n	800459e <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a28      	ldr	r2, [pc, #160]	; (8004614 <TIM_Base_SetConfig+0x128>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d013      	beq.n	800459e <TIM_Base_SetConfig+0xb2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a27      	ldr	r2, [pc, #156]	; (8004618 <TIM_Base_SetConfig+0x12c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00f      	beq.n	800459e <TIM_Base_SetConfig+0xb2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a26      	ldr	r2, [pc, #152]	; (800461c <TIM_Base_SetConfig+0x130>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00b      	beq.n	800459e <TIM_Base_SetConfig+0xb2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a25      	ldr	r2, [pc, #148]	; (8004620 <TIM_Base_SetConfig+0x134>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d007      	beq.n	800459e <TIM_Base_SetConfig+0xb2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a24      	ldr	r2, [pc, #144]	; (8004624 <TIM_Base_SetConfig+0x138>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d003      	beq.n	800459e <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a23      	ldr	r2, [pc, #140]	; (8004628 <TIM_Base_SetConfig+0x13c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d108      	bne.n	80045b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a0a      	ldr	r2, [pc, #40]	; (8004600 <TIM_Base_SetConfig+0x114>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d003      	beq.n	80045e4 <TIM_Base_SetConfig+0xf8>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a0c      	ldr	r2, [pc, #48]	; (8004610 <TIM_Base_SetConfig+0x124>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d103      	bne.n	80045ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	615a      	str	r2, [r3, #20]
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40010000 	.word	0x40010000
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800
 800460c:	40000c00 	.word	0x40000c00
 8004610:	40010400 	.word	0x40010400
 8004614:	40014000 	.word	0x40014000
 8004618:	40014400 	.word	0x40014400
 800461c:	40014800 	.word	0x40014800
 8004620:	40001800 	.word	0x40001800
 8004624:	40001c00 	.word	0x40001c00
 8004628:	40002000 	.word	0x40002000

0800462c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f023 0201 	bic.w	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f023 030a 	bic.w	r3, r3, #10
 8004668:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800468a:	b480      	push	{r7}
 800468c:	b087      	sub	sp, #28
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	f023 0210 	bic.w	r2, r3, #16
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	031b      	lsls	r3, r3, #12
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004700:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	f043 0307 	orr.w	r3, r3, #7
 800470c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	609a      	str	r2, [r3, #8]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800473a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	021a      	lsls	r2, r3, #8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	431a      	orrs	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4313      	orrs	r3, r2
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	609a      	str	r2, [r3, #8]
}
 8004754:	bf00      	nop
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004774:	2302      	movs	r3, #2
 8004776:	e05a      	b.n	800482e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a21      	ldr	r2, [pc, #132]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d022      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c4:	d01d      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d018      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1a      	ldr	r2, [pc, #104]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00e      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a18      	ldr	r2, [pc, #96]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a17      	ldr	r2, [pc, #92]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d004      	beq.n	8004802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a15      	ldr	r2, [pc, #84]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10c      	bne.n	800481c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	4313      	orrs	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40010000 	.word	0x40010000
 8004840:	40000400 	.word	0x40000400
 8004844:	40000800 	.word	0x40000800
 8004848:	40000c00 	.word	0x40000c00
 800484c:	40010400 	.word	0x40010400
 8004850:	40014000 	.word	0x40014000
 8004854:	40001800 	.word	0x40001800

08004858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004898:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4b20      	ldr	r3, [pc, #128]	; (8004920 <FSMC_NORSRAM_Init+0xa0>)
 800489e:	4013      	ands	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80048aa:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80048b0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80048b6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80048bc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80048c2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80048c8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80048ce:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80048d4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80048da:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80048e0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80048e6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80048ec:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d103      	bne.n	8004904 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004902:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	fff00080 	.word	0xfff00080

08004924 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004946:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004952:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800495a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004962:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	3b01      	subs	r3, #1
 800496a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800496c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	3b02      	subs	r3, #2
 8004974:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004976:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800497c:	4313      	orrs	r3, r2
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6979      	ldr	r1, [r7, #20]
 800498c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b8:	d122      	bne.n	8004a00 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80049d6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80049de:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80049e6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80049ec:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6979      	ldr	r1, [r7, #20]
 80049fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80049fe:	e005      	b.n	8004a0c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	cff00000 	.word	0xcff00000

08004a20 <memset>:
 8004a20:	4402      	add	r2, r0
 8004a22:	4603      	mov	r3, r0
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d100      	bne.n	8004a2a <memset+0xa>
 8004a28:	4770      	bx	lr
 8004a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a2e:	e7f9      	b.n	8004a24 <memset+0x4>

08004a30 <__libc_init_array>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	4d0d      	ldr	r5, [pc, #52]	; (8004a68 <__libc_init_array+0x38>)
 8004a34:	4c0d      	ldr	r4, [pc, #52]	; (8004a6c <__libc_init_array+0x3c>)
 8004a36:	1b64      	subs	r4, r4, r5
 8004a38:	10a4      	asrs	r4, r4, #2
 8004a3a:	2600      	movs	r6, #0
 8004a3c:	42a6      	cmp	r6, r4
 8004a3e:	d109      	bne.n	8004a54 <__libc_init_array+0x24>
 8004a40:	4d0b      	ldr	r5, [pc, #44]	; (8004a70 <__libc_init_array+0x40>)
 8004a42:	4c0c      	ldr	r4, [pc, #48]	; (8004a74 <__libc_init_array+0x44>)
 8004a44:	f000 f818 	bl	8004a78 <_init>
 8004a48:	1b64      	subs	r4, r4, r5
 8004a4a:	10a4      	asrs	r4, r4, #2
 8004a4c:	2600      	movs	r6, #0
 8004a4e:	42a6      	cmp	r6, r4
 8004a50:	d105      	bne.n	8004a5e <__libc_init_array+0x2e>
 8004a52:	bd70      	pop	{r4, r5, r6, pc}
 8004a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a58:	4798      	blx	r3
 8004a5a:	3601      	adds	r6, #1
 8004a5c:	e7ee      	b.n	8004a3c <__libc_init_array+0xc>
 8004a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a62:	4798      	blx	r3
 8004a64:	3601      	adds	r6, #1
 8004a66:	e7f2      	b.n	8004a4e <__libc_init_array+0x1e>
 8004a68:	08004aa8 	.word	0x08004aa8
 8004a6c:	08004aa8 	.word	0x08004aa8
 8004a70:	08004aa8 	.word	0x08004aa8
 8004a74:	08004aac 	.word	0x08004aac

08004a78 <_init>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	bf00      	nop
 8004a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7e:	bc08      	pop	{r3}
 8004a80:	469e      	mov	lr, r3
 8004a82:	4770      	bx	lr

08004a84 <_fini>:
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	bf00      	nop
 8004a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8a:	bc08      	pop	{r3}
 8004a8c:	469e      	mov	lr, r3
 8004a8e:	4770      	bx	lr
