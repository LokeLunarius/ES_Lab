
Bai6_ADC_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030f4  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca48  0800ca48  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca48  0800ca48  0001ca48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca50  0800ca50  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca50  0800ca50  0001ca50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca54  0800ca54  0001ca54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800ca58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000004e8  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000554  20000554  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a111  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004702  00000000  00000000  0003a1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001728  00000000  00000000  0003e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011f6  00000000  00000000  00040020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000269c9  00000000  00000000  00041216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021705  00000000  00000000  00067bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df79e  00000000  00000000  000892e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006454  00000000  00000000  00168a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0016eed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800993c 	.word	0x0800993c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800993c 	.word	0x0800993c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dba:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000dbc:	4a3d      	ldr	r2, [pc, #244]	; (8000eb4 <MX_ADC1_Init+0x10c>)
 8000dbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc0:	4b3b      	ldr	r3, [pc, #236]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc6:	4b3a      	ldr	r3, [pc, #232]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000dcc:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dd2:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de0:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de6:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000de8:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <MX_ADC1_Init+0x110>)
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dec:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000df2:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000df4:	2205      	movs	r2, #5
 8000df6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e00:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e06:	482a      	ldr	r0, [pc, #168]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000e08:	f002 fc0c 	bl	8003624 <HAL_ADC_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e12:	f001 faff 	bl	8002414 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e16:	2308      	movs	r3, #8
 8000e18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	4822      	ldr	r0, [pc, #136]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000e28:	f002 fd6e 	bl	8003908 <HAL_ADC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e32:	f001 faef 	bl	8002414 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e36:	2309      	movs	r3, #9
 8000e38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4619      	mov	r1, r3
 8000e42:	481b      	ldr	r0, [pc, #108]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000e44:	f002 fd60 	bl	8003908 <HAL_ADC_ConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e4e:	f001 fae1 	bl	8002414 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e52:	230a      	movs	r3, #10
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e56:	2303      	movs	r3, #3
 8000e58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4814      	ldr	r0, [pc, #80]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000e60:	f002 fd52 	bl	8003908 <HAL_ADC_ConfigChannel>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e6a:	f001 fad3 	bl	8002414 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e6e:	230b      	movs	r3, #11
 8000e70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e72:	2304      	movs	r3, #4
 8000e74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e76:	463b      	mov	r3, r7
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000e7c:	f002 fd44 	bl	8003908 <HAL_ADC_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e86:	f001 fac5 	bl	8002414 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000e8e:	2305      	movs	r3, #5
 8000e90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <MX_ADC1_Init+0x108>)
 8000e98:	f002 fd36 	bl	8003908 <HAL_ADC_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000ea2:	f001 fab7 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000088 	.word	0x20000088
 8000eb4:	40012000 	.word	0x40012000
 8000eb8:	0f000001 	.word	0x0f000001

08000ebc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a3c      	ldr	r2, [pc, #240]	; (8000fcc <HAL_ADC_MspInit+0x110>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d171      	bne.n	8000fc2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b3b      	ldr	r3, [pc, #236]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a3a      	ldr	r2, [pc, #232]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a33      	ldr	r2, [pc, #204]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a2c      	ldr	r2, [pc, #176]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_ADC_MspInit+0x114>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f32:	2307      	movs	r3, #7
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f36:	2303      	movs	r3, #3
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4823      	ldr	r0, [pc, #140]	; (8000fd4 <HAL_ADC_MspInit+0x118>)
 8000f46:	f003 fc93 	bl	8004870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <HAL_ADC_MspInit+0x11c>)
 8000f5e:	f003 fc87 	bl	8004870 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <HAL_ADC_MspInit+0x124>)
 8000f66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f98:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fa6:	480d      	ldr	r0, [pc, #52]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fa8:	f003 f860 	bl	800406c <HAL_DMA_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000fb2:	f001 fa2f 	bl	8002414 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fba:	639a      	str	r2, [r3, #56]	; 0x38
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_ADC_MspInit+0x120>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40012000 	.word	0x40012000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	200000d0 	.word	0x200000d0
 8000fe0:	40026410 	.word	0x40026410

08000fe4 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2108      	movs	r1, #8
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <button_init+0x14>)
 8000fee:	f003 fddb 	bl	8004ba8 <HAL_GPIO_WritePin>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40020c00 	.word	0x40020c00

08000ffc <button_Scan>:

void button_Scan(){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2108      	movs	r1, #8
 8001006:	482f      	ldr	r0, [pc, #188]	; (80010c4 <button_Scan+0xc8>)
 8001008:	f003 fdce 	bl	8004ba8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	2108      	movs	r1, #8
 8001010:	482c      	ldr	r0, [pc, #176]	; (80010c4 <button_Scan+0xc8>)
 8001012:	f003 fdc9 	bl	8004ba8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001016:	230a      	movs	r3, #10
 8001018:	2202      	movs	r2, #2
 800101a:	492b      	ldr	r1, [pc, #172]	; (80010c8 <button_Scan+0xcc>)
 800101c:	482b      	ldr	r0, [pc, #172]	; (80010cc <button_Scan+0xd0>)
 800101e:	f005 fa42 	bl	80064a6 <HAL_SPI_Receive>
	  int button_index = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800102a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	e03f      	b.n	80010b2 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db06      	blt.n	8001046 <button_Scan+0x4a>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b03      	cmp	r3, #3
 800103c:	dc03      	bgt.n	8001046 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3304      	adds	r3, #4
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e018      	b.n	8001078 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b03      	cmp	r3, #3
 800104a:	dd07      	ble.n	800105c <button_Scan+0x60>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b07      	cmp	r3, #7
 8001050:	dc04      	bgt.n	800105c <button_Scan+0x60>
			  button_index = 7 - i;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f1c3 0307 	rsb	r3, r3, #7
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e00d      	b.n	8001078 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b07      	cmp	r3, #7
 8001060:	dd06      	ble.n	8001070 <button_Scan+0x74>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0b      	cmp	r3, #11
 8001066:	dc03      	bgt.n	8001070 <button_Scan+0x74>
			  button_index = i + 4;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3304      	adds	r3, #4
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	e003      	b.n	8001078 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f1c3 0317 	rsb	r3, r3, #23
 8001076:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001078:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <button_Scan+0xcc>)
 800107a:	881a      	ldrh	r2, [r3, #0]
 800107c:	897b      	ldrh	r3, [r7, #10]
 800107e:	4013      	ands	r3, r2
 8001080:	b29b      	uxth	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d005      	beq.n	8001092 <button_Scan+0x96>
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <button_Scan+0xd4>)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2100      	movs	r1, #0
 800108c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001090:	e009      	b.n	80010a6 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8001092:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <button_Scan+0xd4>)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800109a:	3301      	adds	r3, #1
 800109c:	b299      	uxth	r1, r3
 800109e:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <button_Scan+0xd4>)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80010a6:	897b      	ldrh	r3, [r7, #10]
 80010a8:	085b      	lsrs	r3, r3, #1
 80010aa:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3301      	adds	r3, #1
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	ddbc      	ble.n	8001032 <button_Scan+0x36>
	  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020c00 	.word	0x40020c00
 80010c8:	20000150 	.word	0x20000150
 80010cc:	20000270 	.word	0x20000270
 80010d0:	20000130 	.word	0x20000130

080010d4 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80010d8:	2100      	movs	r1, #0
 80010da:	4802      	ldr	r0, [pc, #8]	; (80010e4 <buzzer_init+0x10>)
 80010dc:	f005 ff24 	bl	8006f28 <HAL_TIM_PWM_Start>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000314 	.word	0x20000314

080010e8 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <buzzer_SetVolume+0x28>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <buzzer_SetVolume+0x28>)
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <buzzer_SetVolume+0x2c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000152 	.word	0x20000152
 8001114:	20000314 	.word	0x20000314

08001118 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_DMA_Init+0x3c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <MX_DMA_Init+0x3c>)
 8001128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_DMA_Init+0x3c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2038      	movs	r0, #56	; 0x38
 8001140:	f002 ff5d 	bl	8003ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001144:	2038      	movs	r0, #56	; 0x38
 8001146:	f002 ff76 	bl	8004036 <HAL_NVIC_EnableIRQ>

}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800

08001158 <ds3231_ReadTime>:
void ds3231_Write(uint8_t address, uint8_t value){
	uint8_t temp = DEC2BCD(value);
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
}

void ds3231_ReadTime(){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800115e:	230a      	movs	r3, #10
 8001160:	9302      	str	r3, [sp, #8]
 8001162:	2307      	movs	r3, #7
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <ds3231_ReadTime+0xa4>)
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	2200      	movs	r2, #0
 800116e:	21d0      	movs	r1, #208	; 0xd0
 8001170:	4823      	ldr	r0, [pc, #140]	; (8001200 <ds3231_ReadTime+0xa8>)
 8001172:	f003 fe91 	bl	8004e98 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <ds3231_ReadTime+0xa4>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f002 f978 	bl	8003470 <BCD2DEC>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <ds3231_ReadTime+0xac>)
 8001186:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <ds3231_ReadTime+0xa4>)
 800118a:	785b      	ldrb	r3, [r3, #1]
 800118c:	4618      	mov	r0, r3
 800118e:	f002 f96f 	bl	8003470 <BCD2DEC>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <ds3231_ReadTime+0xb0>)
 8001198:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <ds3231_ReadTime+0xa4>)
 800119c:	789b      	ldrb	r3, [r3, #2]
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 f966 	bl	8003470 <BCD2DEC>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <ds3231_ReadTime+0xb4>)
 80011aa:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <ds3231_ReadTime+0xa4>)
 80011ae:	78db      	ldrb	r3, [r3, #3]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 f95d 	bl	8003470 <BCD2DEC>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <ds3231_ReadTime+0xb8>)
 80011bc:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <ds3231_ReadTime+0xa4>)
 80011c0:	791b      	ldrb	r3, [r3, #4]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 f954 	bl	8003470 <BCD2DEC>
 80011c8:	4603      	mov	r3, r0
 80011ca:	461a      	mov	r2, r3
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <ds3231_ReadTime+0xbc>)
 80011ce:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <ds3231_ReadTime+0xa4>)
 80011d2:	795b      	ldrb	r3, [r3, #5]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 f94b 	bl	8003470 <BCD2DEC>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <ds3231_ReadTime+0xc0>)
 80011e0:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <ds3231_ReadTime+0xa4>)
 80011e4:	799b      	ldrb	r3, [r3, #6]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 f942 	bl	8003470 <BCD2DEC>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <ds3231_ReadTime+0xc4>)
 80011f2:	701a      	strb	r2, [r3, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000154 	.word	0x20000154
 8001200:	200001b8 	.word	0x200001b8
 8001204:	2000015d 	.word	0x2000015d
 8001208:	2000015c 	.word	0x2000015c
 800120c:	2000015b 	.word	0x2000015b
 8001210:	2000015f 	.word	0x2000015f
 8001214:	2000015e 	.word	0x2000015e
 8001218:	20000160 	.word	0x20000160
 800121c:	20000161 	.word	0x20000161

08001220 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08e      	sub	sp, #56	; 0x38
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
 8001236:	615a      	str	r2, [r3, #20]
 8001238:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800123a:	463b      	mov	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	615a      	str	r2, [r3, #20]
 800124a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800124c:	4b2f      	ldr	r3, [pc, #188]	; (800130c <MX_FSMC_Init+0xec>)
 800124e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001252:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001254:	4b2d      	ldr	r3, [pc, #180]	; (800130c <MX_FSMC_Init+0xec>)
 8001256:	4a2e      	ldr	r2, [pc, #184]	; (8001310 <MX_FSMC_Init+0xf0>)
 8001258:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <MX_FSMC_Init+0xec>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <MX_FSMC_Init+0xec>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <MX_FSMC_Init+0xec>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <MX_FSMC_Init+0xec>)
 800126e:	2210      	movs	r2, #16
 8001270:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <MX_FSMC_Init+0xec>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <MX_FSMC_Init+0xec>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800127e:	4b23      	ldr	r3, [pc, #140]	; (800130c <MX_FSMC_Init+0xec>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001284:	4b21      	ldr	r3, [pc, #132]	; (800130c <MX_FSMC_Init+0xec>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <MX_FSMC_Init+0xec>)
 800128c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <MX_FSMC_Init+0xec>)
 8001294:	2200      	movs	r2, #0
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_FSMC_Init+0xec>)
 800129a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_FSMC_Init+0xec>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_FSMC_Init+0xec>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_FSMC_Init+0xec>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80012b2:	230f      	movs	r3, #15
 80012b4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012b6:	230f      	movs	r3, #15
 80012b8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80012ba:	233c      	movs	r3, #60	; 0x3c
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80012c2:	2310      	movs	r3, #16
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80012c6:	2311      	movs	r3, #17
 80012c8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012ca:	2300      	movs	r3, #0
 80012cc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80012ce:	2308      	movs	r3, #8
 80012d0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80012d2:	230f      	movs	r3, #15
 80012d4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80012d6:	2309      	movs	r3, #9
 80012d8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80012de:	2310      	movs	r3, #16
 80012e0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80012e2:	2311      	movs	r3, #17
 80012e4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80012ea:	463a      	mov	r2, r7
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <MX_FSMC_Init+0xec>)
 80012f4:	f005 fcba 	bl	8006c6c <HAL_SRAM_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80012fe:	f001 f889 	bl	8002414 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001302:	bf00      	nop
 8001304:	3738      	adds	r7, #56	; 0x38
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000164 	.word	0x20000164
 8001310:	a0000104 	.word	0xa0000104

08001314 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <HAL_FSMC_MspInit+0x88>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d131      	bne.n	8001394 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_FSMC_MspInit+0x88>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_FSMC_MspInit+0x8c>)
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133e:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <HAL_FSMC_MspInit+0x8c>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6393      	str	r3, [r2, #56]	; 0x38
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_FSMC_MspInit+0x8c>)
 8001348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001352:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001356:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001364:	230c      	movs	r3, #12
 8001366:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4619      	mov	r1, r3
 800136c:	480d      	ldr	r0, [pc, #52]	; (80013a4 <HAL_FSMC_MspInit+0x90>)
 800136e:	f003 fa7f 	bl	8004870 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001372:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001376:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001384:	230c      	movs	r3, #12
 8001386:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4619      	mov	r1, r3
 800138c:	4806      	ldr	r0, [pc, #24]	; (80013a8 <HAL_FSMC_MspInit+0x94>)
 800138e:	f003 fa6f 	bl	8004870 <HAL_GPIO_Init>
 8001392:	e000      	b.n	8001396 <HAL_FSMC_MspInit+0x82>
    return;
 8001394:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200001b4 	.word	0x200001b4
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40020c00 	.word	0x40020c00

080013ac <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013b4:	f7ff ffae 	bl	8001314 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08e      	sub	sp, #56	; 0x38
 80013c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
 80013da:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a75      	ldr	r2, [pc, #468]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	623b      	str	r3, [r7, #32]
 80013f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	4b6f      	ldr	r3, [pc, #444]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a6e      	ldr	r2, [pc, #440]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b6c      	ldr	r3, [pc, #432]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a67      	ldr	r2, [pc, #412]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 8001418:	f043 0320 	orr.w	r3, r3, #32
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b65      	ldr	r3, [pc, #404]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0320 	and.w	r3, r3, #32
 8001426:	61bb      	str	r3, [r7, #24]
 8001428:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	4b61      	ldr	r3, [pc, #388]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a60      	ldr	r2, [pc, #384]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 8001434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b5e      	ldr	r3, [pc, #376]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b5a      	ldr	r3, [pc, #360]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a59      	ldr	r2, [pc, #356]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b57      	ldr	r3, [pc, #348]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a52      	ldr	r2, [pc, #328]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b4c      	ldr	r3, [pc, #304]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a4b      	ldr	r2, [pc, #300]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b49      	ldr	r3, [pc, #292]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b45      	ldr	r3, [pc, #276]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a44      	ldr	r2, [pc, #272]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 80014a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b42      	ldr	r3, [pc, #264]	; (80015b4 <MX_GPIO_Init+0x1f4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2170      	movs	r1, #112	; 0x70
 80014ba:	483f      	ldr	r0, [pc, #252]	; (80015b8 <MX_GPIO_Init+0x1f8>)
 80014bc:	f003 fb74 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c6:	483d      	ldr	r0, [pc, #244]	; (80015bc <MX_GPIO_Init+0x1fc>)
 80014c8:	f003 fb6e 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2140      	movs	r1, #64	; 0x40
 80014d0:	483b      	ldr	r0, [pc, #236]	; (80015c0 <MX_GPIO_Init+0x200>)
 80014d2:	f003 fb69 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014dc:	4839      	ldr	r0, [pc, #228]	; (80015c4 <MX_GPIO_Init+0x204>)
 80014de:	f003 fb63 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2108      	movs	r1, #8
 80014e6:	4838      	ldr	r0, [pc, #224]	; (80015c8 <MX_GPIO_Init+0x208>)
 80014e8:	f003 fb5e 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80014ec:	2370      	movs	r3, #112	; 0x70
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	4619      	mov	r1, r3
 8001502:	482d      	ldr	r0, [pc, #180]	; (80015b8 <MX_GPIO_Init+0x1f8>)
 8001504:	f003 f9b4 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	4826      	ldr	r0, [pc, #152]	; (80015bc <MX_GPIO_Init+0x1fc>)
 8001522:	f003 f9a5 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001526:	23c0      	movs	r3, #192	; 0xc0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	4822      	ldr	r0, [pc, #136]	; (80015c4 <MX_GPIO_Init+0x204>)
 800153a:	f003 f999 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800153e:	2330      	movs	r3, #48	; 0x30
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	481a      	ldr	r0, [pc, #104]	; (80015bc <MX_GPIO_Init+0x1fc>)
 8001552:	f003 f98d 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001556:	2340      	movs	r3, #64	; 0x40
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	4814      	ldr	r0, [pc, #80]	; (80015c0 <MX_GPIO_Init+0x200>)
 800156e:	f003 f97f 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	4619      	mov	r1, r3
 800158a:	480e      	ldr	r0, [pc, #56]	; (80015c4 <MX_GPIO_Init+0x204>)
 800158c:	f003 f970 	bl	8004870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001590:	2308      	movs	r3, #8
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4808      	ldr	r0, [pc, #32]	; (80015c8 <MX_GPIO_Init+0x208>)
 80015a8:	f003 f962 	bl	8004870 <HAL_GPIO_Init>

}
 80015ac:	bf00      	nop
 80015ae:	3738      	adds	r7, #56	; 0x38
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40021800 	.word	0x40021800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020c00 	.word	0x40020c00

080015cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_I2C1_Init+0x50>)
 80015d2:	4a13      	ldr	r2, [pc, #76]	; (8001620 <MX_I2C1_Init+0x54>)
 80015d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_I2C1_Init+0x50>)
 80015d8:	4a12      	ldr	r2, [pc, #72]	; (8001624 <MX_I2C1_Init+0x58>)
 80015da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_I2C1_Init+0x50>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_I2C1_Init+0x50>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_I2C1_Init+0x50>)
 80015ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <MX_I2C1_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_I2C1_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_I2C1_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_I2C1_Init+0x50>)
 800160a:	f003 fb01 	bl	8004c10 <HAL_I2C_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001614:	f000 fefe 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200001b8 	.word	0x200001b8
 8001620:	40005400 	.word	0x40005400
 8001624:	000186a0 	.word	0x000186a0

08001628 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a19      	ldr	r2, [pc, #100]	; (80016ac <HAL_I2C_MspInit+0x84>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d12b      	bne.n	80016a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001666:	23c0      	movs	r3, #192	; 0xc0
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166a:	2312      	movs	r3, #18
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001676:	2304      	movs	r3, #4
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <HAL_I2C_MspInit+0x8c>)
 8001682:	f003 f8f5 	bl	8004870 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_I2C_MspInit+0x88>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	; 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40005400 	.word	0x40005400
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020400 	.word	0x40020400

080016b8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80016c2:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <LCD_WR_REG+0x1c>)
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	8013      	strh	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	600ffffe 	.word	0x600ffffe

080016d8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <LCD_WR_DATA+0x1c>)
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	8053      	strh	r3, [r2, #2]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	600ffffe 	.word	0x600ffffe

080016f8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <LCD_RD_DATA+0x20>)
 8001700:	885b      	ldrh	r3, [r3, #2]
 8001702:	b29b      	uxth	r3, r3
 8001704:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	b29b      	uxth	r3, r3
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	600ffffe 	.word	0x600ffffe

0800171c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4604      	mov	r4, r0
 8001724:	4608      	mov	r0, r1
 8001726:	4611      	mov	r1, r2
 8001728:	461a      	mov	r2, r3
 800172a:	4623      	mov	r3, r4
 800172c:	80fb      	strh	r3, [r7, #6]
 800172e:	4603      	mov	r3, r0
 8001730:	80bb      	strh	r3, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	807b      	strh	r3, [r7, #2]
 8001736:	4613      	mov	r3, r2
 8001738:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800173a:	202a      	movs	r0, #42	; 0x2a
 800173c:	f7ff ffbc 	bl	80016b8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	0a1b      	lsrs	r3, r3, #8
 8001744:	b29b      	uxth	r3, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ffc6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	b29b      	uxth	r3, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff ffc0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	b29b      	uxth	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ffba 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001764:	887b      	ldrh	r3, [r7, #2]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	b29b      	uxth	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ffb4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001770:	202b      	movs	r0, #43	; 0x2b
 8001772:	f7ff ffa1 	bl	80016b8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001776:	88bb      	ldrh	r3, [r7, #4]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ffab 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001782:	88bb      	ldrh	r3, [r7, #4]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	b29b      	uxth	r3, r3
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ffa5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800178e:	883b      	ldrh	r3, [r7, #0]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	b29b      	uxth	r3, r3
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff9f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800179a:	883b      	ldrh	r3, [r7, #0]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff99 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80017a6:	202c      	movs	r0, #44	; 0x2c
 80017a8:	f7ff ff86 	bl	80016b8 <LCD_WR_REG>
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}

080017b4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <lcd_Clear+0x60>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <lcd_Clear+0x60>)
 80017c8:	885b      	ldrh	r3, [r3, #2]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2100      	movs	r1, #0
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff ffa3 	bl	800171c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	81fb      	strh	r3, [r7, #14]
 80017da:	e011      	b.n	8001800 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80017dc:	2300      	movs	r3, #0
 80017de:	81bb      	strh	r3, [r7, #12]
 80017e0:	e006      	b.n	80017f0 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff77 	bl	80016d8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80017ea:	89bb      	ldrh	r3, [r7, #12]
 80017ec:	3301      	adds	r3, #1
 80017ee:	81bb      	strh	r3, [r7, #12]
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <lcd_Clear+0x60>)
 80017f2:	885b      	ldrh	r3, [r3, #2]
 80017f4:	89ba      	ldrh	r2, [r7, #12]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3f3      	bcc.n	80017e2 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80017fa:	89fb      	ldrh	r3, [r7, #14]
 80017fc:	3301      	adds	r3, #1
 80017fe:	81fb      	strh	r3, [r7, #14]
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <lcd_Clear+0x60>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	89fa      	ldrh	r2, [r7, #14]
 8001806:	429a      	cmp	r2, r3
 8001808:	d3e8      	bcc.n	80017dc <lcd_Clear+0x28>
		}
	}
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2000020c 	.word	0x2000020c

08001818 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	80fb      	strh	r3, [r7, #6]
 8001822:	460b      	mov	r3, r1
 8001824:	80bb      	strh	r3, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800182a:	88bb      	ldrh	r3, [r7, #4]
 800182c:	88fa      	ldrh	r2, [r7, #6]
 800182e:	88b9      	ldrh	r1, [r7, #4]
 8001830:	88f8      	ldrh	r0, [r7, #6]
 8001832:	f7ff ff73 	bl	800171c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff4d 	bl	80016d8 <LCD_WR_DATA>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	4604      	mov	r4, r0
 8001850:	4608      	mov	r0, r1
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	4623      	mov	r3, r4
 8001858:	80fb      	strh	r3, [r7, #6]
 800185a:	4603      	mov	r3, r0
 800185c:	80bb      	strh	r3, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	70fb      	strb	r3, [r7, #3]
 8001862:	4613      	mov	r3, r2
 8001864:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001866:	2300      	movs	r3, #0
 8001868:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800186e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001872:	085b      	lsrs	r3, r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	461a      	mov	r2, r3
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	bf14      	ite	ne
 800188a:	2301      	movne	r3, #1
 800188c:	2300      	moveq	r3, #0
 800188e:	b2db      	uxtb	r3, r3
 8001890:	4413      	add	r3, r2
 8001892:	b29a      	uxth	r2, r3
 8001894:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001898:	b29b      	uxth	r3, r3
 800189a:	fb12 f303 	smulbb	r3, r2, r3
 800189e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	3b20      	subs	r3, #32
 80018a4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	4413      	add	r3, r2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29c      	uxth	r4, r3
 80018b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	88b9      	ldrh	r1, [r7, #4]
 80018c6:	88f8      	ldrh	r0, [r7, #6]
 80018c8:	4622      	mov	r2, r4
 80018ca:	f7ff ff27 	bl	800171c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	827b      	strh	r3, [r7, #18]
 80018d2:	e07a      	b.n	80019ca <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80018d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018d8:	2b0c      	cmp	r3, #12
 80018da:	d028      	beq.n	800192e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80018dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018e0:	2b10      	cmp	r3, #16
 80018e2:	d108      	bne.n	80018f6 <lcd_ShowChar+0xae>
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	8a7b      	ldrh	r3, [r7, #18]
 80018e8:	493c      	ldr	r1, [pc, #240]	; (80019dc <lcd_ShowChar+0x194>)
 80018ea:	0112      	lsls	r2, r2, #4
 80018ec:	440a      	add	r2, r1
 80018ee:	4413      	add	r3, r2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	75fb      	strb	r3, [r7, #23]
 80018f4:	e01b      	b.n	800192e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 80018f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018fa:	2b18      	cmp	r3, #24
 80018fc:	d10b      	bne.n	8001916 <lcd_ShowChar+0xce>
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	8a79      	ldrh	r1, [r7, #18]
 8001902:	4837      	ldr	r0, [pc, #220]	; (80019e0 <lcd_ShowChar+0x198>)
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	4403      	add	r3, r0
 800190e:	440b      	add	r3, r1
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	75fb      	strb	r3, [r7, #23]
 8001914:	e00b      	b.n	800192e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001916:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800191a:	2b20      	cmp	r3, #32
 800191c:	d15a      	bne.n	80019d4 <lcd_ShowChar+0x18c>
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	8a7b      	ldrh	r3, [r7, #18]
 8001922:	4930      	ldr	r1, [pc, #192]	; (80019e4 <lcd_ShowChar+0x19c>)
 8001924:	0192      	lsls	r2, r2, #6
 8001926:	440a      	add	r2, r1
 8001928:	4413      	add	r3, r2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800192e:	2300      	movs	r3, #0
 8001930:	75bb      	strb	r3, [r7, #22]
 8001932:	e044      	b.n	80019be <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001934:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001938:	2b00      	cmp	r3, #0
 800193a:	d120      	bne.n	800197e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 800193c:	7dfa      	ldrb	r2, [r7, #23]
 800193e:	7dbb      	ldrb	r3, [r7, #22]
 8001940:	fa42 f303 	asr.w	r3, r2, r3
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <lcd_ShowChar+0x10e>
 800194c:	883b      	ldrh	r3, [r7, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fec2 	bl	80016d8 <LCD_WR_DATA>
 8001954:	e003      	b.n	800195e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001956:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff febd 	bl	80016d8 <LCD_WR_DATA>
				m++;
 800195e:	7d7b      	ldrb	r3, [r7, #21]
 8001960:	3301      	adds	r3, #1
 8001962:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001964:	7d7b      	ldrb	r3, [r7, #21]
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	fbb3 f1f2 	udiv	r1, r3, r2
 800196c:	fb01 f202 	mul.w	r2, r1, r2
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d11f      	bne.n	80019b8 <lcd_ShowChar+0x170>
				{
					m=0;
 8001978:	2300      	movs	r3, #0
 800197a:	757b      	strb	r3, [r7, #21]
					break;
 800197c:	e022      	b.n	80019c4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800197e:	7dfa      	ldrb	r2, [r7, #23]
 8001980:	7dbb      	ldrb	r3, [r7, #22]
 8001982:	fa42 f303 	asr.w	r3, r2, r3
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <lcd_ShowChar+0x152>
 800198e:	883a      	ldrh	r2, [r7, #0]
 8001990:	88b9      	ldrh	r1, [r7, #4]
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff3f 	bl	8001818 <lcd_DrawPoint>
				x++;
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3301      	adds	r3, #1
 800199e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80019a0:	88fa      	ldrh	r2, [r7, #6]
 80019a2:	8a3b      	ldrh	r3, [r7, #16]
 80019a4:	1ad2      	subs	r2, r2, r3
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d105      	bne.n	80019b8 <lcd_ShowChar+0x170>
				{
					x=x0;
 80019ac:	8a3b      	ldrh	r3, [r7, #16]
 80019ae:	80fb      	strh	r3, [r7, #6]
					y++;
 80019b0:	88bb      	ldrh	r3, [r7, #4]
 80019b2:	3301      	adds	r3, #1
 80019b4:	80bb      	strh	r3, [r7, #4]
					break;
 80019b6:	e005      	b.n	80019c4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80019b8:	7dbb      	ldrb	r3, [r7, #22]
 80019ba:	3301      	adds	r3, #1
 80019bc:	75bb      	strb	r3, [r7, #22]
 80019be:	7dbb      	ldrb	r3, [r7, #22]
 80019c0:	2b07      	cmp	r3, #7
 80019c2:	d9b7      	bls.n	8001934 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80019c4:	8a7b      	ldrh	r3, [r7, #18]
 80019c6:	3301      	adds	r3, #1
 80019c8:	827b      	strh	r3, [r7, #18]
 80019ca:	8a7a      	ldrh	r2, [r7, #18]
 80019cc:	89bb      	ldrh	r3, [r7, #12]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d380      	bcc.n	80018d4 <lcd_ShowChar+0x8c>
 80019d2:	e000      	b.n	80019d6 <lcd_ShowChar+0x18e>
		else return;
 80019d4:	bf00      	nop
				}
			}
		}
	}
}
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}
 80019dc:	08009a74 	.word	0x08009a74
 80019e0:	0800a064 	.word	0x0800a064
 80019e4:	0800b234 	.word	0x0800b234

080019e8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	460a      	mov	r2, r1
 80019f2:	71fb      	strb	r3, [r7, #7]
 80019f4:	4613      	mov	r3, r2
 80019f6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80019fc:	e004      	b.n	8001a08 <mypow+0x20>
 80019fe:	79fa      	ldrb	r2, [r7, #7]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	1e5a      	subs	r2, r3, #1
 8001a0c:	71ba      	strb	r2, [r7, #6]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f5      	bne.n	80019fe <mypow+0x16>
	return result;
 8001a12:	68fb      	ldr	r3, [r7, #12]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af04      	add	r7, sp, #16
 8001a26:	4604      	mov	r4, r0
 8001a28:	4608      	mov	r0, r1
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4623      	mov	r3, r4
 8001a30:	80fb      	strh	r3, [r7, #6]
 8001a32:	4603      	mov	r3, r0
 8001a34:	80bb      	strh	r3, [r7, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	807b      	strh	r3, [r7, #2]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001a42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
 8001a4e:	e059      	b.n	8001b04 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001a50:	887c      	ldrh	r4, [r7, #2]
 8001a52:	787a      	ldrb	r2, [r7, #1]
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	200a      	movs	r0, #10
 8001a62:	f7ff ffc1 	bl	80019e8 <mypow>
 8001a66:	4603      	mov	r3, r0
 8001a68:	fbb4 f1f3 	udiv	r1, r4, r3
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <lcd_ShowIntNum+0xf8>)
 8001a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8001a72:	08da      	lsrs	r2, r3, #3
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	1aca      	subs	r2, r1, r3
 8001a7e:	4613      	mov	r3, r2
 8001a80:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001a82:	7bbb      	ldrb	r3, [r7, #14]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d121      	bne.n	8001acc <lcd_ShowIntNum+0xac>
 8001a88:	7bfa      	ldrb	r2, [r7, #15]
 8001a8a:	787b      	ldrb	r3, [r7, #1]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	da1c      	bge.n	8001acc <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001a92:	7b3b      	ldrb	r3, [r7, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d117      	bne.n	8001ac8 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	7b7b      	ldrb	r3, [r7, #13]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	fb12 f303 	smulbb	r3, r2, r3
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b298      	uxth	r0, r3
 8001aac:	8c3a      	ldrh	r2, [r7, #32]
 8001aae:	88b9      	ldrh	r1, [r7, #4]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f7ff fec1 	bl	8001848 <lcd_ShowChar>
				continue;
 8001ac6:	e01a      	b.n	8001afe <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	7b7b      	ldrb	r3, [r7, #13]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	fb12 f303 	smulbb	r3, r2, r3
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	4413      	add	r3, r2
 8001ade:	b298      	uxth	r0, r3
 8001ae0:	7b3b      	ldrb	r3, [r7, #12]
 8001ae2:	3330      	adds	r3, #48	; 0x30
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	8c3c      	ldrh	r4, [r7, #32]
 8001ae8:	88b9      	ldrh	r1, [r7, #4]
 8001aea:	2300      	movs	r3, #0
 8001aec:	9302      	str	r3, [sp, #8]
 8001aee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	4623      	mov	r3, r4
 8001afa:	f7ff fea5 	bl	8001848 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	3301      	adds	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	787b      	ldrb	r3, [r7, #1]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d3a1      	bcc.n	8001a50 <lcd_ShowIntNum+0x30>
	}
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd90      	pop	{r4, r7, pc}
 8001b16:	bf00      	nop
 8001b18:	cccccccd 	.word	0xcccccccd

08001b1c <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b08b      	sub	sp, #44	; 0x2c
 8001b20:	af04      	add	r7, sp, #16
 8001b22:	4604      	mov	r4, r0
 8001b24:	4608      	mov	r0, r1
 8001b26:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4623      	mov	r3, r4
 8001b30:	81fb      	strh	r3, [r7, #14]
 8001b32:	4603      	mov	r3, r0
 8001b34:	81bb      	strh	r3, [r7, #12]
 8001b36:	460b      	mov	r3, r1
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8001b3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8001b46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b4a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001c24 <lcd_ShowFloatNum+0x108>
 8001b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b56:	ee17 3a90 	vmov	r3, s15
 8001b5a:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	75fb      	strb	r3, [r7, #23]
 8001b60:	e057      	b.n	8001c12 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8001b62:	8abc      	ldrh	r4, [r7, #20]
 8001b64:	79fa      	ldrb	r2, [r7, #7]
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	4619      	mov	r1, r3
 8001b72:	200a      	movs	r0, #10
 8001b74:	f7ff ff38 	bl	80019e8 <mypow>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	fbb4 f1f3 	udiv	r1, r4, r3
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <lcd_ShowFloatNum+0x10c>)
 8001b80:	fba3 2301 	umull	r2, r3, r3, r1
 8001b84:	08da      	lsrs	r2, r3, #3
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	1aca      	subs	r2, r1, r3
 8001b90:	4613      	mov	r3, r2
 8001b92:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8001b94:	7dfa      	ldrb	r2, [r7, #23]
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	3b02      	subs	r3, #2
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d11d      	bne.n	8001bda <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	3b02      	subs	r3, #2
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	7dbb      	ldrb	r3, [r7, #22]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	fb12 f303 	smulbb	r3, r2, r3
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	89fb      	ldrh	r3, [r7, #14]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b298      	uxth	r0, r3
 8001bb4:	88ba      	ldrh	r2, [r7, #4]
 8001bb6:	89b9      	ldrh	r1, [r7, #12]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	222e      	movs	r2, #46	; 0x2e
 8001bca:	f7ff fe3d 	bl	8001848 <lcd_ShowChar>
			t++;
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	7dbb      	ldrb	r3, [r7, #22]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	fb12 f303 	smulbb	r3, r2, r3
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	89fb      	ldrh	r3, [r7, #14]
 8001bea:	4413      	add	r3, r2
 8001bec:	b298      	uxth	r0, r3
 8001bee:	7cfb      	ldrb	r3, [r7, #19]
 8001bf0:	3330      	adds	r3, #48	; 0x30
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	88bc      	ldrh	r4, [r7, #4]
 8001bf6:	89b9      	ldrh	r1, [r7, #12]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	4623      	mov	r3, r4
 8001c08:	f7ff fe1e 	bl	8001848 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	75fb      	strb	r3, [r7, #23]
 8001c12:	7dfa      	ldrb	r2, [r7, #23]
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d3a3      	bcc.n	8001b62 <lcd_ShowFloatNum+0x46>
	}
}
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd90      	pop	{r4, r7, pc}
 8001c24:	42c80000 	.word	0x42c80000
 8001c28:	cccccccd 	.word	0xcccccccd

08001c2c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d007      	beq.n	8001c56 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c46:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <lcd_SetDir+0x44>)
 8001c48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c4c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <lcd_SetDir+0x44>)
 8001c50:	22f0      	movs	r2, #240	; 0xf0
 8001c52:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c54:	e006      	b.n	8001c64 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <lcd_SetDir+0x44>)
 8001c58:	22f0      	movs	r2, #240	; 0xf0
 8001c5a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <lcd_SetDir+0x44>)
 8001c5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c62:	805a      	strh	r2, [r3, #2]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	2000020c 	.word	0x2000020c

08001c74 <lcd_init>:


void lcd_init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c7e:	48aa      	ldr	r0, [pc, #680]	; (8001f28 <lcd_init+0x2b4>)
 8001c80:	f002 ff92 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c88:	f001 fca8 	bl	80035dc <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c92:	48a5      	ldr	r0, [pc, #660]	; (8001f28 <lcd_init+0x2b4>)
 8001c94:	f002 ff88 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c9c:	f001 fc9e 	bl	80035dc <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff ffc3 	bl	8001c2c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001ca6:	20d3      	movs	r0, #211	; 0xd3
 8001ca8:	f7ff fd06 	bl	80016b8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001cac:	f7ff fd24 	bl	80016f8 <LCD_RD_DATA>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b9d      	ldr	r3, [pc, #628]	; (8001f2c <lcd_init+0x2b8>)
 8001cb6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001cb8:	f7ff fd1e 	bl	80016f8 <LCD_RD_DATA>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b9a      	ldr	r3, [pc, #616]	; (8001f2c <lcd_init+0x2b8>)
 8001cc2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001cc4:	f7ff fd18 	bl	80016f8 <LCD_RD_DATA>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b97      	ldr	r3, [pc, #604]	; (8001f2c <lcd_init+0x2b8>)
 8001cce:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001cd0:	4b96      	ldr	r3, [pc, #600]	; (8001f2c <lcd_init+0x2b8>)
 8001cd2:	889b      	ldrh	r3, [r3, #4]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b94      	ldr	r3, [pc, #592]	; (8001f2c <lcd_init+0x2b8>)
 8001cda:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001cdc:	f7ff fd0c 	bl	80016f8 <LCD_RD_DATA>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b91      	ldr	r3, [pc, #580]	; (8001f2c <lcd_init+0x2b8>)
 8001ce6:	889b      	ldrh	r3, [r3, #4]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b8f      	ldr	r3, [pc, #572]	; (8001f2c <lcd_init+0x2b8>)
 8001cee:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001cf0:	20cf      	movs	r0, #207	; 0xcf
 8001cf2:	f7ff fce1 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f7ff fcee 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001cfc:	20c1      	movs	r0, #193	; 0xc1
 8001cfe:	f7ff fceb 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001d02:	2030      	movs	r0, #48	; 0x30
 8001d04:	f7ff fce8 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001d08:	20ed      	movs	r0, #237	; 0xed
 8001d0a:	f7ff fcd5 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001d0e:	2064      	movs	r0, #100	; 0x64
 8001d10:	f7ff fce2 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f7ff fcdf 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001d1a:	2012      	movs	r0, #18
 8001d1c:	f7ff fcdc 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001d20:	2081      	movs	r0, #129	; 0x81
 8001d22:	f7ff fcd9 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001d26:	20e8      	movs	r0, #232	; 0xe8
 8001d28:	f7ff fcc6 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d2c:	2085      	movs	r0, #133	; 0x85
 8001d2e:	f7ff fcd3 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d32:	2010      	movs	r0, #16
 8001d34:	f7ff fcd0 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001d38:	207a      	movs	r0, #122	; 0x7a
 8001d3a:	f7ff fccd 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001d3e:	20cb      	movs	r0, #203	; 0xcb
 8001d40:	f7ff fcba 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d44:	2039      	movs	r0, #57	; 0x39
 8001d46:	f7ff fcc7 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d4a:	202c      	movs	r0, #44	; 0x2c
 8001d4c:	f7ff fcc4 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff fcc1 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d56:	2034      	movs	r0, #52	; 0x34
 8001d58:	f7ff fcbe 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f7ff fcbb 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001d62:	20f7      	movs	r0, #247	; 0xf7
 8001d64:	f7ff fca8 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001d68:	2020      	movs	r0, #32
 8001d6a:	f7ff fcb5 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001d6e:	20ea      	movs	r0, #234	; 0xea
 8001d70:	f7ff fca2 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7ff fcaf 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff fcac 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d80:	20c0      	movs	r0, #192	; 0xc0
 8001d82:	f7ff fc99 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001d86:	201b      	movs	r0, #27
 8001d88:	f7ff fca6 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001d8c:	20c1      	movs	r0, #193	; 0xc1
 8001d8e:	f7ff fc93 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001d92:	2001      	movs	r0, #1
 8001d94:	f7ff fca0 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001d98:	20c5      	movs	r0, #197	; 0xc5
 8001d9a:	f7ff fc8d 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001d9e:	2030      	movs	r0, #48	; 0x30
 8001da0:	f7ff fc9a 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001da4:	2030      	movs	r0, #48	; 0x30
 8001da6:	f7ff fc97 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001daa:	20c7      	movs	r0, #199	; 0xc7
 8001dac:	f7ff fc84 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001db0:	20b7      	movs	r0, #183	; 0xb7
 8001db2:	f7ff fc91 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001db6:	2036      	movs	r0, #54	; 0x36
 8001db8:	f7ff fc7e 	bl	80016b8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001dbc:	2008      	movs	r0, #8
 8001dbe:	f7ff fc8b 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001dc2:	203a      	movs	r0, #58	; 0x3a
 8001dc4:	f7ff fc78 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001dc8:	2055      	movs	r0, #85	; 0x55
 8001dca:	f7ff fc85 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001dce:	20b1      	movs	r0, #177	; 0xb1
 8001dd0:	f7ff fc72 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff fc7f 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001dda:	201a      	movs	r0, #26
 8001ddc:	f7ff fc7c 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001de0:	20b6      	movs	r0, #182	; 0xb6
 8001de2:	f7ff fc69 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001de6:	200a      	movs	r0, #10
 8001de8:	f7ff fc76 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001dec:	20a2      	movs	r0, #162	; 0xa2
 8001dee:	f7ff fc73 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001df2:	20f2      	movs	r0, #242	; 0xf2
 8001df4:	f7ff fc60 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7ff fc6d 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001dfe:	2026      	movs	r0, #38	; 0x26
 8001e00:	f7ff fc5a 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7ff fc67 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001e0a:	20e0      	movs	r0, #224	; 0xe0
 8001e0c:	f7ff fc54 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001e10:	200f      	movs	r0, #15
 8001e12:	f7ff fc61 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001e16:	202a      	movs	r0, #42	; 0x2a
 8001e18:	f7ff fc5e 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001e1c:	2028      	movs	r0, #40	; 0x28
 8001e1e:	f7ff fc5b 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e22:	2008      	movs	r0, #8
 8001e24:	f7ff fc58 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e28:	200e      	movs	r0, #14
 8001e2a:	f7ff fc55 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e2e:	2008      	movs	r0, #8
 8001e30:	f7ff fc52 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001e34:	2054      	movs	r0, #84	; 0x54
 8001e36:	f7ff fc4f 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001e3a:	20a9      	movs	r0, #169	; 0xa9
 8001e3c:	f7ff fc4c 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e40:	2043      	movs	r0, #67	; 0x43
 8001e42:	f7ff fc49 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e46:	200a      	movs	r0, #10
 8001e48:	f7ff fc46 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e4c:	200f      	movs	r0, #15
 8001e4e:	f7ff fc43 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff fc40 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff fc3d 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff fc3a 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff fc37 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001e6a:	20e1      	movs	r0, #225	; 0xe1
 8001e6c:	f7ff fc24 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff fc31 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001e76:	2015      	movs	r0, #21
 8001e78:	f7ff fc2e 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001e7c:	2017      	movs	r0, #23
 8001e7e:	f7ff fc2b 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e82:	2007      	movs	r0, #7
 8001e84:	f7ff fc28 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001e88:	2011      	movs	r0, #17
 8001e8a:	f7ff fc25 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001e8e:	2006      	movs	r0, #6
 8001e90:	f7ff fc22 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001e94:	202b      	movs	r0, #43	; 0x2b
 8001e96:	f7ff fc1f 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001e9a:	2056      	movs	r0, #86	; 0x56
 8001e9c:	f7ff fc1c 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001ea0:	203c      	movs	r0, #60	; 0x3c
 8001ea2:	f7ff fc19 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001ea6:	2005      	movs	r0, #5
 8001ea8:	f7ff fc16 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001eac:	2010      	movs	r0, #16
 8001eae:	f7ff fc13 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f7ff fc10 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001eb8:	203f      	movs	r0, #63	; 0x3f
 8001eba:	f7ff fc0d 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ebe:	203f      	movs	r0, #63	; 0x3f
 8001ec0:	f7ff fc0a 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ec4:	200f      	movs	r0, #15
 8001ec6:	f7ff fc07 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001eca:	202b      	movs	r0, #43	; 0x2b
 8001ecc:	f7ff fbf4 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7ff fc01 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7ff fbfe 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7ff fbfb 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001ee2:	203f      	movs	r0, #63	; 0x3f
 8001ee4:	f7ff fbf8 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001ee8:	202a      	movs	r0, #42	; 0x2a
 8001eea:	f7ff fbe5 	bl	80016b8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff fbf2 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff fbef 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff fbec 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001f00:	20ef      	movs	r0, #239	; 0xef
 8001f02:	f7ff fbe9 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001f06:	2011      	movs	r0, #17
 8001f08:	f7ff fbd6 	bl	80016b8 <LCD_WR_REG>
	HAL_Delay(120);
 8001f0c:	2078      	movs	r0, #120	; 0x78
 8001f0e:	f001 fb65 	bl	80035dc <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001f12:	2029      	movs	r0, #41	; 0x29
 8001f14:	f7ff fbd0 	bl	80016b8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f1e:	4804      	ldr	r0, [pc, #16]	; (8001f30 <lcd_init+0x2bc>)
 8001f20:	f002 fe42 	bl	8004ba8 <HAL_GPIO_WritePin>
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	2000020c 	.word	0x2000020c
 8001f30:	40020000 	.word	0x40020000

08001f34 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b08b      	sub	sp, #44	; 0x2c
 8001f38:	af04      	add	r7, sp, #16
 8001f3a:	60ba      	str	r2, [r7, #8]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	81fb      	strh	r3, [r7, #14]
 8001f42:	460b      	mov	r3, r1
 8001f44:	81bb      	strh	r3, [r7, #12]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001f4a:	89fb      	ldrh	r3, [r7, #14]
 8001f4c:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001f52:	e048      	b.n	8001fe6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001f54:	7dfb      	ldrb	r3, [r7, #23]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d145      	bne.n	8001fe6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f5a:	89fa      	ldrh	r2, [r7, #14]
 8001f5c:	4b26      	ldr	r3, [pc, #152]	; (8001ff8 <lcd_ShowStr+0xc4>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f66:	085b      	lsrs	r3, r3, #1
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	1acb      	subs	r3, r1, r3
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	dc3f      	bgt.n	8001ff0 <lcd_ShowStr+0xbc>
 8001f70:	89ba      	ldrh	r2, [r7, #12]
 8001f72:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <lcd_ShowStr+0xc4>)
 8001f74:	885b      	ldrh	r3, [r3, #2]
 8001f76:	4619      	mov	r1, r3
 8001f78:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f7c:	1acb      	subs	r3, r1, r3
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dc36      	bgt.n	8001ff0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b80      	cmp	r3, #128	; 0x80
 8001f88:	d902      	bls.n	8001f90 <lcd_ShowStr+0x5c>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	75fb      	strb	r3, [r7, #23]
 8001f8e:	e02a      	b.n	8001fe6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b0d      	cmp	r3, #13
 8001f96:	d10b      	bne.n	8001fb0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001f98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	89bb      	ldrh	r3, [r7, #12]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001fa4:	8abb      	ldrh	r3, [r7, #20]
 8001fa6:	81fb      	strh	r3, [r7, #14]
					str++;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	3301      	adds	r3, #1
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	e017      	b.n	8001fe0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	781a      	ldrb	r2, [r3, #0]
 8001fb4:	88fc      	ldrh	r4, [r7, #6]
 8001fb6:	89b9      	ldrh	r1, [r7, #12]
 8001fb8:	89f8      	ldrh	r0, [r7, #14]
 8001fba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	4623      	mov	r3, r4
 8001fcc:	f7ff fc3c 	bl	8001848 <lcd_ShowChar>
					x+=sizey/2;
 8001fd0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	89fb      	ldrh	r3, [r7, #14]
 8001fdc:	4413      	add	r3, r2
 8001fde:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1b2      	bne.n	8001f54 <lcd_ShowStr+0x20>
 8001fee:	e000      	b.n	8001ff2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001ff0:	bf00      	nop
			}
		}
	}
}
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}
 8001ff8:	2000020c 	.word	0x2000020c

08001ffc <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002000:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <led7_Scan+0x104>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <led7_Scan+0x104>)
 800200a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800200c:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <led7_Scan+0x108>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a3d      	ldr	r2, [pc, #244]	; (8002108 <led7_Scan+0x10c>)
 8002012:	5cd3      	ldrb	r3, [r2, r3]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	b21a      	sxth	r2, r3
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <led7_Scan+0x104>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b21b      	sxth	r3, r3
 800201e:	4313      	orrs	r3, r2
 8002020:	b21b      	sxth	r3, r3
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <led7_Scan+0x104>)
 8002026:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <led7_Scan+0x108>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d847      	bhi.n	80020c0 <led7_Scan+0xc4>
 8002030:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <led7_Scan+0x3c>)
 8002032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002036:	bf00      	nop
 8002038:	08002049 	.word	0x08002049
 800203c:	08002067 	.word	0x08002067
 8002040:	08002085 	.word	0x08002085
 8002044:	080020a3 	.word	0x080020a3
	case 0:
		spi_buffer |= 0x00b0;
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <led7_Scan+0x104>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <led7_Scan+0x104>)
 8002054:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <led7_Scan+0x104>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <led7_Scan+0x104>)
 8002062:	801a      	strh	r2, [r3, #0]
		break;
 8002064:	e02d      	b.n	80020c2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <led7_Scan+0x104>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b23      	ldr	r3, [pc, #140]	; (8002100 <led7_Scan+0x104>)
 8002072:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <led7_Scan+0x104>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	f023 0320 	bic.w	r3, r3, #32
 800207c:	b29a      	uxth	r2, r3
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <led7_Scan+0x104>)
 8002080:	801a      	strh	r2, [r3, #0]
		break;
 8002082:	e01e      	b.n	80020c2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002084:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <led7_Scan+0x104>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <led7_Scan+0x104>)
 8002090:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <led7_Scan+0x104>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	f023 0310 	bic.w	r3, r3, #16
 800209a:	b29a      	uxth	r2, r3
 800209c:	4b18      	ldr	r3, [pc, #96]	; (8002100 <led7_Scan+0x104>)
 800209e:	801a      	strh	r2, [r3, #0]
		break;
 80020a0:	e00f      	b.n	80020c2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80020a2:	4b17      	ldr	r3, [pc, #92]	; (8002100 <led7_Scan+0x104>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b14      	ldr	r3, [pc, #80]	; (8002100 <led7_Scan+0x104>)
 80020ae:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <led7_Scan+0x104>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <led7_Scan+0x104>)
 80020bc:	801a      	strh	r2, [r3, #0]
		break;
 80020be:	e000      	b.n	80020c2 <led7_Scan+0xc6>
	default:
		break;
 80020c0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <led7_Scan+0x108>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	425a      	negs	r2, r3
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	f002 0203 	and.w	r2, r2, #3
 80020d2:	bf58      	it	pl
 80020d4:	4253      	negpl	r3, r2
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <led7_Scan+0x108>)
 80020d8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2140      	movs	r1, #64	; 0x40
 80020de:	480b      	ldr	r0, [pc, #44]	; (800210c <led7_Scan+0x110>)
 80020e0:	f002 fd62 	bl	8004ba8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80020e4:	2301      	movs	r3, #1
 80020e6:	2202      	movs	r2, #2
 80020e8:	4905      	ldr	r1, [pc, #20]	; (8002100 <led7_Scan+0x104>)
 80020ea:	4809      	ldr	r0, [pc, #36]	; (8002110 <led7_Scan+0x114>)
 80020ec:	f004 f89f 	bl	800622e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2140      	movs	r1, #64	; 0x40
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <led7_Scan+0x110>)
 80020f6:	f002 fd57 	bl	8004ba8 <HAL_GPIO_WritePin>
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	2000000e 	.word	0x2000000e
 8002104:	20000214 	.word	0x20000214
 8002108:	20000000 	.word	0x20000000
 800210c:	40021800 	.word	0x40021800
 8002110:	20000270 	.word	0x20000270

08002114 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	4613      	mov	r3, r2
 8002120:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	db0e      	blt.n	8002146 <led7_SetDigit+0x32>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b09      	cmp	r3, #9
 800212c:	dc0b      	bgt.n	8002146 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <led7_SetDigit+0x40>)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	b2d9      	uxtb	r1, r3
 800213c:	4a06      	ldr	r2, [pc, #24]	; (8002158 <led7_SetDigit+0x44>)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	4413      	add	r3, r2
 8002142:	460a      	mov	r2, r1
 8002144:	701a      	strb	r2, [r3, #0]
	}
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000004 	.word	0x20000004
 8002158:	20000000 	.word	0x20000000

0800215c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002160:	f001 f9ca 	bl	80034f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002164:	f000 f82e 	bl	80021c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002168:	f7ff f92a 	bl	80013c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800216c:	f7fe ffd4 	bl	8001118 <MX_DMA_Init>
  MX_SPI1_Init();
 8002170:	f000 fe30 	bl	8002dd4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002174:	f7ff f854 	bl	8001220 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002178:	f7ff fa28 	bl	80015cc <MX_I2C1_Init>
  MX_TIM13_Init();
 800217c:	f000 ffac 	bl	80030d8 <MX_TIM13_Init>
  MX_TIM2_Init();
 8002180:	f000 ff5e 	bl	8003040 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002184:	f7fe fe10 	bl	8000da8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002188:	f001 f8f8 	bl	800337c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800218c:	f000 f884 	bl	8002298 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 8002190:	2000      	movs	r0, #0
 8002192:	f7ff fb0f 	bl	80017b4 <lcd_Clear>
  while (1)
  {
	  while(!flag_timer2[1]);
 8002196:	bf00      	nop
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <main+0x64>)
 800219a:	885b      	ldrh	r3, [r3, #2]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0fb      	beq.n	8002198 <main+0x3c>
	  flag_timer2[1] = 0;
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <main+0x64>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	805a      	strh	r2, [r3, #2]
	  button_Scan();
 80021a6:	f7fe ff29 	bl	8000ffc <button_Scan>
	  test_LedDebug();
 80021aa:	f000 f891 	bl	80022d0 <test_LedDebug>
	  ds3231_ReadTime();
 80021ae:	f7fe ffd3 	bl	8001158 <ds3231_ReadTime>
	  test_Uart();
 80021b2:	f000 f8e1 	bl	8002378 <test_Uart>
	  test_Adc();
 80021b6:	f000 f90b 	bl	80023d0 <test_Adc>
	  test_Buzzer();
 80021ba:	f000 f90f 	bl	80023dc <test_Buzzer>
  {
 80021be:	e7ea      	b.n	8002196 <main+0x3a>
 80021c0:	20000228 	.word	0x20000228

080021c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b094      	sub	sp, #80	; 0x50
 80021c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ca:	f107 0320 	add.w	r3, r7, #32
 80021ce:	2230      	movs	r2, #48	; 0x30
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f006 ff2e 	bl	8009034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <SystemClock_Config+0xcc>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	4a27      	ldr	r2, [pc, #156]	; (8002290 <SystemClock_Config+0xcc>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6413      	str	r3, [r2, #64]	; 0x40
 80021f8:	4b25      	ldr	r3, [pc, #148]	; (8002290 <SystemClock_Config+0xcc>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002204:	2300      	movs	r3, #0
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	4b22      	ldr	r3, [pc, #136]	; (8002294 <SystemClock_Config+0xd0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a21      	ldr	r2, [pc, #132]	; (8002294 <SystemClock_Config+0xd0>)
 800220e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <SystemClock_Config+0xd0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002220:	2302      	movs	r3, #2
 8002222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002224:	2301      	movs	r3, #1
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002228:	2310      	movs	r3, #16
 800222a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800222c:	2302      	movs	r3, #2
 800222e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002230:	2300      	movs	r3, #0
 8002232:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002234:	2308      	movs	r3, #8
 8002236:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002238:	23a8      	movs	r3, #168	; 0xa8
 800223a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800223c:	2302      	movs	r3, #2
 800223e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002240:	2304      	movs	r3, #4
 8002242:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002244:	f107 0320 	add.w	r3, r7, #32
 8002248:	4618      	mov	r0, r3
 800224a:	f003 facf 	bl	80057ec <HAL_RCC_OscConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002254:	f000 f8de 	bl	8002414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002258:	230f      	movs	r3, #15
 800225a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800225c:	2302      	movs	r3, #2
 800225e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002264:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002268:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800226a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800226e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	2105      	movs	r1, #5
 8002276:	4618      	mov	r0, r3
 8002278:	f003 fd30 	bl	8005cdc <HAL_RCC_ClockConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002282:	f000 f8c7 	bl	8002414 <Error_Handler>
  }
}
 8002286:	bf00      	nop
 8002288:	3750      	adds	r7, #80	; 0x50
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	40007000 	.word	0x40007000

08002298 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	  timer_init();
 800229c:	f000 fd2a 	bl	8002cf4 <timer_init>
	  button_init();
 80022a0:	f7fe fea0 	bl	8000fe4 <button_init>
	  lcd_init();
 80022a4:	f7ff fce6 	bl	8001c74 <lcd_init>
	  sensor_init();
 80022a8:	f000 f8ba 	bl	8002420 <sensor_init>
	  buzzer_init();
 80022ac:	f7fe ff12 	bl	80010d4 <buzzer_init>
	  setTimer2(50,1);
 80022b0:	2101      	movs	r1, #1
 80022b2:	2032      	movs	r0, #50	; 0x32
 80022b4:	f000 fd28 	bl	8002d08 <setTimer2>
	  setTimer2(1000, 2);
 80022b8:	2102      	movs	r1, #2
 80022ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022be:	f000 fd23 	bl	8002d08 <setTimer2>
	  setTimer2(1000, 3);
 80022c2:	2103      	movs	r1, #3
 80022c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022c8:	f000 fd1e 	bl	8002d08 <setTimer2>
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <test_LedDebug+0x3c>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <test_LedDebug+0x40>)
 80022dc:	fb83 1302 	smull	r1, r3, r3, r2
 80022e0:	10d9      	asrs	r1, r3, #3
 80022e2:	17d3      	asrs	r3, r2, #31
 80022e4:	1ac9      	subs	r1, r1, r3
 80022e6:	460b      	mov	r3, r1
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	1ad1      	subs	r1, r2, r3
 80022f0:	b2ca      	uxtb	r2, r1
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <test_LedDebug+0x3c>)
 80022f4:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <test_LedDebug+0x3c>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80022fe:	2110      	movs	r1, #16
 8002300:	4804      	ldr	r0, [pc, #16]	; (8002314 <test_LedDebug+0x44>)
 8002302:	f002 fc6a 	bl	8004bda <HAL_GPIO_TogglePin>
	}
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000218 	.word	0x20000218
 8002310:	66666667 	.word	0x66666667
 8002314:	40021000 	.word	0x40021000

08002318 <isButtonUp>:

uint8_t isButtonUp()
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <isButtonUp+0x1c>)
 800231e:	88db      	ldrh	r3, [r3, #6]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <isButtonUp+0x10>
        return 1;
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <isButtonUp+0x12>
    else
        return 0;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	20000130 	.word	0x20000130

08002338 <isButtonDown>:

uint8_t isButtonDown()
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <isButtonDown+0x1c>)
 800233e:	89db      	ldrh	r3, [r3, #14]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <isButtonDown+0x10>
        return 1;
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <isButtonDown+0x12>
    else
        return 0;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	20000130 	.word	0x20000130

08002358 <isButtonRight>:

uint8_t isButtonRight()
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
    if (button_count[11] == 1)
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <isButtonRight+0x1c>)
 800235e:	8adb      	ldrh	r3, [r3, #22]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <isButtonRight+0x10>
        return 1;
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <isButtonRight+0x12>
    else
        return 0;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	20000130 	.word	0x20000130

08002378 <test_Uart>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void test_Uart(){
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	if(button_count[12] == 1){
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <test_Uart+0x40>)
 800237e:	8b1b      	ldrh	r3, [r3, #24]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d117      	bne.n	80023b4 <test_Uart+0x3c>
		uart_Rs232SendNum(ds3231_hours);
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <test_Uart+0x44>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 ff83 	bl	8003294 <uart_Rs232SendNum>
		uart_Rs232SendString(":");
 800238e:	480c      	ldr	r0, [pc, #48]	; (80023c0 <test_Uart+0x48>)
 8002390:	f000 ff66 	bl	8003260 <uart_Rs232SendString>
		uart_Rs232SendNum(ds3231_min);
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <test_Uart+0x4c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 ff7b 	bl	8003294 <uart_Rs232SendNum>
		uart_Rs232SendString(":");
 800239e:	4808      	ldr	r0, [pc, #32]	; (80023c0 <test_Uart+0x48>)
 80023a0:	f000 ff5e 	bl	8003260 <uart_Rs232SendString>
		uart_Rs232SendNum(ds3231_sec);
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <test_Uart+0x50>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 ff73 	bl	8003294 <uart_Rs232SendNum>
		uart_Rs232SendString("\n");
 80023ae:	4807      	ldr	r0, [pc, #28]	; (80023cc <test_Uart+0x54>)
 80023b0:	f000 ff56 	bl	8003260 <uart_Rs232SendString>
	}
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000130 	.word	0x20000130
 80023bc:	2000015b 	.word	0x2000015b
 80023c0:	08009954 	.word	0x08009954
 80023c4:	2000015c 	.word	0x2000015c
 80023c8:	2000015d 	.word	0x2000015d
 80023cc:	08009958 	.word	0x08009958

080023d0 <test_Adc>:

void test_Adc(){
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
	sensor_data_display();
 80023d4:	f000 fa3c 	bl	8002850 <sensor_data_display>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}

080023dc <test_Buzzer>:

void test_Buzzer(){
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	if(isButtonUp()){
 80023e0:	f7ff ff9a 	bl	8002318 <isButtonUp>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <test_Buzzer+0x14>
		buzzer_SetVolume(50);
 80023ea:	2032      	movs	r0, #50	; 0x32
 80023ec:	f7fe fe7c 	bl	80010e8 <buzzer_SetVolume>
	}

	if(isButtonDown()){
 80023f0:	f7ff ffa2 	bl	8002338 <isButtonDown>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <test_Buzzer+0x24>
		buzzer_SetVolume(0);
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7fe fe74 	bl	80010e8 <buzzer_SetVolume>
	}

	if(isButtonRight()){
 8002400:	f7ff ffaa 	bl	8002358 <isButtonRight>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <test_Buzzer+0x34>
		buzzer_SetVolume(25);
 800240a:	2019      	movs	r0, #25
 800240c:	f7fe fe6c 	bl	80010e8 <buzzer_SetVolume>
	}

}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}

08002414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002418:	b672      	cpsid	i
}
 800241a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800241c:	e7fe      	b.n	800241c <Error_Handler+0x8>
	...

08002420 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002424:	2205      	movs	r2, #5
 8002426:	4903      	ldr	r1, [pc, #12]	; (8002434 <sensor_init+0x14>)
 8002428:	4803      	ldr	r0, [pc, #12]	; (8002438 <sensor_init+0x18>)
 800242a:	f001 f93f 	bl	80036ac <HAL_ADC_Start_DMA>
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000021c 	.word	0x2000021c
 8002438:	20000088 	.word	0x20000088

0800243c <sensor_Read>:

void sensor_Read(){
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002440:	2205      	movs	r2, #5
 8002442:	4903      	ldr	r1, [pc, #12]	; (8002450 <sensor_Read+0x14>)
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <sensor_Read+0x18>)
 8002446:	f001 f931 	bl	80036ac <HAL_ADC_Start_DMA>
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	2000021c 	.word	0x2000021c
 8002454:	20000088 	.word	0x20000088

08002458 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
	return adc_receive[2];
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <sensor_GetLight+0x14>)
 800245e:	889b      	ldrh	r3, [r3, #4]
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	2000021c 	.word	0x2000021c

08002470 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <sensor_GetPotentiometer+0x14>)
 8002476:	88db      	ldrh	r3, [r3, #6]
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	2000021c 	.word	0x2000021c

08002488 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <sensor_GetVoltage+0x70>)
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002498:	ee17 0a90 	vmov	r0, s15
 800249c:	f7fe f84c 	bl	8000538 <__aeabi_f2d>
 80024a0:	a311      	add	r3, pc, #68	; (adr r3, 80024e8 <sensor_GetVoltage+0x60>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fe f89f 	bl	80005e8 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4610      	mov	r0, r2
 80024b0:	4619      	mov	r1, r3
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <sensor_GetVoltage+0x74>)
 80024b8:	f7fe f896 	bl	80005e8 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	a30a      	add	r3, pc, #40	; (adr r3, 80024f0 <sensor_GetVoltage+0x68>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f7fe f9b7 	bl	800083c <__aeabi_ddiv>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7fe fa99 	bl	8000a0c <__aeabi_d2f>
 80024da:	4603      	mov	r3, r0
 80024dc:	ee07 3a90 	vmov	s15, r3
}
 80024e0:	eeb0 0a67 	vmov.f32	s0, s15
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	66666666 	.word	0x66666666
 80024ec:	400a6666 	.word	0x400a6666
 80024f0:	cccccccd 	.word	0xcccccccd
 80024f4:	40b908ac 	.word	0x40b908ac
 80024f8:	2000021c 	.word	0x2000021c
 80024fc:	40280000 	.word	0x40280000

08002500 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 8002504:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <sensor_GetCurrent+0xa8>)
 8002506:	885b      	ldrh	r3, [r3, #2]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002510:	ee17 0a90 	vmov	r0, s15
 8002514:	f7fe f810 	bl	8000538 <__aeabi_f2d>
 8002518:	a31f      	add	r3, pc, #124	; (adr r3, 8002598 <sensor_GetCurrent+0x98>)
 800251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251e:	f7fe f863 	bl	80005e8 <__aeabi_dmul>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <sensor_GetCurrent+0xac>)
 8002530:	f7fe f85a 	bl	80005e8 <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	a318      	add	r3, pc, #96	; (adr r3, 80025a0 <sensor_GetCurrent+0xa0>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fe f97b 	bl	800083c <__aeabi_ddiv>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <sensor_GetCurrent+0xb0>)
 8002554:	f7fd fe90 	bl	8000278 <__aeabi_dsub>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <sensor_GetCurrent+0xb4>)
 8002566:	f7fe f83f 	bl	80005e8 <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <sensor_GetCurrent+0xb0>)
 8002578:	f7fe f960 	bl	800083c <__aeabi_ddiv>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	f7fe fa42 	bl	8000a0c <__aeabi_d2f>
 8002588:	4603      	mov	r3, r0
 800258a:	ee07 3a90 	vmov	s15, r3
}
 800258e:	eeb0 0a67 	vmov.f32	s0, s15
 8002592:	bd80      	pop	{r7, pc}
 8002594:	f3af 8000 	nop.w
 8002598:	66666666 	.word	0x66666666
 800259c:	400a6666 	.word	0x400a6666
 80025a0:	147ae148 	.word	0x147ae148
 80025a4:	40a4b2ee 	.word	0x40a4b2ee
 80025a8:	2000021c 	.word	0x2000021c
 80025ac:	408f4000 	.word	0x408f4000
 80025b0:	40040000 	.word	0x40040000
 80025b4:	40140000 	.word	0x40140000

080025b8 <sensor_GetTemperature>:

float sensor_GetTemperature(){
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80025bc:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <sensor_GetTemperature+0x30>)
 80025be:	891b      	ldrh	r3, [r3, #8]
 80025c0:	ee07 3a90 	vmov	s15, r3
 80025c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80025ec <sensor_GetTemperature+0x34>
 80025cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025d0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80025f0 <sensor_GetTemperature+0x38>
 80025d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025d8:	eef0 7a66 	vmov.f32	s15, s13
}
 80025dc:	eeb0 0a67 	vmov.f32	s0, s15
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	2000021c 	.word	0x2000021c
 80025ec:	43a50000 	.word	0x43a50000
 80025f0:	457ff000 	.word	0x457ff000

080025f4 <uart_display_float>:
#include "sensor_data_display.h"

uint8_t count_adc = 0;

void uart_display_float(float num)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	ed87 0a01 	vstr	s0, [r7, #4]
	int num_front = num;
 80025fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002606:	ee17 3a90 	vmov	r3, s15
 800260a:	60fb      	str	r3, [r7, #12]
	int num_back = num*100 - num_front*100;
 800260c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002610:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002654 <uart_display_float+0x60>
 8002614:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2264      	movs	r2, #100	; 0x64
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800262c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002630:	ee17 3a90 	vmov	r3, s15
 8002634:	60bb      	str	r3, [r7, #8]
	uart_Rs232SendNum(num_front);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fe2b 	bl	8003294 <uart_Rs232SendNum>
	uart_Rs232SendString(".");
 800263e:	4806      	ldr	r0, [pc, #24]	; (8002658 <uart_display_float+0x64>)
 8002640:	f000 fe0e 	bl	8003260 <uart_Rs232SendString>
	uart_Rs232SendNum(num_back);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fe24 	bl	8003294 <uart_Rs232SendNum>
}
 800264c:	bf00      	nop
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	42c80000 	.word	0x42c80000
 8002658:	0800995c 	.word	0x0800995c

0800265c <get_power_consumption>:

float get_power_consumption(float voltage, float current)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	ed87 0a01 	vstr	s0, [r7, #4]
 8002666:	edc7 0a00 	vstr	s1, [r7]
//	uart_Rs232SendString("Current:		");
//	uart_display_float(current);
//	uart_Rs232SendString("mA");
//	uart_Rs232SendString("\n");

	float power_usage = voltage*current;
 800266a:	ed97 7a01 	vldr	s14, [r7, #4]
 800266e:	edd7 7a00 	vldr	s15, [r7]
 8002672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002676:	edc7 7a03 	vstr	s15, [r7, #12]
//	uart_Rs232SendString("Power Usage:	");
//	uart_display_float(power_usage);
//	uart_Rs232SendString("mW");
//	uart_Rs232SendString("\n");

	return power_usage;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	ee07 3a90 	vmov	s15, r3
}
 8002680:	eeb0 0a67 	vmov.f32	s0, s15
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <light_status>:

char* light_status(uint16_t light_sensor_data)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
	if( 0 <= light_sensor_data && light_sensor_data < 2048)
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a0:	d201      	bcs.n	80026a6 <light_status+0x16>
	{
		return "Weak";
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <light_status+0x38>)
 80026a4:	e00a      	b.n	80026bc <light_status+0x2c>
	}
	else if(2048 <= light_sensor_data && light_sensor_data < 4096)
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ac:	d305      	bcc.n	80026ba <light_status+0x2a>
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b4:	d201      	bcs.n	80026ba <light_status+0x2a>
	{
		return "Strong";
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <light_status+0x3c>)
 80026b8:	e000      	b.n	80026bc <light_status+0x2c>
	}
	return "Sensor Error";
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <light_status+0x40>)
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	08009960 	.word	0x08009960
 80026cc:	08009968 	.word	0x08009968
 80026d0:	08009970 	.word	0x08009970

080026d4 <humid_simulation>:

float humid_simulation (uint16_t potentiometer)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	80fb      	strh	r3, [r7, #6]
	float data = potentiometer;
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	ee07 3a90 	vmov	s15, r3
 80026e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e8:	edc7 7a03 	vstr	s15, [r7, #12]
	return (data*100)/4095;
 80026ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80026f0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002714 <humid_simulation+0x40>
 80026f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002718 <humid_simulation+0x44>
 80026fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002700:	eef0 7a66 	vmov.f32	s15, s13
}
 8002704:	eeb0 0a67 	vmov.f32	s0, s15
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	42c80000 	.word	0x42c80000
 8002718:	457ff000 	.word	0x457ff000

0800271c <sensor_data_send_serial>:

void sensor_data_send_serial(
		float voltage, float current, float power_usage,
		char* light_density, float humid, float temper)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	ed87 0a05 	vstr	s0, [r7, #20]
 8002726:	edc7 0a04 	vstr	s1, [r7, #16]
 800272a:	ed87 1a03 	vstr	s2, [r7, #12]
 800272e:	60b8      	str	r0, [r7, #8]
 8002730:	edc7 1a01 	vstr	s3, [r7, #4]
 8002734:	ed87 2a00 	vstr	s4, [r7]
	uart_Rs232SendString("\n");
 8002738:	4835      	ldr	r0, [pc, #212]	; (8002810 <sensor_data_send_serial+0xf4>)
 800273a:	f000 fd91 	bl	8003260 <uart_Rs232SendString>

	uart_Rs232SendNum(ds3231_hours);
 800273e:	4b35      	ldr	r3, [pc, #212]	; (8002814 <sensor_data_send_serial+0xf8>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fda6 	bl	8003294 <uart_Rs232SendNum>
	uart_Rs232SendString(":");
 8002748:	4833      	ldr	r0, [pc, #204]	; (8002818 <sensor_data_send_serial+0xfc>)
 800274a:	f000 fd89 	bl	8003260 <uart_Rs232SendString>
	uart_Rs232SendNum(ds3231_min);
 800274e:	4b33      	ldr	r3, [pc, #204]	; (800281c <sensor_data_send_serial+0x100>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fd9e 	bl	8003294 <uart_Rs232SendNum>
	uart_Rs232SendString(":");
 8002758:	482f      	ldr	r0, [pc, #188]	; (8002818 <sensor_data_send_serial+0xfc>)
 800275a:	f000 fd81 	bl	8003260 <uart_Rs232SendString>
	uart_Rs232SendNum(ds3231_sec);
 800275e:	4b30      	ldr	r3, [pc, #192]	; (8002820 <sensor_data_send_serial+0x104>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fd96 	bl	8003294 <uart_Rs232SendNum>
	uart_Rs232SendString("\n");
 8002768:	4829      	ldr	r0, [pc, #164]	; (8002810 <sensor_data_send_serial+0xf4>)
 800276a:	f000 fd79 	bl	8003260 <uart_Rs232SendString>

	uart_Rs232SendString("Voltage: ");
 800276e:	482d      	ldr	r0, [pc, #180]	; (8002824 <sensor_data_send_serial+0x108>)
 8002770:	f000 fd76 	bl	8003260 <uart_Rs232SendString>
	uart_display_float(voltage);
 8002774:	ed97 0a05 	vldr	s0, [r7, #20]
 8002778:	f7ff ff3c 	bl	80025f4 <uart_display_float>
	uart_Rs232SendString(" mV");
 800277c:	482a      	ldr	r0, [pc, #168]	; (8002828 <sensor_data_send_serial+0x10c>)
 800277e:	f000 fd6f 	bl	8003260 <uart_Rs232SendString>
	uart_Rs232SendString("\n");
 8002782:	4823      	ldr	r0, [pc, #140]	; (8002810 <sensor_data_send_serial+0xf4>)
 8002784:	f000 fd6c 	bl	8003260 <uart_Rs232SendString>

	uart_Rs232SendString("Current: ");
 8002788:	4828      	ldr	r0, [pc, #160]	; (800282c <sensor_data_send_serial+0x110>)
 800278a:	f000 fd69 	bl	8003260 <uart_Rs232SendString>
	uart_display_float(current);
 800278e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002792:	f7ff ff2f 	bl	80025f4 <uart_display_float>
	uart_Rs232SendString(" mA");
 8002796:	4826      	ldr	r0, [pc, #152]	; (8002830 <sensor_data_send_serial+0x114>)
 8002798:	f000 fd62 	bl	8003260 <uart_Rs232SendString>
	uart_Rs232SendString("\n");
 800279c:	481c      	ldr	r0, [pc, #112]	; (8002810 <sensor_data_send_serial+0xf4>)
 800279e:	f000 fd5f 	bl	8003260 <uart_Rs232SendString>

	uart_Rs232SendString("Power Usage: ");
 80027a2:	4824      	ldr	r0, [pc, #144]	; (8002834 <sensor_data_send_serial+0x118>)
 80027a4:	f000 fd5c 	bl	8003260 <uart_Rs232SendString>
	uart_display_float(power_usage);
 80027a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80027ac:	f7ff ff22 	bl	80025f4 <uart_display_float>
	uart_Rs232SendString(" mW");
 80027b0:	4821      	ldr	r0, [pc, #132]	; (8002838 <sensor_data_send_serial+0x11c>)
 80027b2:	f000 fd55 	bl	8003260 <uart_Rs232SendString>
	uart_Rs232SendString("\n");
 80027b6:	4816      	ldr	r0, [pc, #88]	; (8002810 <sensor_data_send_serial+0xf4>)
 80027b8:	f000 fd52 	bl	8003260 <uart_Rs232SendString>

	uart_Rs232SendString("Light: ");
 80027bc:	481f      	ldr	r0, [pc, #124]	; (800283c <sensor_data_send_serial+0x120>)
 80027be:	f000 fd4f 	bl	8003260 <uart_Rs232SendString>
	uart_Rs232SendString(light_density);
 80027c2:	68b8      	ldr	r0, [r7, #8]
 80027c4:	f000 fd4c 	bl	8003260 <uart_Rs232SendString>
	uart_Rs232SendString("\n");
 80027c8:	4811      	ldr	r0, [pc, #68]	; (8002810 <sensor_data_send_serial+0xf4>)
 80027ca:	f000 fd49 	bl	8003260 <uart_Rs232SendString>

	uart_Rs232SendString("Humid: ");
 80027ce:	481c      	ldr	r0, [pc, #112]	; (8002840 <sensor_data_send_serial+0x124>)
 80027d0:	f000 fd46 	bl	8003260 <uart_Rs232SendString>
	uart_display_float(humid);
 80027d4:	ed97 0a01 	vldr	s0, [r7, #4]
 80027d8:	f7ff ff0c 	bl	80025f4 <uart_display_float>
	uart_Rs232SendString(" %");
 80027dc:	4819      	ldr	r0, [pc, #100]	; (8002844 <sensor_data_send_serial+0x128>)
 80027de:	f000 fd3f 	bl	8003260 <uart_Rs232SendString>
	uart_Rs232SendString("\n");
 80027e2:	480b      	ldr	r0, [pc, #44]	; (8002810 <sensor_data_send_serial+0xf4>)
 80027e4:	f000 fd3c 	bl	8003260 <uart_Rs232SendString>

	uart_Rs232SendString("Temperature: ");
 80027e8:	4817      	ldr	r0, [pc, #92]	; (8002848 <sensor_data_send_serial+0x12c>)
 80027ea:	f000 fd39 	bl	8003260 <uart_Rs232SendString>
	uart_display_float(temper);
 80027ee:	ed97 0a00 	vldr	s0, [r7]
 80027f2:	f7ff feff 	bl	80025f4 <uart_display_float>
	uart_Rs232SendString(" C");
 80027f6:	4815      	ldr	r0, [pc, #84]	; (800284c <sensor_data_send_serial+0x130>)
 80027f8:	f000 fd32 	bl	8003260 <uart_Rs232SendString>
	uart_Rs232SendString("\n");
 80027fc:	4804      	ldr	r0, [pc, #16]	; (8002810 <sensor_data_send_serial+0xf4>)
 80027fe:	f000 fd2f 	bl	8003260 <uart_Rs232SendString>

	uart_Rs232SendString("\n");
 8002802:	4803      	ldr	r0, [pc, #12]	; (8002810 <sensor_data_send_serial+0xf4>)
 8002804:	f000 fd2c 	bl	8003260 <uart_Rs232SendString>
}
 8002808:	bf00      	nop
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	08009980 	.word	0x08009980
 8002814:	2000015b 	.word	0x2000015b
 8002818:	08009984 	.word	0x08009984
 800281c:	2000015c 	.word	0x2000015c
 8002820:	2000015d 	.word	0x2000015d
 8002824:	08009988 	.word	0x08009988
 8002828:	08009994 	.word	0x08009994
 800282c:	08009998 	.word	0x08009998
 8002830:	080099a4 	.word	0x080099a4
 8002834:	080099a8 	.word	0x080099a8
 8002838:	080099b8 	.word	0x080099b8
 800283c:	080099bc 	.word	0x080099bc
 8002840:	080099c4 	.word	0x080099c4
 8002844:	080099cc 	.word	0x080099cc
 8002848:	080099d0 	.word	0x080099d0
 800284c:	080099e0 	.word	0x080099e0

08002850 <sensor_data_display>:

void sensor_data_display()
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	ed2d 8b04 	vpush	{d8-d9}
 8002856:	b087      	sub	sp, #28
 8002858:	af04      	add	r7, sp, #16
	led7_SetDigit(ds3231_hours/10, 0, 0);
 800285a:	4bce      	ldr	r3, [pc, #824]	; (8002b94 <sensor_data_display+0x344>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	4ace      	ldr	r2, [pc, #824]	; (8002b98 <sensor_data_display+0x348>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2200      	movs	r2, #0
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fc51 	bl	8002114 <led7_SetDigit>
	led7_SetDigit(ds3231_hours%10, 1, 0);
 8002872:	4bc8      	ldr	r3, [pc, #800]	; (8002b94 <sensor_data_display+0x344>)
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	4bc8      	ldr	r3, [pc, #800]	; (8002b98 <sensor_data_display+0x348>)
 8002878:	fba3 1302 	umull	r1, r3, r3, r2
 800287c:	08d9      	lsrs	r1, r3, #3
 800287e:	460b      	mov	r3, r1
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2200      	movs	r2, #0
 800288c:	2101      	movs	r1, #1
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fc40 	bl	8002114 <led7_SetDigit>
	led7_SetDigit(ds3231_min/10, 2, 0);
 8002894:	4bc1      	ldr	r3, [pc, #772]	; (8002b9c <sensor_data_display+0x34c>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4abf      	ldr	r2, [pc, #764]	; (8002b98 <sensor_data_display+0x348>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	08db      	lsrs	r3, r3, #3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2200      	movs	r2, #0
 80028a4:	2102      	movs	r1, #2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fc34 	bl	8002114 <led7_SetDigit>
	led7_SetDigit(ds3231_min%10, 3, 0);
 80028ac:	4bbb      	ldr	r3, [pc, #748]	; (8002b9c <sensor_data_display+0x34c>)
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	4bb9      	ldr	r3, [pc, #740]	; (8002b98 <sensor_data_display+0x348>)
 80028b2:	fba3 1302 	umull	r1, r3, r3, r2
 80028b6:	08d9      	lsrs	r1, r3, #3
 80028b8:	460b      	mov	r3, r1
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2200      	movs	r2, #0
 80028c6:	2103      	movs	r1, #3
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fc23 	bl	8002114 <led7_SetDigit>
	count_adc = (count_adc + 1)%20;
 80028ce:	4bb4      	ldr	r3, [pc, #720]	; (8002ba0 <sensor_data_display+0x350>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	4bb3      	ldr	r3, [pc, #716]	; (8002ba4 <sensor_data_display+0x354>)
 80028d6:	fb83 1302 	smull	r1, r3, r3, r2
 80028da:	10d9      	asrs	r1, r3, #3
 80028dc:	17d3      	asrs	r3, r2, #31
 80028de:	1ac9      	subs	r1, r1, r3
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	1ad1      	subs	r1, r2, r3
 80028ea:	b2ca      	uxtb	r2, r1
 80028ec:	4bac      	ldr	r3, [pc, #688]	; (8002ba0 <sensor_data_display+0x350>)
 80028ee:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 80028f0:	4bab      	ldr	r3, [pc, #684]	; (8002ba0 <sensor_data_display+0x350>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f040 81e1 	bne.w	8002cbc <sensor_data_display+0x46c>
		sensor_Read();
 80028fa:	f7ff fd9f 	bl	800243c <sensor_Read>
		lcd_ShowStr(10, 100, "Voltage:", RED, BLACK, 16, 0);
 80028fe:	2300      	movs	r3, #0
 8002900:	9302      	str	r3, [sp, #8]
 8002902:	2310      	movs	r3, #16
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	2300      	movs	r3, #0
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800290e:	4aa6      	ldr	r2, [pc, #664]	; (8002ba8 <sensor_data_display+0x358>)
 8002910:	2164      	movs	r1, #100	; 0x64
 8002912:	200a      	movs	r0, #10
 8002914:	f7ff fb0e 	bl	8001f34 <lcd_ShowStr>
		lcd_ShowIntNum(120, 100,sensor_GetVoltage()*1000, 4, RED, BLACK, 16);
 8002918:	f7ff fdb6 	bl	8002488 <sensor_GetVoltage>
 800291c:	eef0 7a40 	vmov.f32	s15, s0
 8002920:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8002bac <sensor_data_display+0x35c>
 8002924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800292c:	ee17 3a90 	vmov	r3, s15
 8002930:	b29a      	uxth	r2, r3
 8002932:	2310      	movs	r3, #16
 8002934:	9302      	str	r3, [sp, #8]
 8002936:	2300      	movs	r3, #0
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	2304      	movs	r3, #4
 8002942:	2164      	movs	r1, #100	; 0x64
 8002944:	2078      	movs	r0, #120	; 0x78
 8002946:	f7ff f86b 	bl	8001a20 <lcd_ShowIntNum>
		lcd_ShowStr(168, 100, "mV", RED, BLACK, 16, 0);
 800294a:	2300      	movs	r3, #0
 800294c:	9302      	str	r3, [sp, #8]
 800294e:	2310      	movs	r3, #16
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	2300      	movs	r3, #0
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800295a:	4a95      	ldr	r2, [pc, #596]	; (8002bb0 <sensor_data_display+0x360>)
 800295c:	2164      	movs	r1, #100	; 0x64
 800295e:	20a8      	movs	r0, #168	; 0xa8
 8002960:	f7ff fae8 	bl	8001f34 <lcd_ShowStr>

		lcd_ShowStr(10, 120, "Current:", RED, BLACK, 16, 0);
 8002964:	2300      	movs	r3, #0
 8002966:	9302      	str	r3, [sp, #8]
 8002968:	2310      	movs	r3, #16
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	2300      	movs	r3, #0
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002974:	4a8f      	ldr	r2, [pc, #572]	; (8002bb4 <sensor_data_display+0x364>)
 8002976:	2178      	movs	r1, #120	; 0x78
 8002978:	200a      	movs	r0, #10
 800297a:	f7ff fadb 	bl	8001f34 <lcd_ShowStr>
		lcd_ShowIntNum(120, 120,sensor_GetCurrent()/100, 4, RED, BLACK, 16);
 800297e:	f7ff fdbf 	bl	8002500 <sensor_GetCurrent>
 8002982:	eeb0 7a40 	vmov.f32	s14, s0
 8002986:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8002bb8 <sensor_data_display+0x368>
 800298a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800298e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002992:	ee17 3a90 	vmov	r3, s15
 8002996:	b29a      	uxth	r2, r3
 8002998:	2310      	movs	r3, #16
 800299a:	9302      	str	r3, [sp, #8]
 800299c:	2300      	movs	r3, #0
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2304      	movs	r3, #4
 80029a8:	2178      	movs	r1, #120	; 0x78
 80029aa:	2078      	movs	r0, #120	; 0x78
 80029ac:	f7ff f838 	bl	8001a20 <lcd_ShowIntNum>
		lcd_ShowStr(168, 120, "mA", RED, BLACK, 16, 0);
 80029b0:	2300      	movs	r3, #0
 80029b2:	9302      	str	r3, [sp, #8]
 80029b4:	2310      	movs	r3, #16
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2300      	movs	r3, #0
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029c0:	4a7e      	ldr	r2, [pc, #504]	; (8002bbc <sensor_data_display+0x36c>)
 80029c2:	2178      	movs	r1, #120	; 0x78
 80029c4:	20a8      	movs	r0, #168	; 0xa8
 80029c6:	f7ff fab5 	bl	8001f34 <lcd_ShowStr>

		float power_usage = get_power_consumption(sensor_GetVoltage()*1000,sensor_GetCurrent()/100);
 80029ca:	f7ff fd5d 	bl	8002488 <sensor_GetVoltage>
 80029ce:	eef0 7a40 	vmov.f32	s15, s0
 80029d2:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002bac <sensor_data_display+0x35c>
 80029d6:	ee27 8a87 	vmul.f32	s16, s15, s14
 80029da:	f7ff fd91 	bl	8002500 <sensor_GetCurrent>
 80029de:	eeb0 7a40 	vmov.f32	s14, s0
 80029e2:	eddf 6a75 	vldr	s13, [pc, #468]	; 8002bb8 <sensor_data_display+0x368>
 80029e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029ea:	eef0 0a67 	vmov.f32	s1, s15
 80029ee:	eeb0 0a48 	vmov.f32	s0, s16
 80029f2:	f7ff fe33 	bl	800265c <get_power_consumption>
 80029f6:	ed87 0a01 	vstr	s0, [r7, #4]
		lcd_ShowStr(10, 140, "Power Usage:", RED, BLACK, 16, 0);
 80029fa:	2300      	movs	r3, #0
 80029fc:	9302      	str	r3, [sp, #8]
 80029fe:	2310      	movs	r3, #16
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	2300      	movs	r3, #0
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a0a:	4a6d      	ldr	r2, [pc, #436]	; (8002bc0 <sensor_data_display+0x370>)
 8002a0c:	218c      	movs	r1, #140	; 0x8c
 8002a0e:	200a      	movs	r0, #10
 8002a10:	f7ff fa90 	bl	8001f34 <lcd_ShowStr>
		lcd_ShowIntNum(120, 140, power_usage, 4, RED, BLACK, 16);
 8002a14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a1c:	ee17 3a90 	vmov	r3, s15
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	2310      	movs	r3, #16
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	2300      	movs	r3, #0
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2304      	movs	r3, #4
 8002a32:	218c      	movs	r1, #140	; 0x8c
 8002a34:	2078      	movs	r0, #120	; 0x78
 8002a36:	f7fe fff3 	bl	8001a20 <lcd_ShowIntNum>
		lcd_ShowStr(168, 140, "mW", RED, BLACK, 16, 0);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	9302      	str	r3, [sp, #8]
 8002a3e:	2310      	movs	r3, #16
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	2300      	movs	r3, #0
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a4a:	4a5e      	ldr	r2, [pc, #376]	; (8002bc4 <sensor_data_display+0x374>)
 8002a4c:	218c      	movs	r1, #140	; 0x8c
 8002a4e:	20a8      	movs	r0, #168	; 0xa8
 8002a50:	f7ff fa70 	bl	8001f34 <lcd_ShowStr>

		lcd_ShowStr(10, 160, "Light:", RED, BLACK, 16, 0);
 8002a54:	2300      	movs	r3, #0
 8002a56:	9302      	str	r3, [sp, #8]
 8002a58:	2310      	movs	r3, #16
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a64:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <sensor_data_display+0x378>)
 8002a66:	21a0      	movs	r1, #160	; 0xa0
 8002a68:	200a      	movs	r0, #10
 8002a6a:	f7ff fa63 	bl	8001f34 <lcd_ShowStr>
		lcd_ShowIntNum(120, 160, sensor_GetLight(), 4, RED, BLACK, 16);
 8002a6e:	f7ff fcf3 	bl	8002458 <sensor_GetLight>
 8002a72:	4603      	mov	r3, r0
 8002a74:	461a      	mov	r2, r3
 8002a76:	2310      	movs	r3, #16
 8002a78:	9302      	str	r3, [sp, #8]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2304      	movs	r3, #4
 8002a86:	21a0      	movs	r1, #160	; 0xa0
 8002a88:	2078      	movs	r0, #120	; 0x78
 8002a8a:	f7fe ffc9 	bl	8001a20 <lcd_ShowIntNum>
		lcd_ShowStr(168, 160, light_status(sensor_GetLight()), RED, BLACK, 16, 0);
 8002a8e:	f7ff fce3 	bl	8002458 <sensor_GetLight>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fdfb 	bl	8002690 <light_status>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9302      	str	r3, [sp, #8]
 8002aa0:	2310      	movs	r3, #16
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002aac:	21a0      	movs	r1, #160	; 0xa0
 8002aae:	20a8      	movs	r0, #168	; 0xa8
 8002ab0:	f7ff fa40 	bl	8001f34 <lcd_ShowStr>

		lcd_ShowStr(10, 180, "Humid Raw:", RED, BLACK, 16, 0);
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	9302      	str	r3, [sp, #8]
 8002ab8:	2310      	movs	r3, #16
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	2300      	movs	r3, #0
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ac4:	4a41      	ldr	r2, [pc, #260]	; (8002bcc <sensor_data_display+0x37c>)
 8002ac6:	21b4      	movs	r1, #180	; 0xb4
 8002ac8:	200a      	movs	r0, #10
 8002aca:	f7ff fa33 	bl	8001f34 <lcd_ShowStr>
		lcd_ShowIntNum(120, 180, sensor_GetPotentiometer(), 4, RED, BLACK, 16);
 8002ace:	f7ff fccf 	bl	8002470 <sensor_GetPotentiometer>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	2310      	movs	r3, #16
 8002ad8:	9302      	str	r3, [sp, #8]
 8002ada:	2300      	movs	r3, #0
 8002adc:	9301      	str	r3, [sp, #4]
 8002ade:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	21b4      	movs	r1, #180	; 0xb4
 8002ae8:	2078      	movs	r0, #120	; 0x78
 8002aea:	f7fe ff99 	bl	8001a20 <lcd_ShowIntNum>

		lcd_ShowStr(10, 200, "Humid:", RED, BLACK, 16, 0);
 8002aee:	2300      	movs	r3, #0
 8002af0:	9302      	str	r3, [sp, #8]
 8002af2:	2310      	movs	r3, #16
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	2300      	movs	r3, #0
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002afe:	4a34      	ldr	r2, [pc, #208]	; (8002bd0 <sensor_data_display+0x380>)
 8002b00:	21c8      	movs	r1, #200	; 0xc8
 8002b02:	200a      	movs	r0, #10
 8002b04:	f7ff fa16 	bl	8001f34 <lcd_ShowStr>
		lcd_ShowFloatNum(120, 200, humid_simulation(sensor_GetPotentiometer()), 4, RED, BLACK, 16);
 8002b08:	f7ff fcb2 	bl	8002470 <sensor_GetPotentiometer>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fde0 	bl	80026d4 <humid_simulation>
 8002b14:	eef0 7a40 	vmov.f32	s15, s0
 8002b18:	2310      	movs	r3, #16
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b24:	2204      	movs	r2, #4
 8002b26:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2a:	21c8      	movs	r1, #200	; 0xc8
 8002b2c:	2078      	movs	r0, #120	; 0x78
 8002b2e:	f7fe fff5 	bl	8001b1c <lcd_ShowFloatNum>
		lcd_ShowStr(168, 200, "%", RED, BLACK, 16, 0);
 8002b32:	2300      	movs	r3, #0
 8002b34:	9302      	str	r3, [sp, #8]
 8002b36:	2310      	movs	r3, #16
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b42:	4a24      	ldr	r2, [pc, #144]	; (8002bd4 <sensor_data_display+0x384>)
 8002b44:	21c8      	movs	r1, #200	; 0xc8
 8002b46:	20a8      	movs	r0, #168	; 0xa8
 8002b48:	f7ff f9f4 	bl	8001f34 <lcd_ShowStr>

		lcd_ShowStr(10, 220, "Temperature:", RED, BLACK, 16, 0);
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9302      	str	r3, [sp, #8]
 8002b50:	2310      	movs	r3, #16
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	2300      	movs	r3, #0
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b5c:	4a1e      	ldr	r2, [pc, #120]	; (8002bd8 <sensor_data_display+0x388>)
 8002b5e:	21dc      	movs	r1, #220	; 0xdc
 8002b60:	200a      	movs	r0, #10
 8002b62:	f7ff f9e7 	bl	8001f34 <lcd_ShowStr>
		lcd_ShowFloatNum(120, 220,sensor_GetTemperature(), 4, RED, BLACK, 16);
 8002b66:	f7ff fd27 	bl	80025b8 <sensor_GetTemperature>
 8002b6a:	eef0 7a40 	vmov.f32	s15, s0
 8002b6e:	2310      	movs	r3, #16
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	2300      	movs	r3, #0
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b80:	21dc      	movs	r1, #220	; 0xdc
 8002b82:	2078      	movs	r0, #120	; 0x78
 8002b84:	f7fe ffca 	bl	8001b1c <lcd_ShowFloatNum>
		lcd_ShowStr(168, 220, "C", RED, BLACK, 16, 0);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9302      	str	r3, [sp, #8]
 8002b8c:	2310      	movs	r3, #16
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	2300      	movs	r3, #0
 8002b92:	e023      	b.n	8002bdc <sensor_data_display+0x38c>
 8002b94:	2000015b 	.word	0x2000015b
 8002b98:	cccccccd 	.word	0xcccccccd
 8002b9c:	2000015c 	.word	0x2000015c
 8002ba0:	20000226 	.word	0x20000226
 8002ba4:	66666667 	.word	0x66666667
 8002ba8:	080099e4 	.word	0x080099e4
 8002bac:	447a0000 	.word	0x447a0000
 8002bb0:	080099f0 	.word	0x080099f0
 8002bb4:	080099f4 	.word	0x080099f4
 8002bb8:	42c80000 	.word	0x42c80000
 8002bbc:	08009a00 	.word	0x08009a00
 8002bc0:	08009a04 	.word	0x08009a04
 8002bc4:	08009a14 	.word	0x08009a14
 8002bc8:	08009a18 	.word	0x08009a18
 8002bcc:	08009a20 	.word	0x08009a20
 8002bd0:	08009a2c 	.word	0x08009a2c
 8002bd4:	08009a34 	.word	0x08009a34
 8002bd8:	08009a38 	.word	0x08009a38
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002be2:	4a39      	ldr	r2, [pc, #228]	; (8002cc8 <sensor_data_display+0x478>)
 8002be4:	21dc      	movs	r1, #220	; 0xdc
 8002be6:	20a8      	movs	r0, #168	; 0xa8
 8002be8:	f7ff f9a4 	bl	8001f34 <lcd_ShowStr>


		sensor_data_send_serial(
				sensor_GetVoltage()*1000,
 8002bec:	f7ff fc4c 	bl	8002488 <sensor_GetVoltage>
 8002bf0:	eef0 7a40 	vmov.f32	s15, s0
		sensor_data_send_serial(
 8002bf4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002ccc <sensor_data_display+0x47c>
 8002bf8:	ee27 8a87 	vmul.f32	s16, s15, s14
				sensor_GetCurrent()/100,
 8002bfc:	f7ff fc80 	bl	8002500 <sensor_GetCurrent>
 8002c00:	eef0 7a40 	vmov.f32	s15, s0
		sensor_data_send_serial(
 8002c04:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002cd0 <sensor_data_display+0x480>
 8002c08:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8002c0c:	f7ff fc24 	bl	8002458 <sensor_GetLight>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fd3c 	bl	8002690 <light_status>
 8002c18:	4604      	mov	r4, r0
 8002c1a:	f7ff fc29 	bl	8002470 <sensor_GetPotentiometer>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fd57 	bl	80026d4 <humid_simulation>
 8002c26:	eeb0 9a40 	vmov.f32	s18, s0
 8002c2a:	f7ff fcc5 	bl	80025b8 <sensor_GetTemperature>
 8002c2e:	eef0 7a40 	vmov.f32	s15, s0
 8002c32:	eeb0 2a67 	vmov.f32	s4, s15
 8002c36:	eef0 1a49 	vmov.f32	s3, s18
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	ed97 1a01 	vldr	s2, [r7, #4]
 8002c40:	eef0 0a68 	vmov.f32	s1, s17
 8002c44:	eeb0 0a48 	vmov.f32	s0, s16
 8002c48:	f7ff fd68 	bl	800271c <sensor_data_send_serial>
				humid_simulation(sensor_GetPotentiometer()),
				sensor_GetTemperature()
				);


		if(humid_simulation(sensor_GetPotentiometer()) >= 70)
 8002c4c:	f7ff fc10 	bl	8002470 <sensor_GetPotentiometer>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fd3e 	bl	80026d4 <humid_simulation>
 8002c58:	eef0 7a40 	vmov.f32	s15, s0
 8002c5c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002cd4 <sensor_data_display+0x484>
 8002c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c68:	db25      	blt.n	8002cb6 <sensor_data_display+0x466>
		{
			if(flag_timer2[2]==1)
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <sensor_data_display+0x488>)
 8002c6c:	889b      	ldrh	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d124      	bne.n	8002cbc <sensor_data_display+0x46c>
			{
				buzzer_SetVolume(50);
 8002c72:	2032      	movs	r0, #50	; 0x32
 8002c74:	f7fe fa38 	bl	80010e8 <buzzer_SetVolume>
				flag_timer2[2] = 0;
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <sensor_data_display+0x488>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	809a      	strh	r2, [r3, #4]
				uart_Rs232SendNum(ds3231_hours);
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <sensor_data_display+0x48c>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fb06 	bl	8003294 <uart_Rs232SendNum>
				uart_Rs232SendString(":");
 8002c88:	4815      	ldr	r0, [pc, #84]	; (8002ce0 <sensor_data_display+0x490>)
 8002c8a:	f000 fae9 	bl	8003260 <uart_Rs232SendString>
				uart_Rs232SendNum(ds3231_min);
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <sensor_data_display+0x494>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 fafe 	bl	8003294 <uart_Rs232SendNum>
				uart_Rs232SendString(":");
 8002c98:	4811      	ldr	r0, [pc, #68]	; (8002ce0 <sensor_data_display+0x490>)
 8002c9a:	f000 fae1 	bl	8003260 <uart_Rs232SendString>
				uart_Rs232SendNum(ds3231_sec);
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <sensor_data_display+0x498>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 faf6 	bl	8003294 <uart_Rs232SendNum>
				uart_Rs232SendString("\n");
 8002ca8:	4810      	ldr	r0, [pc, #64]	; (8002cec <sensor_data_display+0x49c>)
 8002caa:	f000 fad9 	bl	8003260 <uart_Rs232SendString>
				uart_Rs232SendString("Alert High Humid");
 8002cae:	4810      	ldr	r0, [pc, #64]	; (8002cf0 <sensor_data_display+0x4a0>)
 8002cb0:	f000 fad6 	bl	8003260 <uart_Rs232SendString>
		{
			buzzer_SetVolume(0);
		}

	}
}
 8002cb4:	e002      	b.n	8002cbc <sensor_data_display+0x46c>
			buzzer_SetVolume(0);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fe fa16 	bl	80010e8 <buzzer_SetVolume>
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	ecbd 8b04 	vpop	{d8-d9}
 8002cc6:	bd90      	pop	{r4, r7, pc}
 8002cc8:	08009a48 	.word	0x08009a48
 8002ccc:	447a0000 	.word	0x447a0000
 8002cd0:	42c80000 	.word	0x42c80000
 8002cd4:	428c0000 	.word	0x428c0000
 8002cd8:	20000228 	.word	0x20000228
 8002cdc:	2000015b 	.word	0x2000015b
 8002ce0:	08009984 	.word	0x08009984
 8002ce4:	2000015c 	.word	0x2000015c
 8002ce8:	2000015d 	.word	0x2000015d
 8002cec:	08009980 	.word	0x08009980
 8002cf0:	08009a4c 	.word	0x08009a4c

08002cf4 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002cf8:	4802      	ldr	r0, [pc, #8]	; (8002d04 <timer_init+0x10>)
 8002cfa:	f004 f84b 	bl	8006d94 <HAL_TIM_Base_Start_IT>
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200002cc 	.word	0x200002cc

08002d08 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration, int tim2_arr_pos){
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	80fb      	strh	r3, [r7, #6]
	timer2_MUL[tim2_arr_pos] = duration/TIMER_CYCLE_2;
 8002d14:	490b      	ldr	r1, [pc, #44]	; (8002d44 <setTimer2+0x3c>)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	88fa      	ldrh	r2, [r7, #6]
 8002d1a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	timer2_counter[tim2_arr_pos] = timer2_MUL[tim2_arr_pos];
 8002d1e:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <setTimer2+0x3c>)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <setTimer2+0x40>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	flag_timer2[tim2_arr_pos] = 0;
 8002d2e:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <setTimer2+0x44>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2100      	movs	r1, #0
 8002d34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	20000258 	.word	0x20000258
 8002d48:	20000240 	.word	0x20000240
 8002d4c:	20000228 	.word	0x20000228

08002d50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d12d      	bne.n	8002dbe <HAL_TIM_PeriodElapsedCallback+0x6e>
		for(int i = 0; i < 12; i++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	e025      	b.n	8002db4 <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			if(timer2_counter[i] > 0){
 8002d68:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01c      	beq.n	8002dae <HAL_TIM_PeriodElapsedCallback+0x5e>
				timer2_counter[i]--;
 8002d74:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b299      	uxth	r1, r3
 8002d80:	4a11      	ldr	r2, [pc, #68]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(timer2_counter[i] == 0) {
 8002d88:	4a0f      	ldr	r2, [pc, #60]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10c      	bne.n	8002dae <HAL_TIM_PeriodElapsedCallback+0x5e>
					flag_timer2[i] = 1;
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2101      	movs	r1, #1
 8002d9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					timer2_counter[i] = timer2_MUL[i];
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002da6:	4a08      	ldr	r2, [pc, #32]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0; i < 12; i++)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3301      	adds	r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b0b      	cmp	r3, #11
 8002db8:	ddd6      	ble.n	8002d68 <HAL_TIM_PeriodElapsedCallback+0x18>
				}
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8002dba:	f7ff f91f 	bl	8001ffc <led7_Scan>
	}
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000240 	.word	0x20000240
 8002dcc:	20000228 	.word	0x20000228
 8002dd0:	20000258 	.word	0x20000258

08002dd4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002dd8:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <MX_SPI1_Init+0x64>)
 8002dda:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <MX_SPI1_Init+0x68>)
 8002ddc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <MX_SPI1_Init+0x64>)
 8002de0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002de4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <MX_SPI1_Init+0x64>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <MX_SPI1_Init+0x64>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <MX_SPI1_Init+0x64>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <MX_SPI1_Init+0x64>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <MX_SPI1_Init+0x64>)
 8002e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e06:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <MX_SPI1_Init+0x64>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <MX_SPI1_Init+0x64>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e12:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <MX_SPI1_Init+0x64>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <MX_SPI1_Init+0x64>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <MX_SPI1_Init+0x64>)
 8002e20:	220a      	movs	r2, #10
 8002e22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <MX_SPI1_Init+0x64>)
 8002e26:	f003 f979 	bl	800611c <HAL_SPI_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e30:	f7ff faf0 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000270 	.word	0x20000270
 8002e3c:	40013000 	.word	0x40013000

08002e40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a19      	ldr	r2, [pc, #100]	; (8002ec4 <HAL_SPI_MspInit+0x84>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d12b      	bne.n	8002eba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_SPI_MspInit+0x88>)
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	4a17      	ldr	r2, [pc, #92]	; (8002ec8 <HAL_SPI_MspInit+0x88>)
 8002e6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e70:	6453      	str	r3, [r2, #68]	; 0x44
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_SPI_MspInit+0x88>)
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_SPI_MspInit+0x88>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a10      	ldr	r2, [pc, #64]	; (8002ec8 <HAL_SPI_MspInit+0x88>)
 8002e88:	f043 0302 	orr.w	r3, r3, #2
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_SPI_MspInit+0x88>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002e9a:	2338      	movs	r3, #56	; 0x38
 8002e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eaa:	2305      	movs	r3, #5
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eae:	f107 0314 	add.w	r3, r7, #20
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4805      	ldr	r0, [pc, #20]	; (8002ecc <HAL_SPI_MspInit+0x8c>)
 8002eb6:	f001 fcdb 	bl	8004870 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002eba:	bf00      	nop
 8002ebc:	3728      	adds	r7, #40	; 0x28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40013000 	.word	0x40013000
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40020400 	.word	0x40020400

08002ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_MspInit+0x4c>)
 8002edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ede:	4a0f      	ldr	r2, [pc, #60]	; (8002f1c <HAL_MspInit+0x4c>)
 8002ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_MspInit+0x4c>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <HAL_MspInit+0x4c>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <HAL_MspInit+0x4c>)
 8002efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_MspInit+0x4c>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800

08002f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <NMI_Handler+0x4>

08002f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f2a:	e7fe      	b.n	8002f2a <HardFault_Handler+0x4>

08002f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f30:	e7fe      	b.n	8002f30 <MemManage_Handler+0x4>

08002f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f36:	e7fe      	b.n	8002f36 <BusFault_Handler+0x4>

08002f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f3c:	e7fe      	b.n	8002f3c <UsageFault_Handler+0x4>

08002f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f6c:	f000 fb16 	bl	800359c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f78:	4802      	ldr	r0, [pc, #8]	; (8002f84 <TIM2_IRQHandler+0x10>)
 8002f7a:	f004 f89d 	bl	80070b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	200002cc 	.word	0x200002cc

08002f88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f8c:	4802      	ldr	r0, [pc, #8]	; (8002f98 <USART1_IRQHandler+0x10>)
 8002f8e:	f004 fffd 	bl	8007f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200003c4 	.word	0x200003c4

08002f9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fa0:	4802      	ldr	r0, [pc, #8]	; (8002fac <DMA2_Stream0_IRQHandler+0x10>)
 8002fa2:	f001 f9fb 	bl	800439c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200000d0 	.word	0x200000d0

08002fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <_sbrk+0x5c>)
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <_sbrk+0x60>)
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <_sbrk+0x64>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <_sbrk+0x64>)
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <_sbrk+0x68>)
 8002fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <_sbrk+0x64>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d207      	bcs.n	8002ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fe0:	f006 f830 	bl	8009044 <__errno>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	220c      	movs	r2, #12
 8002fe8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
 8002fee:	e009      	b.n	8003004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <_sbrk+0x64>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <_sbrk+0x64>)
 8003000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003002:	68fb      	ldr	r3, [r7, #12]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20020000 	.word	0x20020000
 8003010:	00000400 	.word	0x00000400
 8003014:	200002c8 	.word	0x200002c8
 8003018:	20000558 	.word	0x20000558

0800301c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <SystemInit+0x20>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	4a05      	ldr	r2, [pc, #20]	; (800303c <SystemInit+0x20>)
 8003028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800302c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003046:	f107 0308 	add.w	r3, r7, #8
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	605a      	str	r2, [r3, #4]
 8003050:	609a      	str	r2, [r3, #8]
 8003052:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003054:	463b      	mov	r3, r7
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800305c:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <MX_TIM2_Init+0x94>)
 800305e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003062:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <MX_TIM2_Init+0x94>)
 8003066:	f240 3247 	movw	r2, #839	; 0x347
 800306a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <MX_TIM2_Init+0x94>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003072:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <MX_TIM2_Init+0x94>)
 8003074:	2263      	movs	r2, #99	; 0x63
 8003076:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003078:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <MX_TIM2_Init+0x94>)
 800307a:	2200      	movs	r2, #0
 800307c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <MX_TIM2_Init+0x94>)
 8003080:	2200      	movs	r2, #0
 8003082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003084:	4813      	ldr	r0, [pc, #76]	; (80030d4 <MX_TIM2_Init+0x94>)
 8003086:	f003 fe35 	bl	8006cf4 <HAL_TIM_Base_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003090:	f7ff f9c0 	bl	8002414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003098:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800309a:	f107 0308 	add.w	r3, r7, #8
 800309e:	4619      	mov	r1, r3
 80030a0:	480c      	ldr	r0, [pc, #48]	; (80030d4 <MX_TIM2_Init+0x94>)
 80030a2:	f004 f9d3 	bl	800744c <HAL_TIM_ConfigClockSource>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80030ac:	f7ff f9b2 	bl	8002414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b0:	2300      	movs	r3, #0
 80030b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030b8:	463b      	mov	r3, r7
 80030ba:	4619      	mov	r1, r3
 80030bc:	4805      	ldr	r0, [pc, #20]	; (80030d4 <MX_TIM2_Init+0x94>)
 80030be:	f004 fdc5 	bl	8007c4c <HAL_TIMEx_MasterConfigSynchronization>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80030c8:	f7ff f9a4 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030cc:	bf00      	nop
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	200002cc 	.word	0x200002cc

080030d8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
 80030ec:	615a      	str	r2, [r3, #20]
 80030ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80030f0:	4b1e      	ldr	r3, [pc, #120]	; (800316c <MX_TIM13_Init+0x94>)
 80030f2:	4a1f      	ldr	r2, [pc, #124]	; (8003170 <MX_TIM13_Init+0x98>)
 80030f4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <MX_TIM13_Init+0x94>)
 80030f8:	f240 3247 	movw	r2, #839	; 0x347
 80030fc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <MX_TIM13_Init+0x94>)
 8003100:	2200      	movs	r2, #0
 8003102:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8003104:	4b19      	ldr	r3, [pc, #100]	; (800316c <MX_TIM13_Init+0x94>)
 8003106:	2263      	movs	r2, #99	; 0x63
 8003108:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800310a:	4b18      	ldr	r3, [pc, #96]	; (800316c <MX_TIM13_Init+0x94>)
 800310c:	2200      	movs	r2, #0
 800310e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003110:	4b16      	ldr	r3, [pc, #88]	; (800316c <MX_TIM13_Init+0x94>)
 8003112:	2200      	movs	r2, #0
 8003114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003116:	4815      	ldr	r0, [pc, #84]	; (800316c <MX_TIM13_Init+0x94>)
 8003118:	f003 fdec 	bl	8006cf4 <HAL_TIM_Base_Init>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8003122:	f7ff f977 	bl	8002414 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003126:	4811      	ldr	r0, [pc, #68]	; (800316c <MX_TIM13_Init+0x94>)
 8003128:	f003 fea4 	bl	8006e74 <HAL_TIM_PWM_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8003132:	f7ff f96f 	bl	8002414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003136:	2360      	movs	r3, #96	; 0x60
 8003138:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	2200      	movs	r2, #0
 800314a:	4619      	mov	r1, r3
 800314c:	4807      	ldr	r0, [pc, #28]	; (800316c <MX_TIM13_Init+0x94>)
 800314e:	f004 f8bb 	bl	80072c8 <HAL_TIM_PWM_ConfigChannel>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003158:	f7ff f95c 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800315c:	4803      	ldr	r0, [pc, #12]	; (800316c <MX_TIM13_Init+0x94>)
 800315e:	f000 f845 	bl	80031ec <HAL_TIM_MspPostInit>

}
 8003162:	bf00      	nop
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000314 	.word	0x20000314
 8003170:	40001c00 	.word	0x40001c00

08003174 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d116      	bne.n	80031b4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_TIM_Base_MspInit+0x70>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <HAL_TIM_Base_MspInit+0x70>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
 8003196:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <HAL_TIM_Base_MspInit+0x70>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	201c      	movs	r0, #28
 80031a8:	f000 ff29 	bl	8003ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031ac:	201c      	movs	r0, #28
 80031ae:	f000 ff42 	bl	8004036 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80031b2:	e012      	b.n	80031da <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <HAL_TIM_Base_MspInit+0x74>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d10d      	bne.n	80031da <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <HAL_TIM_Base_MspInit+0x70>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <HAL_TIM_Base_MspInit+0x70>)
 80031c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031cc:	6413      	str	r3, [r2, #64]	; 0x40
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_TIM_Base_MspInit+0x70>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
}
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40001c00 	.word	0x40001c00

080031ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 030c 	add.w	r3, r7, #12
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a12      	ldr	r2, [pc, #72]	; (8003254 <HAL_TIM_MspPostInit+0x68>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d11e      	bne.n	800324c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_TIM_MspPostInit+0x6c>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a10      	ldr	r2, [pc, #64]	; (8003258 <HAL_TIM_MspPostInit+0x6c>)
 8003218:	f043 0320 	orr.w	r3, r3, #32
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <HAL_TIM_MspPostInit+0x6c>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0320 	and.w	r3, r3, #32
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800322a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800322e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800323c:	2309      	movs	r3, #9
 800323e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003240:	f107 030c 	add.w	r3, r7, #12
 8003244:	4619      	mov	r1, r3
 8003246:	4805      	ldr	r0, [pc, #20]	; (800325c <HAL_TIM_MspPostInit+0x70>)
 8003248:	f001 fb12 	bl	8004870 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800324c:	bf00      	nop
 800324e:	3720      	adds	r7, #32
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40001c00 	.word	0x40001c00
 8003258:	40023800 	.word	0x40023800
 800325c:	40021400 	.word	0x40021400

08003260 <uart_Rs232SendString>:

void uart_init_rs232(){
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
}

void uart_Rs232SendString(uint8_t* str){
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4907      	ldr	r1, [pc, #28]	; (8003288 <uart_Rs232SendString+0x28>)
 800326c:	4807      	ldr	r0, [pc, #28]	; (800328c <uart_Rs232SendString+0x2c>)
 800326e:	f005 fec1 	bl	8008ff4 <siprintf>
 8003272:	4603      	mov	r3, r0
 8003274:	b29a      	uxth	r2, r3
 8003276:	230a      	movs	r3, #10
 8003278:	4904      	ldr	r1, [pc, #16]	; (800328c <uart_Rs232SendString+0x2c>)
 800327a:	4805      	ldr	r0, [pc, #20]	; (8003290 <uart_Rs232SendString+0x30>)
 800327c:	f004 fdc3 	bl	8007e06 <HAL_UART_Transmit>
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	08009a60 	.word	0x08009a60
 800328c:	20000360 	.word	0x20000360
 8003290:	200003c4 	.word	0x200003c4

08003294 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	if(num == 0){
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 80032a2:	4824      	ldr	r0, [pc, #144]	; (8003334 <uart_Rs232SendNum+0xa0>)
 80032a4:	f7ff ffdc 	bl	8003260 <uart_Rs232SendString>
		return;
 80032a8:	e040      	b.n	800332c <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 80032ae:	230a      	movs	r3, #10
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	e038      	b.n	8003326 <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	4619      	mov	r1, r3
 80032ba:	200a      	movs	r0, #10
 80032bc:	f7fe fb94 	bl	80019e8 <mypow>
 80032c0:	4603      	mov	r3, r0
 80032c2:	461a      	mov	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d315      	bcc.n	80032f6 <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 80032ca:	2301      	movs	r3, #1
 80032cc:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	4619      	mov	r1, r3
 80032d4:	200a      	movs	r0, #10
 80032d6:	f7fe fb87 	bl	80019e8 <mypow>
 80032da:	4603      	mov	r3, r0
 80032dc:	461a      	mov	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80032e4:	461a      	mov	r2, r3
 80032e6:	4914      	ldr	r1, [pc, #80]	; (8003338 <uart_Rs232SendNum+0xa4>)
 80032e8:	4814      	ldr	r0, [pc, #80]	; (800333c <uart_Rs232SendNum+0xa8>)
 80032ea:	f005 fe83 	bl	8008ff4 <siprintf>
            uart_Rs232SendString(msg);
 80032ee:	4813      	ldr	r0, [pc, #76]	; (800333c <uart_Rs232SendNum+0xa8>)
 80032f0:	f7ff ffb6 	bl	8003260 <uart_Rs232SendString>
 80032f4:	e005      	b.n	8003302 <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 80032fc:	480d      	ldr	r0, [pc, #52]	; (8003334 <uart_Rs232SendNum+0xa0>)
 80032fe:	f7ff ffaf 	bl	8003260 <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	3b01      	subs	r3, #1
 8003306:	4619      	mov	r1, r3
 8003308:	200a      	movs	r0, #10
 800330a:	f7fe fb6d 	bl	80019e8 <mypow>
 800330e:	4603      	mov	r3, r0
 8003310:	461a      	mov	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	fbb3 f1f2 	udiv	r1, r3, r2
 8003318:	fb01 f202 	mul.w	r2, r1, r2
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	3b01      	subs	r3, #1
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	dcc3      	bgt.n	80032b4 <uart_Rs232SendNum+0x20>
    }
}
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	08009a64 	.word	0x08009a64
 8003338:	08009a68 	.word	0x08009a68
 800333c:	20000360 	.word	0x20000360

08003340 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a08      	ldr	r2, [pc, #32]	; (8003370 <HAL_UART_RxCpltCallback+0x30>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d10a      	bne.n	8003368 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8003352:	230a      	movs	r3, #10
 8003354:	2201      	movs	r2, #1
 8003356:	4907      	ldr	r1, [pc, #28]	; (8003374 <HAL_UART_RxCpltCallback+0x34>)
 8003358:	4807      	ldr	r0, [pc, #28]	; (8003378 <HAL_UART_RxCpltCallback+0x38>)
 800335a:	f004 fd54 	bl	8007e06 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800335e:	2201      	movs	r2, #1
 8003360:	4904      	ldr	r1, [pc, #16]	; (8003374 <HAL_UART_RxCpltCallback+0x34>)
 8003362:	4805      	ldr	r0, [pc, #20]	; (8003378 <HAL_UART_RxCpltCallback+0x38>)
 8003364:	f004 fde1 	bl	8007f2a <HAL_UART_Receive_IT>
	}
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40011000 	.word	0x40011000
 8003374:	2000035c 	.word	0x2000035c
 8003378:	200003c4 	.word	0x200003c4

0800337c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 8003382:	4a12      	ldr	r2, [pc, #72]	; (80033cc <MX_USART1_UART_Init+0x50>)
 8003384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 8003388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800338c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800338e:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 8003396:	2200      	movs	r2, #0
 8003398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 800339c:	2200      	movs	r2, #0
 800339e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 80033a2:	220c      	movs	r2, #12
 80033a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033a6:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033b2:	4805      	ldr	r0, [pc, #20]	; (80033c8 <MX_USART1_UART_Init+0x4c>)
 80033b4:	f004 fcda 	bl	8007d6c <HAL_UART_Init>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80033be:	f7ff f829 	bl	8002414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	200003c4 	.word	0x200003c4
 80033cc:	40011000 	.word	0x40011000

080033d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	; 0x28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	f107 0314 	add.w	r3, r7, #20
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <HAL_UART_MspInit+0x94>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d134      	bne.n	800345c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <HAL_UART_MspInit+0x98>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fa:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <HAL_UART_MspInit+0x98>)
 80033fc:	f043 0310 	orr.w	r3, r3, #16
 8003400:	6453      	str	r3, [r2, #68]	; 0x44
 8003402:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_UART_MspInit+0x98>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	4b15      	ldr	r3, [pc, #84]	; (8003468 <HAL_UART_MspInit+0x98>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a14      	ldr	r2, [pc, #80]	; (8003468 <HAL_UART_MspInit+0x98>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_UART_MspInit+0x98>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800342a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800342e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003430:	2302      	movs	r3, #2
 8003432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003438:	2303      	movs	r3, #3
 800343a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800343c:	2307      	movs	r3, #7
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	4619      	mov	r1, r3
 8003446:	4809      	ldr	r0, [pc, #36]	; (800346c <HAL_UART_MspInit+0x9c>)
 8003448:	f001 fa12 	bl	8004870 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800344c:	2200      	movs	r2, #0
 800344e:	2100      	movs	r1, #0
 8003450:	2025      	movs	r0, #37	; 0x25
 8003452:	f000 fdd4 	bl	8003ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003456:	2025      	movs	r0, #37	; 0x25
 8003458:	f000 fded 	bl	8004036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800345c:	bf00      	nop
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40011000 	.word	0x40011000
 8003468:	40023800 	.word	0x40023800
 800346c:	40020000 	.word	0x40020000

08003470 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	b2db      	uxtb	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	0092      	lsls	r2, r2, #2
 8003484:	4413      	add	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	b2da      	uxtb	r2, r3
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	b2db      	uxtb	r3, r3
 8003492:	4413      	add	r3, r2
 8003494:	b2db      	uxtb	r3, r3
}
 8003496:	4618      	mov	r0, r3
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034a8:	480d      	ldr	r0, [pc, #52]	; (80034e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034aa:	490e      	ldr	r1, [pc, #56]	; (80034e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034ac:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034b0:	e002      	b.n	80034b8 <LoopCopyDataInit>

080034b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034b6:	3304      	adds	r3, #4

080034b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034bc:	d3f9      	bcc.n	80034b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034be:	4a0b      	ldr	r2, [pc, #44]	; (80034ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034c0:	4c0b      	ldr	r4, [pc, #44]	; (80034f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034c4:	e001      	b.n	80034ca <LoopFillZerobss>

080034c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034c8:	3204      	adds	r2, #4

080034ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034cc:	d3fb      	bcc.n	80034c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034ce:	f7ff fda5 	bl	800301c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034d2:	f005 fdbd 	bl	8009050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034d6:	f7fe fe41 	bl	800215c <main>
  bx  lr    
 80034da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034e4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80034e8:	0800ca58 	.word	0x0800ca58
  ldr r2, =_sbss
 80034ec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80034f0:	20000554 	.word	0x20000554

080034f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034f4:	e7fe      	b.n	80034f4 <ADC_IRQHandler>
	...

080034f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034fc:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <HAL_Init+0x40>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a0d      	ldr	r2, [pc, #52]	; (8003538 <HAL_Init+0x40>)
 8003502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003506:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_Init+0x40>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <HAL_Init+0x40>)
 800350e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003512:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003514:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_Init+0x40>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a07      	ldr	r2, [pc, #28]	; (8003538 <HAL_Init+0x40>)
 800351a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003520:	2003      	movs	r0, #3
 8003522:	f000 fd61 	bl	8003fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003526:	200f      	movs	r0, #15
 8003528:	f000 f808 	bl	800353c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800352c:	f7ff fcd0 	bl	8002ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40023c00 	.word	0x40023c00

0800353c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003544:	4b12      	ldr	r3, [pc, #72]	; (8003590 <HAL_InitTick+0x54>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b12      	ldr	r3, [pc, #72]	; (8003594 <HAL_InitTick+0x58>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	4619      	mov	r1, r3
 800354e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003552:	fbb3 f3f1 	udiv	r3, r3, r1
 8003556:	fbb2 f3f3 	udiv	r3, r2, r3
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fd79 	bl	8004052 <HAL_SYSTICK_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e00e      	b.n	8003588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b0f      	cmp	r3, #15
 800356e:	d80a      	bhi.n	8003586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003570:	2200      	movs	r2, #0
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	f04f 30ff 	mov.w	r0, #4294967295
 8003578:	f000 fd41 	bl	8003ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800357c:	4a06      	ldr	r2, [pc, #24]	; (8003598 <HAL_InitTick+0x5c>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	e000      	b.n	8003588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
}
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000010 	.word	0x20000010
 8003594:	20000018 	.word	0x20000018
 8003598:	20000014 	.word	0x20000014

0800359c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_IncTick+0x20>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_IncTick+0x24>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4413      	add	r3, r2
 80035ac:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <HAL_IncTick+0x24>)
 80035ae:	6013      	str	r3, [r2, #0]
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20000018 	.word	0x20000018
 80035c0:	20000408 	.word	0x20000408

080035c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return uwTick;
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <HAL_GetTick+0x14>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	20000408 	.word	0x20000408

080035dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035e4:	f7ff ffee 	bl	80035c4 <HAL_GetTick>
 80035e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d005      	beq.n	8003602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <HAL_Delay+0x44>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003602:	bf00      	nop
 8003604:	f7ff ffde 	bl	80035c4 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	429a      	cmp	r2, r3
 8003612:	d8f7      	bhi.n	8003604 <HAL_Delay+0x28>
  {
  }
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000018 	.word	0x20000018

08003624 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e033      	b.n	80036a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fd fc3a 	bl	8000ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	d118      	bne.n	8003694 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800366a:	f023 0302 	bic.w	r3, r3, #2
 800366e:	f043 0202 	orr.w	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fa68 	bl	8003b4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	641a      	str	r2, [r3, #64]	; 0x40
 8003692:	e001      	b.n	8003698 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_Start_DMA+0x1e>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e0e9      	b.n	800389e <HAL_ADC_Start_DMA+0x1f2>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d018      	beq.n	8003712 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036f0:	4b6d      	ldr	r3, [pc, #436]	; (80038a8 <HAL_ADC_Start_DMA+0x1fc>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a6d      	ldr	r2, [pc, #436]	; (80038ac <HAL_ADC_Start_DMA+0x200>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	0c9a      	lsrs	r2, r3, #18
 80036fc:	4613      	mov	r3, r2
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4413      	add	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003704:	e002      	b.n	800370c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	3b01      	subs	r3, #1
 800370a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f9      	bne.n	8003706 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003720:	d107      	bne.n	8003732 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003730:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b01      	cmp	r3, #1
 800373e:	f040 80a1 	bne.w	8003884 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800376c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003780:	d106      	bne.n	8003790 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f023 0206 	bic.w	r2, r3, #6
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
 800378e:	e002      	b.n	8003796 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800379e:	4b44      	ldr	r3, [pc, #272]	; (80038b0 <HAL_ADC_Start_DMA+0x204>)
 80037a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	4a43      	ldr	r2, [pc, #268]	; (80038b4 <HAL_ADC_Start_DMA+0x208>)
 80037a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	4a42      	ldr	r2, [pc, #264]	; (80038b8 <HAL_ADC_Start_DMA+0x20c>)
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	4a41      	ldr	r2, [pc, #260]	; (80038bc <HAL_ADC_Start_DMA+0x210>)
 80037b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	334c      	adds	r3, #76	; 0x4c
 80037ee:	4619      	mov	r1, r3
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f000 fce8 	bl	80041c8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	2b00      	cmp	r3, #0
 8003802:	d12a      	bne.n	800385a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2d      	ldr	r2, [pc, #180]	; (80038c0 <HAL_ADC_Start_DMA+0x214>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d015      	beq.n	800383a <HAL_ADC_Start_DMA+0x18e>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2c      	ldr	r2, [pc, #176]	; (80038c4 <HAL_ADC_Start_DMA+0x218>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d105      	bne.n	8003824 <HAL_ADC_Start_DMA+0x178>
 8003818:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <HAL_ADC_Start_DMA+0x204>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a27      	ldr	r2, [pc, #156]	; (80038c8 <HAL_ADC_Start_DMA+0x21c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d136      	bne.n	800389c <HAL_ADC_Start_DMA+0x1f0>
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <HAL_ADC_Start_DMA+0x204>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d130      	bne.n	800389c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d129      	bne.n	800389c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	e020      	b.n	800389c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <HAL_ADC_Start_DMA+0x214>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d11b      	bne.n	800389c <HAL_ADC_Start_DMA+0x1f0>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d114      	bne.n	800389c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003880:	609a      	str	r2, [r3, #8]
 8003882:	e00b      	b.n	800389c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	f043 0210 	orr.w	r2, r3, #16
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003894:	f043 0201 	orr.w	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000010 	.word	0x20000010
 80038ac:	431bde83 	.word	0x431bde83
 80038b0:	40012300 	.word	0x40012300
 80038b4:	08003d45 	.word	0x08003d45
 80038b8:	08003dff 	.word	0x08003dff
 80038bc:	08003e1b 	.word	0x08003e1b
 80038c0:	40012000 	.word	0x40012000
 80038c4:	40012100 	.word	0x40012100
 80038c8:	40012200 	.word	0x40012200

080038cc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x1c>
 8003920:	2302      	movs	r3, #2
 8003922:	e105      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x228>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b09      	cmp	r3, #9
 8003932:	d925      	bls.n	8003980 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68d9      	ldr	r1, [r3, #12]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	4613      	mov	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4413      	add	r3, r2
 8003948:	3b1e      	subs	r3, #30
 800394a:	2207      	movs	r2, #7
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43da      	mvns	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	400a      	ands	r2, r1
 8003958:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68d9      	ldr	r1, [r3, #12]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	4618      	mov	r0, r3
 800396c:	4603      	mov	r3, r0
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4403      	add	r3, r0
 8003972:	3b1e      	subs	r3, #30
 8003974:	409a      	lsls	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	e022      	b.n	80039c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6919      	ldr	r1, [r3, #16]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	2207      	movs	r2, #7
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43da      	mvns	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	400a      	ands	r2, r1
 80039a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6919      	ldr	r1, [r3, #16]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	4618      	mov	r0, r3
 80039b6:	4603      	mov	r3, r0
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	4403      	add	r3, r0
 80039bc:	409a      	lsls	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d824      	bhi.n	8003a18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	3b05      	subs	r3, #5
 80039e0:	221f      	movs	r2, #31
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43da      	mvns	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	400a      	ands	r2, r1
 80039ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	4618      	mov	r0, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	3b05      	subs	r3, #5
 8003a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	635a      	str	r2, [r3, #52]	; 0x34
 8003a16:	e04c      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	d824      	bhi.n	8003a6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	3b23      	subs	r3, #35	; 0x23
 8003a32:	221f      	movs	r2, #31
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43da      	mvns	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	400a      	ands	r2, r1
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	3b23      	subs	r3, #35	; 0x23
 8003a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
 8003a68:	e023      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	3b41      	subs	r3, #65	; 0x41
 8003a7c:	221f      	movs	r2, #31
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43da      	mvns	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	400a      	ands	r2, r1
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	4618      	mov	r0, r3
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3b41      	subs	r3, #65	; 0x41
 8003aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ab2:	4b22      	ldr	r3, [pc, #136]	; (8003b3c <HAL_ADC_ConfigChannel+0x234>)
 8003ab4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a21      	ldr	r2, [pc, #132]	; (8003b40 <HAL_ADC_ConfigChannel+0x238>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d109      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x1cc>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b12      	cmp	r3, #18
 8003ac6:	d105      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <HAL_ADC_ConfigChannel+0x238>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d123      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x21e>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d003      	beq.n	8003aee <HAL_ADC_ConfigChannel+0x1e6>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b11      	cmp	r3, #17
 8003aec:	d11b      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b10      	cmp	r3, #16
 8003b00:	d111      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <HAL_ADC_ConfigChannel+0x23c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a10      	ldr	r2, [pc, #64]	; (8003b48 <HAL_ADC_ConfigChannel+0x240>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	0c9a      	lsrs	r2, r3, #18
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b18:	e002      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f9      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	40012300 	.word	0x40012300
 8003b40:	40012000 	.word	0x40012000
 8003b44:	20000010 	.word	0x20000010
 8003b48:	431bde83 	.word	0x431bde83

08003b4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b54:	4b79      	ldr	r3, [pc, #484]	; (8003d3c <ADC_Init+0x1f0>)
 8003b56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	021a      	lsls	r2, r3, #8
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ba4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6899      	ldr	r1, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <ADC_Init+0x1f4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d022      	beq.n	8003c2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bf2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6899      	ldr	r1, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6899      	ldr	r1, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	e00f      	b.n	8003c4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0202 	bic.w	r2, r2, #2
 8003c58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6899      	ldr	r1, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	7e1b      	ldrb	r3, [r3, #24]
 8003c64:	005a      	lsls	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01b      	beq.n	8003cb0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6859      	ldr	r1, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	035a      	lsls	r2, r3, #13
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	e007      	b.n	8003cc0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	051a      	lsls	r2, r3, #20
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6899      	ldr	r1, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d02:	025a      	lsls	r2, r3, #9
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6899      	ldr	r1, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	029a      	lsls	r2, r3, #10
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	609a      	str	r2, [r3, #8]
}
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	40012300 	.word	0x40012300
 8003d40:	0f000001 	.word	0x0f000001

08003d44 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d13c      	bne.n	8003dd8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d12b      	bne.n	8003dd0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d127      	bne.n	8003dd0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d006      	beq.n	8003d9c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d119      	bne.n	8003dd0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0220 	bic.w	r2, r2, #32
 8003daa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f043 0201 	orr.w	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7ff fd7b 	bl	80038cc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003dd6:	e00e      	b.n	8003df6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff fd85 	bl	80038f4 <HAL_ADC_ErrorCallback>
}
 8003dea:	e004      	b.n	8003df6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	4798      	blx	r3
}
 8003df6:	bf00      	nop
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff fd67 	bl	80038e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2240      	movs	r2, #64	; 0x40
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	f043 0204 	orr.w	r2, r3, #4
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f7ff fd5a 	bl	80038f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e40:	bf00      	nop
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <__NVIC_SetPriorityGrouping+0x44>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e64:	4013      	ands	r3, r2
 8003e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e7a:	4a04      	ldr	r2, [pc, #16]	; (8003e8c <__NVIC_SetPriorityGrouping+0x44>)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	60d3      	str	r3, [r2, #12]
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	f003 0307 	and.w	r3, r3, #7
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	db0b      	blt.n	8003ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	f003 021f 	and.w	r2, r3, #31
 8003ec4:	4907      	ldr	r1, [pc, #28]	; (8003ee4 <__NVIC_EnableIRQ+0x38>)
 8003ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	2001      	movs	r0, #1
 8003ece:	fa00 f202 	lsl.w	r2, r0, r2
 8003ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	e000e100 	.word	0xe000e100

08003ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	6039      	str	r1, [r7, #0]
 8003ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	db0a      	blt.n	8003f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	490c      	ldr	r1, [pc, #48]	; (8003f34 <__NVIC_SetPriority+0x4c>)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	0112      	lsls	r2, r2, #4
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f10:	e00a      	b.n	8003f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	4908      	ldr	r1, [pc, #32]	; (8003f38 <__NVIC_SetPriority+0x50>)
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	3b04      	subs	r3, #4
 8003f20:	0112      	lsls	r2, r2, #4
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	440b      	add	r3, r1
 8003f26:	761a      	strb	r2, [r3, #24]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	e000e100 	.word	0xe000e100
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b089      	sub	sp, #36	; 0x24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f1c3 0307 	rsb	r3, r3, #7
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	bf28      	it	cs
 8003f5a:	2304      	movcs	r3, #4
 8003f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3304      	adds	r3, #4
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	d902      	bls.n	8003f6c <NVIC_EncodePriority+0x30>
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3b03      	subs	r3, #3
 8003f6a:	e000      	b.n	8003f6e <NVIC_EncodePriority+0x32>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43da      	mvns	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	401a      	ands	r2, r3
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f84:	f04f 31ff 	mov.w	r1, #4294967295
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8e:	43d9      	mvns	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f94:	4313      	orrs	r3, r2
         );
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3724      	adds	r7, #36	; 0x24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fb4:	d301      	bcc.n	8003fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e00f      	b.n	8003fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <SysTick_Config+0x40>)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fc2:	210f      	movs	r1, #15
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	f7ff ff8e 	bl	8003ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <SysTick_Config+0x40>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fd2:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <SysTick_Config+0x40>)
 8003fd4:	2207      	movs	r2, #7
 8003fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	e000e010 	.word	0xe000e010

08003fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ff29 	bl	8003e48 <__NVIC_SetPriorityGrouping>
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af00      	add	r7, sp, #0
 8004004:	4603      	mov	r3, r0
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004010:	f7ff ff3e 	bl	8003e90 <__NVIC_GetPriorityGrouping>
 8004014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	6978      	ldr	r0, [r7, #20]
 800401c:	f7ff ff8e 	bl	8003f3c <NVIC_EncodePriority>
 8004020:	4602      	mov	r2, r0
 8004022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004026:	4611      	mov	r1, r2
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff5d 	bl	8003ee8 <__NVIC_SetPriority>
}
 800402e:	bf00      	nop
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ff31 	bl	8003eac <__NVIC_EnableIRQ>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ffa2 	bl	8003fa4 <SysTick_Config>
 8004060:	4603      	mov	r3, r0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004078:	f7ff faa4 	bl	80035c4 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e099      	b.n	80041bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040a8:	e00f      	b.n	80040ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040aa:	f7ff fa8b 	bl	80035c4 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d908      	bls.n	80040ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2220      	movs	r2, #32
 80040bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2203      	movs	r2, #3
 80040c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e078      	b.n	80041bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1e8      	bne.n	80040aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4b38      	ldr	r3, [pc, #224]	; (80041c4 <HAL_DMA_Init+0x158>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004102:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800410e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	2b04      	cmp	r3, #4
 8004122:	d107      	bne.n	8004134 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	4313      	orrs	r3, r2
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0307 	bic.w	r3, r3, #7
 800414a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	2b04      	cmp	r3, #4
 800415c:	d117      	bne.n	800418e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00e      	beq.n	800418e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fb01 	bl	8004778 <DMA_CheckFifoParam>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2240      	movs	r2, #64	; 0x40
 8004180:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800418a:	2301      	movs	r3, #1
 800418c:	e016      	b.n	80041bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fab8 	bl	800470c <DMA_CalcBaseAndBitshift>
 800419c:	4603      	mov	r3, r0
 800419e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	223f      	movs	r2, #63	; 0x3f
 80041a6:	409a      	lsls	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	f010803f 	.word	0xf010803f

080041c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_DMA_Start_IT+0x26>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e040      	b.n	8004270 <HAL_DMA_Start_IT+0xa8>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d12f      	bne.n	8004262 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2202      	movs	r2, #2
 8004206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 fa4a 	bl	80046b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	223f      	movs	r2, #63	; 0x3f
 8004222:	409a      	lsls	r2, r3
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0216 	orr.w	r2, r2, #22
 8004236:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d007      	beq.n	8004250 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0208 	orr.w	r2, r2, #8
 800424e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	e005      	b.n	800426e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800426a:	2302      	movs	r3, #2
 800426c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800426e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004286:	f7ff f99d 	bl	80035c4 <HAL_GetTick>
 800428a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d008      	beq.n	80042aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e052      	b.n	8004350 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0216 	bic.w	r2, r2, #22
 80042b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695a      	ldr	r2, [r3, #20]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d103      	bne.n	80042da <HAL_DMA_Abort+0x62>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d007      	beq.n	80042ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0208 	bic.w	r2, r2, #8
 80042e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042fa:	e013      	b.n	8004324 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042fc:	f7ff f962 	bl	80035c4 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b05      	cmp	r3, #5
 8004308:	d90c      	bls.n	8004324 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2203      	movs	r2, #3
 8004314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e015      	b.n	8004350 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e4      	bne.n	80042fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004336:	223f      	movs	r2, #63	; 0x3f
 8004338:	409a      	lsls	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d004      	beq.n	8004376 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2280      	movs	r2, #128	; 0x80
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e00c      	b.n	8004390 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2205      	movs	r2, #5
 800437a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043a8:	4b8e      	ldr	r3, [pc, #568]	; (80045e4 <HAL_DMA_IRQHandler+0x248>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a8e      	ldr	r2, [pc, #568]	; (80045e8 <HAL_DMA_IRQHandler+0x24c>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	0a9b      	lsrs	r3, r3, #10
 80043b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c6:	2208      	movs	r2, #8
 80043c8:	409a      	lsls	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d01a      	beq.n	8004408 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d013      	beq.n	8004408 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0204 	bic.w	r2, r2, #4
 80043ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f4:	2208      	movs	r2, #8
 80043f6:	409a      	lsls	r2, r3
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	f043 0201 	orr.w	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	2201      	movs	r2, #1
 800440e:	409a      	lsls	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d012      	beq.n	800443e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00b      	beq.n	800443e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	2201      	movs	r2, #1
 800442c:	409a      	lsls	r2, r3
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004436:	f043 0202 	orr.w	r2, r3, #2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004442:	2204      	movs	r2, #4
 8004444:	409a      	lsls	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4013      	ands	r3, r2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d012      	beq.n	8004474 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00b      	beq.n	8004474 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	2204      	movs	r2, #4
 8004462:	409a      	lsls	r2, r3
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	f043 0204 	orr.w	r2, r3, #4
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004478:	2210      	movs	r2, #16
 800447a:	409a      	lsls	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4013      	ands	r3, r2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d043      	beq.n	800450c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d03c      	beq.n	800450c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004496:	2210      	movs	r2, #16
 8004498:	409a      	lsls	r2, r3
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d018      	beq.n	80044de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d108      	bne.n	80044cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d024      	beq.n	800450c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	4798      	blx	r3
 80044ca:	e01f      	b.n	800450c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01b      	beq.n	800450c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	4798      	blx	r3
 80044dc:	e016      	b.n	800450c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d107      	bne.n	80044fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0208 	bic.w	r2, r2, #8
 80044fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	2220      	movs	r2, #32
 8004512:	409a      	lsls	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 808f 	beq.w	800463c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8087 	beq.w	800463c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004532:	2220      	movs	r2, #32
 8004534:	409a      	lsls	r2, r3
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b05      	cmp	r3, #5
 8004544:	d136      	bne.n	80045b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0216 	bic.w	r2, r2, #22
 8004554:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004564:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d103      	bne.n	8004576 <HAL_DMA_IRQHandler+0x1da>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0208 	bic.w	r2, r2, #8
 8004584:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458a:	223f      	movs	r2, #63	; 0x3f
 800458c:	409a      	lsls	r2, r3
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d07e      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	4798      	blx	r3
        }
        return;
 80045b2:	e079      	b.n	80046a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01d      	beq.n	80045fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10d      	bne.n	80045ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d031      	beq.n	800463c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	4798      	blx	r3
 80045e0:	e02c      	b.n	800463c <HAL_DMA_IRQHandler+0x2a0>
 80045e2:	bf00      	nop
 80045e4:	20000010 	.word	0x20000010
 80045e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d023      	beq.n	800463c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
 80045fc:	e01e      	b.n	800463c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10f      	bne.n	800462c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0210 	bic.w	r2, r2, #16
 800461a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004640:	2b00      	cmp	r3, #0
 8004642:	d032      	beq.n	80046aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d022      	beq.n	8004696 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2205      	movs	r2, #5
 8004654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	3301      	adds	r3, #1
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	429a      	cmp	r2, r3
 8004672:	d307      	bcc.n	8004684 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f2      	bne.n	8004668 <HAL_DMA_IRQHandler+0x2cc>
 8004682:	e000      	b.n	8004686 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004684:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	4798      	blx	r3
 80046a6:	e000      	b.n	80046aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80046a8:	bf00      	nop
    }
  }
}
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b40      	cmp	r3, #64	; 0x40
 80046dc:	d108      	bne.n	80046f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046ee:	e007      	b.n	8004700 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	60da      	str	r2, [r3, #12]
}
 8004700:	bf00      	nop
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	3b10      	subs	r3, #16
 800471c:	4a14      	ldr	r2, [pc, #80]	; (8004770 <DMA_CalcBaseAndBitshift+0x64>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	091b      	lsrs	r3, r3, #4
 8004724:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004726:	4a13      	ldr	r2, [pc, #76]	; (8004774 <DMA_CalcBaseAndBitshift+0x68>)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b03      	cmp	r3, #3
 8004738:	d909      	bls.n	800474e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004742:	f023 0303 	bic.w	r3, r3, #3
 8004746:	1d1a      	adds	r2, r3, #4
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	659a      	str	r2, [r3, #88]	; 0x58
 800474c:	e007      	b.n	800475e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004756:	f023 0303 	bic.w	r3, r3, #3
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	aaaaaaab 	.word	0xaaaaaaab
 8004774:	0800ca0c 	.word	0x0800ca0c

08004778 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d11f      	bne.n	80047d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b03      	cmp	r3, #3
 8004796:	d856      	bhi.n	8004846 <DMA_CheckFifoParam+0xce>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <DMA_CheckFifoParam+0x28>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047b1 	.word	0x080047b1
 80047a4:	080047c3 	.word	0x080047c3
 80047a8:	080047b1 	.word	0x080047b1
 80047ac:	08004847 	.word	0x08004847
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d046      	beq.n	800484a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c0:	e043      	b.n	800484a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047ca:	d140      	bne.n	800484e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d0:	e03d      	b.n	800484e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047da:	d121      	bne.n	8004820 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d837      	bhi.n	8004852 <DMA_CheckFifoParam+0xda>
 80047e2:	a201      	add	r2, pc, #4	; (adr r2, 80047e8 <DMA_CheckFifoParam+0x70>)
 80047e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e8:	080047f9 	.word	0x080047f9
 80047ec:	080047ff 	.word	0x080047ff
 80047f0:	080047f9 	.word	0x080047f9
 80047f4:	08004811 	.word	0x08004811
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	73fb      	strb	r3, [r7, #15]
      break;
 80047fc:	e030      	b.n	8004860 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d025      	beq.n	8004856 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800480e:	e022      	b.n	8004856 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004818:	d11f      	bne.n	800485a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800481e:	e01c      	b.n	800485a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d903      	bls.n	800482e <DMA_CheckFifoParam+0xb6>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d003      	beq.n	8004834 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800482c:	e018      	b.n	8004860 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
      break;
 8004832:	e015      	b.n	8004860 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00e      	beq.n	800485e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
      break;
 8004844:	e00b      	b.n	800485e <DMA_CheckFifoParam+0xe6>
      break;
 8004846:	bf00      	nop
 8004848:	e00a      	b.n	8004860 <DMA_CheckFifoParam+0xe8>
      break;
 800484a:	bf00      	nop
 800484c:	e008      	b.n	8004860 <DMA_CheckFifoParam+0xe8>
      break;
 800484e:	bf00      	nop
 8004850:	e006      	b.n	8004860 <DMA_CheckFifoParam+0xe8>
      break;
 8004852:	bf00      	nop
 8004854:	e004      	b.n	8004860 <DMA_CheckFifoParam+0xe8>
      break;
 8004856:	bf00      	nop
 8004858:	e002      	b.n	8004860 <DMA_CheckFifoParam+0xe8>
      break;   
 800485a:	bf00      	nop
 800485c:	e000      	b.n	8004860 <DMA_CheckFifoParam+0xe8>
      break;
 800485e:	bf00      	nop
    }
  } 
  
  return status; 
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop

08004870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004870:	b480      	push	{r7}
 8004872:	b089      	sub	sp, #36	; 0x24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004882:	2300      	movs	r3, #0
 8004884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004886:	2300      	movs	r3, #0
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	e16b      	b.n	8004b64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800488c:	2201      	movs	r2, #1
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4013      	ands	r3, r2
 800489e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	f040 815a 	bne.w	8004b5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d005      	beq.n	80048c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d130      	bne.n	8004924 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	2203      	movs	r2, #3
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4013      	ands	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048f8:	2201      	movs	r2, #1
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4013      	ands	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 0201 	and.w	r2, r3, #1
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b03      	cmp	r3, #3
 800492e:	d017      	beq.n	8004960 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	2203      	movs	r2, #3
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4013      	ands	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4313      	orrs	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d123      	bne.n	80049b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	08da      	lsrs	r2, r3, #3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3208      	adds	r2, #8
 8004974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004978:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	220f      	movs	r2, #15
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4013      	ands	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	08da      	lsrs	r2, r3, #3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3208      	adds	r2, #8
 80049ae:	69b9      	ldr	r1, [r7, #24]
 80049b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	2203      	movs	r2, #3
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4013      	ands	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 0203 	and.w	r2, r3, #3
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80b4 	beq.w	8004b5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	4b60      	ldr	r3, [pc, #384]	; (8004b7c <HAL_GPIO_Init+0x30c>)
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	4a5f      	ldr	r2, [pc, #380]	; (8004b7c <HAL_GPIO_Init+0x30c>)
 8004a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a04:	6453      	str	r3, [r2, #68]	; 0x44
 8004a06:	4b5d      	ldr	r3, [pc, #372]	; (8004b7c <HAL_GPIO_Init+0x30c>)
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a12:	4a5b      	ldr	r2, [pc, #364]	; (8004b80 <HAL_GPIO_Init+0x310>)
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	089b      	lsrs	r3, r3, #2
 8004a18:	3302      	adds	r3, #2
 8004a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	220f      	movs	r2, #15
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a52      	ldr	r2, [pc, #328]	; (8004b84 <HAL_GPIO_Init+0x314>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d02b      	beq.n	8004a96 <HAL_GPIO_Init+0x226>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a51      	ldr	r2, [pc, #324]	; (8004b88 <HAL_GPIO_Init+0x318>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d025      	beq.n	8004a92 <HAL_GPIO_Init+0x222>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a50      	ldr	r2, [pc, #320]	; (8004b8c <HAL_GPIO_Init+0x31c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01f      	beq.n	8004a8e <HAL_GPIO_Init+0x21e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a4f      	ldr	r2, [pc, #316]	; (8004b90 <HAL_GPIO_Init+0x320>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d019      	beq.n	8004a8a <HAL_GPIO_Init+0x21a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a4e      	ldr	r2, [pc, #312]	; (8004b94 <HAL_GPIO_Init+0x324>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <HAL_GPIO_Init+0x216>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a4d      	ldr	r2, [pc, #308]	; (8004b98 <HAL_GPIO_Init+0x328>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00d      	beq.n	8004a82 <HAL_GPIO_Init+0x212>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a4c      	ldr	r2, [pc, #304]	; (8004b9c <HAL_GPIO_Init+0x32c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d007      	beq.n	8004a7e <HAL_GPIO_Init+0x20e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a4b      	ldr	r2, [pc, #300]	; (8004ba0 <HAL_GPIO_Init+0x330>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d101      	bne.n	8004a7a <HAL_GPIO_Init+0x20a>
 8004a76:	2307      	movs	r3, #7
 8004a78:	e00e      	b.n	8004a98 <HAL_GPIO_Init+0x228>
 8004a7a:	2308      	movs	r3, #8
 8004a7c:	e00c      	b.n	8004a98 <HAL_GPIO_Init+0x228>
 8004a7e:	2306      	movs	r3, #6
 8004a80:	e00a      	b.n	8004a98 <HAL_GPIO_Init+0x228>
 8004a82:	2305      	movs	r3, #5
 8004a84:	e008      	b.n	8004a98 <HAL_GPIO_Init+0x228>
 8004a86:	2304      	movs	r3, #4
 8004a88:	e006      	b.n	8004a98 <HAL_GPIO_Init+0x228>
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e004      	b.n	8004a98 <HAL_GPIO_Init+0x228>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	e002      	b.n	8004a98 <HAL_GPIO_Init+0x228>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <HAL_GPIO_Init+0x228>
 8004a96:	2300      	movs	r3, #0
 8004a98:	69fa      	ldr	r2, [r7, #28]
 8004a9a:	f002 0203 	and.w	r2, r2, #3
 8004a9e:	0092      	lsls	r2, r2, #2
 8004aa0:	4093      	lsls	r3, r2
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004aa8:	4935      	ldr	r1, [pc, #212]	; (8004b80 <HAL_GPIO_Init+0x310>)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	089b      	lsrs	r3, r3, #2
 8004aae:	3302      	adds	r3, #2
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ab6:	4b3b      	ldr	r3, [pc, #236]	; (8004ba4 <HAL_GPIO_Init+0x334>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	43db      	mvns	r3, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ada:	4a32      	ldr	r2, [pc, #200]	; (8004ba4 <HAL_GPIO_Init+0x334>)
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ae0:	4b30      	ldr	r3, [pc, #192]	; (8004ba4 <HAL_GPIO_Init+0x334>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4013      	ands	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b04:	4a27      	ldr	r2, [pc, #156]	; (8004ba4 <HAL_GPIO_Init+0x334>)
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b0a:	4b26      	ldr	r3, [pc, #152]	; (8004ba4 <HAL_GPIO_Init+0x334>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	43db      	mvns	r3, r3
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	4013      	ands	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ba4 <HAL_GPIO_Init+0x334>)
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b34:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <HAL_GPIO_Init+0x334>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4013      	ands	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b58:	4a12      	ldr	r2, [pc, #72]	; (8004ba4 <HAL_GPIO_Init+0x334>)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	3301      	adds	r3, #1
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b0f      	cmp	r3, #15
 8004b68:	f67f ae90 	bls.w	800488c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	3724      	adds	r7, #36	; 0x24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	40013800 	.word	0x40013800
 8004b84:	40020000 	.word	0x40020000
 8004b88:	40020400 	.word	0x40020400
 8004b8c:	40020800 	.word	0x40020800
 8004b90:	40020c00 	.word	0x40020c00
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40021400 	.word	0x40021400
 8004b9c:	40021800 	.word	0x40021800
 8004ba0:	40021c00 	.word	0x40021c00
 8004ba4:	40013c00 	.word	0x40013c00

08004ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	807b      	strh	r3, [r7, #2]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bb8:	787b      	ldrb	r3, [r7, #1]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bbe:	887a      	ldrh	r2, [r7, #2]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bc4:	e003      	b.n	8004bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bc6:	887b      	ldrh	r3, [r7, #2]
 8004bc8:	041a      	lsls	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	619a      	str	r2, [r3, #24]
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	460b      	mov	r3, r1
 8004be4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bec:	887a      	ldrh	r2, [r7, #2]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	041a      	lsls	r2, r3, #16
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	43d9      	mvns	r1, r3
 8004bf8:	887b      	ldrh	r3, [r7, #2]
 8004bfa:	400b      	ands	r3, r1
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	619a      	str	r2, [r3, #24]
}
 8004c02:	bf00      	nop
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e12b      	b.n	8004e7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc fcf6 	bl	8001628 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2224      	movs	r2, #36	; 0x24
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c74:	f001 fa2a 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 8004c78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4a81      	ldr	r2, [pc, #516]	; (8004e84 <HAL_I2C_Init+0x274>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d807      	bhi.n	8004c94 <HAL_I2C_Init+0x84>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a80      	ldr	r2, [pc, #512]	; (8004e88 <HAL_I2C_Init+0x278>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	bf94      	ite	ls
 8004c8c:	2301      	movls	r3, #1
 8004c8e:	2300      	movhi	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	e006      	b.n	8004ca2 <HAL_I2C_Init+0x92>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4a7d      	ldr	r2, [pc, #500]	; (8004e8c <HAL_I2C_Init+0x27c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	bf94      	ite	ls
 8004c9c:	2301      	movls	r3, #1
 8004c9e:	2300      	movhi	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e0e7      	b.n	8004e7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4a78      	ldr	r2, [pc, #480]	; (8004e90 <HAL_I2C_Init+0x280>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	0c9b      	lsrs	r3, r3, #18
 8004cb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a6a      	ldr	r2, [pc, #424]	; (8004e84 <HAL_I2C_Init+0x274>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d802      	bhi.n	8004ce4 <HAL_I2C_Init+0xd4>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	e009      	b.n	8004cf8 <HAL_I2C_Init+0xe8>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cea:	fb02 f303 	mul.w	r3, r2, r3
 8004cee:	4a69      	ldr	r2, [pc, #420]	; (8004e94 <HAL_I2C_Init+0x284>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	495c      	ldr	r1, [pc, #368]	; (8004e84 <HAL_I2C_Init+0x274>)
 8004d14:	428b      	cmp	r3, r1
 8004d16:	d819      	bhi.n	8004d4c <HAL_I2C_Init+0x13c>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	1e59      	subs	r1, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d26:	1c59      	adds	r1, r3, #1
 8004d28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_I2C_Init+0x138>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1e59      	subs	r1, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d40:	3301      	adds	r3, #1
 8004d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d46:	e051      	b.n	8004dec <HAL_I2C_Init+0x1dc>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	e04f      	b.n	8004dec <HAL_I2C_Init+0x1dc>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d111      	bne.n	8004d78 <HAL_I2C_Init+0x168>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	1e58      	subs	r0, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6859      	ldr	r1, [r3, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	440b      	add	r3, r1
 8004d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d66:	3301      	adds	r3, #1
 8004d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bf0c      	ite	eq
 8004d70:	2301      	moveq	r3, #1
 8004d72:	2300      	movne	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	e012      	b.n	8004d9e <HAL_I2C_Init+0x18e>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1e58      	subs	r0, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6859      	ldr	r1, [r3, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	0099      	lsls	r1, r3, #2
 8004d88:	440b      	add	r3, r1
 8004d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d8e:	3301      	adds	r3, #1
 8004d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bf0c      	ite	eq
 8004d98:	2301      	moveq	r3, #1
 8004d9a:	2300      	movne	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_I2C_Init+0x196>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e022      	b.n	8004dec <HAL_I2C_Init+0x1dc>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10e      	bne.n	8004dcc <HAL_I2C_Init+0x1bc>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1e58      	subs	r0, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6859      	ldr	r1, [r3, #4]
 8004db6:	460b      	mov	r3, r1
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	440b      	add	r3, r1
 8004dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dca:	e00f      	b.n	8004dec <HAL_I2C_Init+0x1dc>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	1e58      	subs	r0, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	0099      	lsls	r1, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de2:	3301      	adds	r3, #1
 8004de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	6809      	ldr	r1, [r1, #0]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69da      	ldr	r2, [r3, #28]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6911      	ldr	r1, [r2, #16]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	68d2      	ldr	r2, [r2, #12]
 8004e26:	4311      	orrs	r1, r2
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6812      	ldr	r2, [r2, #0]
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	000186a0 	.word	0x000186a0
 8004e88:	001e847f 	.word	0x001e847f
 8004e8c:	003d08ff 	.word	0x003d08ff
 8004e90:	431bde83 	.word	0x431bde83
 8004e94:	10624dd3 	.word	0x10624dd3

08004e98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08c      	sub	sp, #48	; 0x30
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	817b      	strh	r3, [r7, #10]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	813b      	strh	r3, [r7, #8]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eb2:	f7fe fb87 	bl	80035c4 <HAL_GetTick>
 8004eb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	f040 8208 	bne.w	80052d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	2319      	movs	r3, #25
 8004ecc:	2201      	movs	r2, #1
 8004ece:	497b      	ldr	r1, [pc, #492]	; (80050bc <HAL_I2C_Mem_Read+0x224>)
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 faef 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
 8004ede:	e1fb      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d101      	bne.n	8004eee <HAL_I2C_Mem_Read+0x56>
 8004eea:	2302      	movs	r3, #2
 8004eec:	e1f4      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d007      	beq.n	8004f14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2222      	movs	r2, #34	; 0x22
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2240      	movs	r2, #64	; 0x40
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4a5b      	ldr	r2, [pc, #364]	; (80050c0 <HAL_I2C_Mem_Read+0x228>)
 8004f54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f56:	88f8      	ldrh	r0, [r7, #6]
 8004f58:	893a      	ldrh	r2, [r7, #8]
 8004f5a:	8979      	ldrh	r1, [r7, #10]
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	4603      	mov	r3, r0
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f9bc 	bl	80052e4 <I2C_RequestMemoryRead>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e1b0      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d113      	bne.n	8004fa6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	623b      	str	r3, [r7, #32]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	623b      	str	r3, [r7, #32]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	e184      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d11b      	bne.n	8004fe6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e164      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d11b      	bne.n	8005026 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800500c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500e:	2300      	movs	r3, #0
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	e144      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800503c:	e138      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005042:	2b03      	cmp	r3, #3
 8005044:	f200 80f1 	bhi.w	800522a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504c:	2b01      	cmp	r3, #1
 800504e:	d123      	bne.n	8005098 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005052:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 fb44 	bl	80056e2 <I2C_WaitOnRXNEFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e139      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005096:	e10b      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509c:	2b02      	cmp	r3, #2
 800509e:	d14e      	bne.n	800513e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	2200      	movs	r2, #0
 80050a8:	4906      	ldr	r1, [pc, #24]	; (80050c4 <HAL_I2C_Mem_Read+0x22c>)
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 fa02 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e10e      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
 80050ba:	bf00      	nop
 80050bc:	00100002 	.word	0x00100002
 80050c0:	ffff0000 	.word	0xffff0000
 80050c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800513c:	e0b8      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	2200      	movs	r2, #0
 8005146:	4966      	ldr	r1, [pc, #408]	; (80052e0 <HAL_I2C_Mem_Read+0x448>)
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f9b3 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0bf      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	2200      	movs	r2, #0
 80051a2:	494f      	ldr	r1, [pc, #316]	; (80052e0 <HAL_I2C_Mem_Read+0x448>)
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 f985 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e091      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005228:	e042      	b.n	80052b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fa57 	bl	80056e2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e04c      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b04      	cmp	r3, #4
 800527c:	d118      	bne.n	80052b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f47f aec2 	bne.w	800503e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e000      	b.n	80052d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052d6:	2302      	movs	r3, #2
  }
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3728      	adds	r7, #40	; 0x28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	00010004 	.word	0x00010004

080052e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	4608      	mov	r0, r1
 80052ee:	4611      	mov	r1, r2
 80052f0:	461a      	mov	r2, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	817b      	strh	r3, [r7, #10]
 80052f6:	460b      	mov	r3, r1
 80052f8:	813b      	strh	r3, [r7, #8]
 80052fa:	4613      	mov	r3, r2
 80052fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800530c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800531c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	2200      	movs	r2, #0
 8005326:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f8c2 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00d      	beq.n	8005352 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005344:	d103      	bne.n	800534e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800534c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e0aa      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005352:	897b      	ldrh	r3, [r7, #10]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005360:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	6a3a      	ldr	r2, [r7, #32]
 8005366:	4952      	ldr	r1, [pc, #328]	; (80054b0 <I2C_RequestMemoryRead+0x1cc>)
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f8fa 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e097      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800538e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005390:	6a39      	ldr	r1, [r7, #32]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f964 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00d      	beq.n	80053ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d107      	bne.n	80053b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e076      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d105      	bne.n	80053cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053c0:	893b      	ldrh	r3, [r7, #8]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	611a      	str	r2, [r3, #16]
 80053ca:	e021      	b.n	8005410 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053cc:	893b      	ldrh	r3, [r7, #8]
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053dc:	6a39      	ldr	r1, [r7, #32]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f93e 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00d      	beq.n	8005406 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d107      	bne.n	8005402 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005400:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e050      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005406:	893b      	ldrh	r3, [r7, #8]
 8005408:	b2da      	uxtb	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005412:	6a39      	ldr	r1, [r7, #32]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f923 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	2b04      	cmp	r3, #4
 8005426:	d107      	bne.n	8005438 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005436:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e035      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800544a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	2200      	movs	r2, #0
 8005454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f82b 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00d      	beq.n	8005480 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005472:	d103      	bne.n	800547c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800547a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e013      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005480:	897b      	ldrh	r3, [r7, #10]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	6a3a      	ldr	r2, [r7, #32]
 8005494:	4906      	ldr	r1, [pc, #24]	; (80054b0 <I2C_RequestMemoryRead+0x1cc>)
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f863 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e000      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	00010002 	.word	0x00010002

080054b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054c4:	e025      	b.n	8005512 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d021      	beq.n	8005512 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ce:	f7fe f879 	bl	80035c4 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d116      	bne.n	8005512 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e023      	b.n	800555a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	0c1b      	lsrs	r3, r3, #16
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10d      	bne.n	8005538 <I2C_WaitOnFlagUntilTimeout+0x84>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	43da      	mvns	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4013      	ands	r3, r2
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	bf0c      	ite	eq
 800552e:	2301      	moveq	r3, #1
 8005530:	2300      	movne	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	e00c      	b.n	8005552 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	43da      	mvns	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4013      	ands	r3, r2
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	429a      	cmp	r2, r3
 8005556:	d0b6      	beq.n	80054c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005570:	e051      	b.n	8005616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800557c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005580:	d123      	bne.n	80055ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005590:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800559a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f043 0204 	orr.w	r2, r3, #4
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e046      	b.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d021      	beq.n	8005616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d2:	f7fd fff7 	bl	80035c4 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d116      	bne.n	8005616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f043 0220 	orr.w	r2, r3, #32
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e020      	b.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	d10c      	bne.n	800563a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	43da      	mvns	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4013      	ands	r3, r2
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	bf14      	ite	ne
 8005632:	2301      	movne	r3, #1
 8005634:	2300      	moveq	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	e00b      	b.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	43da      	mvns	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4013      	ands	r3, r2
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	bf14      	ite	ne
 800564c:	2301      	movne	r3, #1
 800564e:	2300      	moveq	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d18d      	bne.n	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800566c:	e02d      	b.n	80056ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f88d 	bl	800578e <I2C_IsAcknowledgeFailed>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e02d      	b.n	80056da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005684:	d021      	beq.n	80056ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005686:	f7fd ff9d 	bl	80035c4 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	d302      	bcc.n	800569c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d116      	bne.n	80056ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f043 0220 	orr.w	r2, r3, #32
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e007      	b.n	80056da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d4:	2b80      	cmp	r3, #128	; 0x80
 80056d6:	d1ca      	bne.n	800566e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056ee:	e042      	b.n	8005776 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b10      	cmp	r3, #16
 80056fc:	d119      	bne.n	8005732 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f06f 0210 	mvn.w	r2, #16
 8005706:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e029      	b.n	8005786 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005732:	f7fd ff47 	bl	80035c4 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d116      	bne.n	8005776 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	f043 0220 	orr.w	r2, r3, #32
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e007      	b.n	8005786 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	d1b5      	bne.n	80056f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a4:	d11b      	bne.n	80057de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f043 0204 	orr.w	r2, r3, #4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e267      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d075      	beq.n	80058f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800580a:	4b88      	ldr	r3, [pc, #544]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	2b04      	cmp	r3, #4
 8005814:	d00c      	beq.n	8005830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005816:	4b85      	ldr	r3, [pc, #532]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800581e:	2b08      	cmp	r3, #8
 8005820:	d112      	bne.n	8005848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005822:	4b82      	ldr	r3, [pc, #520]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800582e:	d10b      	bne.n	8005848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005830:	4b7e      	ldr	r3, [pc, #504]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d05b      	beq.n	80058f4 <HAL_RCC_OscConfig+0x108>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d157      	bne.n	80058f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e242      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005850:	d106      	bne.n	8005860 <HAL_RCC_OscConfig+0x74>
 8005852:	4b76      	ldr	r3, [pc, #472]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a75      	ldr	r2, [pc, #468]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e01d      	b.n	800589c <HAL_RCC_OscConfig+0xb0>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005868:	d10c      	bne.n	8005884 <HAL_RCC_OscConfig+0x98>
 800586a:	4b70      	ldr	r3, [pc, #448]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6f      	ldr	r2, [pc, #444]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	4b6d      	ldr	r3, [pc, #436]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a6c      	ldr	r2, [pc, #432]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800587c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	e00b      	b.n	800589c <HAL_RCC_OscConfig+0xb0>
 8005884:	4b69      	ldr	r3, [pc, #420]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a68      	ldr	r2, [pc, #416]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800588a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	4b66      	ldr	r3, [pc, #408]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a65      	ldr	r2, [pc, #404]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800589a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d013      	beq.n	80058cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a4:	f7fd fe8e 	bl	80035c4 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058ac:	f7fd fe8a 	bl	80035c4 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b64      	cmp	r3, #100	; 0x64
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e207      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058be:	4b5b      	ldr	r3, [pc, #364]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCC_OscConfig+0xc0>
 80058ca:	e014      	b.n	80058f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058cc:	f7fd fe7a 	bl	80035c4 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058d4:	f7fd fe76 	bl	80035c4 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b64      	cmp	r3, #100	; 0x64
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e1f3      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e6:	4b51      	ldr	r3, [pc, #324]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0xe8>
 80058f2:	e000      	b.n	80058f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d063      	beq.n	80059ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005902:	4b4a      	ldr	r3, [pc, #296]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 030c 	and.w	r3, r3, #12
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800590e:	4b47      	ldr	r3, [pc, #284]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005916:	2b08      	cmp	r3, #8
 8005918:	d11c      	bne.n	8005954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800591a:	4b44      	ldr	r3, [pc, #272]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d116      	bne.n	8005954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005926:	4b41      	ldr	r3, [pc, #260]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <HAL_RCC_OscConfig+0x152>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d001      	beq.n	800593e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e1c7      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593e:	4b3b      	ldr	r3, [pc, #236]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	4937      	ldr	r1, [pc, #220]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800594e:	4313      	orrs	r3, r2
 8005950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005952:	e03a      	b.n	80059ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d020      	beq.n	800599e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800595c:	4b34      	ldr	r3, [pc, #208]	; (8005a30 <HAL_RCC_OscConfig+0x244>)
 800595e:	2201      	movs	r2, #1
 8005960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005962:	f7fd fe2f 	bl	80035c4 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800596a:	f7fd fe2b 	bl	80035c4 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e1a8      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597c:	4b2b      	ldr	r3, [pc, #172]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0f0      	beq.n	800596a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005988:	4b28      	ldr	r3, [pc, #160]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	4925      	ldr	r1, [pc, #148]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005998:	4313      	orrs	r3, r2
 800599a:	600b      	str	r3, [r1, #0]
 800599c:	e015      	b.n	80059ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800599e:	4b24      	ldr	r3, [pc, #144]	; (8005a30 <HAL_RCC_OscConfig+0x244>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a4:	f7fd fe0e 	bl	80035c4 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ac:	f7fd fe0a 	bl	80035c4 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e187      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059be:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d036      	beq.n	8005a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d016      	beq.n	8005a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059de:	4b15      	ldr	r3, [pc, #84]	; (8005a34 <HAL_RCC_OscConfig+0x248>)
 80059e0:	2201      	movs	r2, #1
 80059e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fd fdee 	bl	80035c4 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ec:	f7fd fdea 	bl	80035c4 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e167      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059fe:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <HAL_RCC_OscConfig+0x240>)
 8005a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0x200>
 8005a0a:	e01b      	b.n	8005a44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a0c:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <HAL_RCC_OscConfig+0x248>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a12:	f7fd fdd7 	bl	80035c4 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a18:	e00e      	b.n	8005a38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a1a:	f7fd fdd3 	bl	80035c4 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d907      	bls.n	8005a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e150      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	42470000 	.word	0x42470000
 8005a34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a38:	4b88      	ldr	r3, [pc, #544]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1ea      	bne.n	8005a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 8097 	beq.w	8005b80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a52:	2300      	movs	r3, #0
 8005a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a56:	4b81      	ldr	r3, [pc, #516]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10f      	bne.n	8005a82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	4b7d      	ldr	r3, [pc, #500]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	4a7c      	ldr	r2, [pc, #496]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a70:	6413      	str	r3, [r2, #64]	; 0x40
 8005a72:	4b7a      	ldr	r3, [pc, #488]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a82:	4b77      	ldr	r3, [pc, #476]	; (8005c60 <HAL_RCC_OscConfig+0x474>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d118      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a8e:	4b74      	ldr	r3, [pc, #464]	; (8005c60 <HAL_RCC_OscConfig+0x474>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a73      	ldr	r2, [pc, #460]	; (8005c60 <HAL_RCC_OscConfig+0x474>)
 8005a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a9a:	f7fd fd93 	bl	80035c4 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa2:	f7fd fd8f 	bl	80035c4 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e10c      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab4:	4b6a      	ldr	r3, [pc, #424]	; (8005c60 <HAL_RCC_OscConfig+0x474>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0f0      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d106      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x2ea>
 8005ac8:	4b64      	ldr	r3, [pc, #400]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005acc:	4a63      	ldr	r2, [pc, #396]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad4:	e01c      	b.n	8005b10 <HAL_RCC_OscConfig+0x324>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	2b05      	cmp	r3, #5
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCC_OscConfig+0x30c>
 8005ade:	4b5f      	ldr	r3, [pc, #380]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae2:	4a5e      	ldr	r2, [pc, #376]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005ae4:	f043 0304 	orr.w	r3, r3, #4
 8005ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aea:	4b5c      	ldr	r3, [pc, #368]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aee:	4a5b      	ldr	r2, [pc, #364]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	6713      	str	r3, [r2, #112]	; 0x70
 8005af6:	e00b      	b.n	8005b10 <HAL_RCC_OscConfig+0x324>
 8005af8:	4b58      	ldr	r3, [pc, #352]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afc:	4a57      	ldr	r2, [pc, #348]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005afe:	f023 0301 	bic.w	r3, r3, #1
 8005b02:	6713      	str	r3, [r2, #112]	; 0x70
 8005b04:	4b55      	ldr	r3, [pc, #340]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	4a54      	ldr	r2, [pc, #336]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b0a:	f023 0304 	bic.w	r3, r3, #4
 8005b0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d015      	beq.n	8005b44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b18:	f7fd fd54 	bl	80035c4 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b1e:	e00a      	b.n	8005b36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b20:	f7fd fd50 	bl	80035c4 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e0cb      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b36:	4b49      	ldr	r3, [pc, #292]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0ee      	beq.n	8005b20 <HAL_RCC_OscConfig+0x334>
 8005b42:	e014      	b.n	8005b6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b44:	f7fd fd3e 	bl	80035c4 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4a:	e00a      	b.n	8005b62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b4c:	f7fd fd3a 	bl	80035c4 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e0b5      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b62:	4b3e      	ldr	r3, [pc, #248]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b66:	f003 0302 	and.w	r3, r3, #2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1ee      	bne.n	8005b4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b6e:	7dfb      	ldrb	r3, [r7, #23]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d105      	bne.n	8005b80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b74:	4b39      	ldr	r3, [pc, #228]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	4a38      	ldr	r2, [pc, #224]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80a1 	beq.w	8005ccc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b8a:	4b34      	ldr	r3, [pc, #208]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d05c      	beq.n	8005c50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d141      	bne.n	8005c22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9e:	4b31      	ldr	r3, [pc, #196]	; (8005c64 <HAL_RCC_OscConfig+0x478>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba4:	f7fd fd0e 	bl	80035c4 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bac:	f7fd fd0a 	bl	80035c4 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e087      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bbe:	4b27      	ldr	r3, [pc, #156]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f0      	bne.n	8005bac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69da      	ldr	r2, [r3, #28]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	019b      	lsls	r3, r3, #6
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	3b01      	subs	r3, #1
 8005be4:	041b      	lsls	r3, r3, #16
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	061b      	lsls	r3, r3, #24
 8005bee:	491b      	ldr	r1, [pc, #108]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bf4:	4b1b      	ldr	r3, [pc, #108]	; (8005c64 <HAL_RCC_OscConfig+0x478>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bfa:	f7fd fce3 	bl	80035c4 <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c02:	f7fd fcdf 	bl	80035c4 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e05c      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c14:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0f0      	beq.n	8005c02 <HAL_RCC_OscConfig+0x416>
 8005c20:	e054      	b.n	8005ccc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c22:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <HAL_RCC_OscConfig+0x478>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c28:	f7fd fccc 	bl	80035c4 <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c30:	f7fd fcc8 	bl	80035c4 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e045      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c42:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <HAL_RCC_OscConfig+0x470>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f0      	bne.n	8005c30 <HAL_RCC_OscConfig+0x444>
 8005c4e:	e03d      	b.n	8005ccc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d107      	bne.n	8005c68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e038      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	40007000 	.word	0x40007000
 8005c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c68:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <HAL_RCC_OscConfig+0x4ec>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d028      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d121      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d11a      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c98:	4013      	ands	r3, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d111      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d107      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40023800 	.word	0x40023800

08005cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0cc      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf0:	4b68      	ldr	r3, [pc, #416]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d90c      	bls.n	8005d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cfe:	4b65      	ldr	r3, [pc, #404]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d06:	4b63      	ldr	r3, [pc, #396]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d001      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e0b8      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d020      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d005      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d30:	4b59      	ldr	r3, [pc, #356]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4a58      	ldr	r2, [pc, #352]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d48:	4b53      	ldr	r3, [pc, #332]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4a52      	ldr	r2, [pc, #328]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d54:	4b50      	ldr	r3, [pc, #320]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	494d      	ldr	r1, [pc, #308]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d044      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d107      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7a:	4b47      	ldr	r3, [pc, #284]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d119      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e07f      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d003      	beq.n	8005d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d107      	bne.n	8005daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d9a:	4b3f      	ldr	r3, [pc, #252]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e06f      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005daa:	4b3b      	ldr	r3, [pc, #236]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e067      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dba:	4b37      	ldr	r3, [pc, #220]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f023 0203 	bic.w	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	4934      	ldr	r1, [pc, #208]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dcc:	f7fd fbfa 	bl	80035c4 <HAL_GetTick>
 8005dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd2:	e00a      	b.n	8005dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd4:	f7fd fbf6 	bl	80035c4 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e04f      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dea:	4b2b      	ldr	r3, [pc, #172]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 020c 	and.w	r2, r3, #12
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d1eb      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d20c      	bcs.n	8005e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e12:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <HAL_RCC_ClockConfig+0x1b8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e032      	b.n	8005e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d008      	beq.n	8005e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e30:	4b19      	ldr	r3, [pc, #100]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	4916      	ldr	r1, [pc, #88]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0308 	and.w	r3, r3, #8
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e4e:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	00db      	lsls	r3, r3, #3
 8005e5c:	490e      	ldr	r1, [pc, #56]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e62:	f000 f821 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 8005e66:	4602      	mov	r2, r0
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	091b      	lsrs	r3, r3, #4
 8005e6e:	f003 030f 	and.w	r3, r3, #15
 8005e72:	490a      	ldr	r1, [pc, #40]	; (8005e9c <HAL_RCC_ClockConfig+0x1c0>)
 8005e74:	5ccb      	ldrb	r3, [r1, r3]
 8005e76:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7a:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fd fb5a 	bl	800353c <HAL_InitTick>

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40023c00 	.word	0x40023c00
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	0800c9f4 	.word	0x0800c9f4
 8005ea0:	20000010 	.word	0x20000010
 8005ea4:	20000014 	.word	0x20000014

08005ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eac:	b094      	sub	sp, #80	; 0x50
 8005eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eb8:	2300      	movs	r3, #0
 8005eba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ec0:	4b79      	ldr	r3, [pc, #484]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 030c 	and.w	r3, r3, #12
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d00d      	beq.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	f200 80e1 	bhi.w	8006094 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0x34>
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d003      	beq.n	8005ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005eda:	e0db      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005edc:	4b73      	ldr	r3, [pc, #460]	; (80060ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005ede:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ee0:	e0db      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ee2:	4b73      	ldr	r3, [pc, #460]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ee6:	e0d8      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ee8:	4b6f      	ldr	r3, [pc, #444]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ef2:	4b6d      	ldr	r3, [pc, #436]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d063      	beq.n	8005fc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005efe:	4b6a      	ldr	r3, [pc, #424]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	2200      	movs	r2, #0
 8005f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f10:	633b      	str	r3, [r7, #48]	; 0x30
 8005f12:	2300      	movs	r3, #0
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
 8005f16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	f04f 0000 	mov.w	r0, #0
 8005f22:	f04f 0100 	mov.w	r1, #0
 8005f26:	0159      	lsls	r1, r3, #5
 8005f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f2c:	0150      	lsls	r0, r2, #5
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4621      	mov	r1, r4
 8005f34:	1a51      	subs	r1, r2, r1
 8005f36:	6139      	str	r1, [r7, #16]
 8005f38:	4629      	mov	r1, r5
 8005f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	018b      	lsls	r3, r1, #6
 8005f50:	4651      	mov	r1, sl
 8005f52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f56:	4651      	mov	r1, sl
 8005f58:	018a      	lsls	r2, r1, #6
 8005f5a:	4651      	mov	r1, sl
 8005f5c:	ebb2 0801 	subs.w	r8, r2, r1
 8005f60:	4659      	mov	r1, fp
 8005f62:	eb63 0901 	sbc.w	r9, r3, r1
 8005f66:	f04f 0200 	mov.w	r2, #0
 8005f6a:	f04f 0300 	mov.w	r3, #0
 8005f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f7a:	4690      	mov	r8, r2
 8005f7c:	4699      	mov	r9, r3
 8005f7e:	4623      	mov	r3, r4
 8005f80:	eb18 0303 	adds.w	r3, r8, r3
 8005f84:	60bb      	str	r3, [r7, #8]
 8005f86:	462b      	mov	r3, r5
 8005f88:	eb49 0303 	adc.w	r3, r9, r3
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	024b      	lsls	r3, r1, #9
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	024a      	lsls	r2, r1, #9
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fae:	2200      	movs	r2, #0
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005fb8:	f7fa fd78 	bl	8000aac <__aeabi_uldivmod>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc4:	e058      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fc6:	4b38      	ldr	r3, [pc, #224]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	099b      	lsrs	r3, r3, #6
 8005fcc:	2200      	movs	r2, #0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fd6:	623b      	str	r3, [r7, #32]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
 8005fdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	f04f 0000 	mov.w	r0, #0
 8005fe8:	f04f 0100 	mov.w	r1, #0
 8005fec:	0159      	lsls	r1, r3, #5
 8005fee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ff2:	0150      	lsls	r0, r2, #5
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ffe:	4649      	mov	r1, r9
 8006000:	eb63 0b01 	sbc.w	fp, r3, r1
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006010:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006014:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006018:	ebb2 040a 	subs.w	r4, r2, sl
 800601c:	eb63 050b 	sbc.w	r5, r3, fp
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	00eb      	lsls	r3, r5, #3
 800602a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800602e:	00e2      	lsls	r2, r4, #3
 8006030:	4614      	mov	r4, r2
 8006032:	461d      	mov	r5, r3
 8006034:	4643      	mov	r3, r8
 8006036:	18e3      	adds	r3, r4, r3
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	464b      	mov	r3, r9
 800603c:	eb45 0303 	adc.w	r3, r5, r3
 8006040:	607b      	str	r3, [r7, #4]
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800604e:	4629      	mov	r1, r5
 8006050:	028b      	lsls	r3, r1, #10
 8006052:	4621      	mov	r1, r4
 8006054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006058:	4621      	mov	r1, r4
 800605a:	028a      	lsls	r2, r1, #10
 800605c:	4610      	mov	r0, r2
 800605e:	4619      	mov	r1, r3
 8006060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006062:	2200      	movs	r2, #0
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	61fa      	str	r2, [r7, #28]
 8006068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800606c:	f7fa fd1e 	bl	8000aac <__aeabi_uldivmod>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4613      	mov	r3, r2
 8006076:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	0c1b      	lsrs	r3, r3, #16
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	3301      	adds	r3, #1
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800608a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006092:	e002      	b.n	800609a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <HAL_RCC_GetSysClockFreq+0x204>)
 8006096:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800609a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800609c:	4618      	mov	r0, r3
 800609e:	3750      	adds	r7, #80	; 0x50
 80060a0:	46bd      	mov	sp, r7
 80060a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060a6:	bf00      	nop
 80060a8:	40023800 	.word	0x40023800
 80060ac:	00f42400 	.word	0x00f42400
 80060b0:	007a1200 	.word	0x007a1200

080060b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80060ba:	681b      	ldr	r3, [r3, #0]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	20000010 	.word	0x20000010

080060cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060d0:	f7ff fff0 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 80060d4:	4602      	mov	r2, r0
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	0a9b      	lsrs	r3, r3, #10
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	4903      	ldr	r1, [pc, #12]	; (80060f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060e2:	5ccb      	ldrb	r3, [r1, r3]
 80060e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40023800 	.word	0x40023800
 80060f0:	0800ca04 	.word	0x0800ca04

080060f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060f8:	f7ff ffdc 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	0b5b      	lsrs	r3, r3, #13
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	4903      	ldr	r1, [pc, #12]	; (8006118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006110:	4618      	mov	r0, r3
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40023800 	.word	0x40023800
 8006118:	0800ca04 	.word	0x0800ca04

0800611c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e07b      	b.n	8006226 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	2b00      	cmp	r3, #0
 8006134:	d108      	bne.n	8006148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800613e:	d009      	beq.n	8006154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	61da      	str	r2, [r3, #28]
 8006146:	e005      	b.n	8006154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fc fe66 	bl	8002e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800618a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a6:	431a      	orrs	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c4:	431a      	orrs	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d8:	ea42 0103 	orr.w	r1, r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	0c1b      	lsrs	r3, r3, #16
 80061f2:	f003 0104 	and.w	r1, r3, #4
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	f003 0210 	and.w	r2, r3, #16
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69da      	ldr	r2, [r3, #28]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006214:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b088      	sub	sp, #32
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	4613      	mov	r3, r2
 800623c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_SPI_Transmit+0x22>
 800624c:	2302      	movs	r3, #2
 800624e:	e126      	b.n	800649e <HAL_SPI_Transmit+0x270>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006258:	f7fd f9b4 	bl	80035c4 <HAL_GetTick>
 800625c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800625e:	88fb      	ldrh	r3, [r7, #6]
 8006260:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b01      	cmp	r3, #1
 800626c:	d002      	beq.n	8006274 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800626e:	2302      	movs	r3, #2
 8006270:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006272:	e10b      	b.n	800648c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_SPI_Transmit+0x52>
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006284:	e102      	b.n	800648c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2203      	movs	r2, #3
 800628a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	88fa      	ldrh	r2, [r7, #6]
 800629e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	88fa      	ldrh	r2, [r7, #6]
 80062a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062cc:	d10f      	bne.n	80062ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b40      	cmp	r3, #64	; 0x40
 80062fa:	d007      	beq.n	800630c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800630a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006314:	d14b      	bne.n	80063ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <HAL_SPI_Transmit+0xf6>
 800631e:	8afb      	ldrh	r3, [r7, #22]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d13e      	bne.n	80063a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006328:	881a      	ldrh	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006334:	1c9a      	adds	r2, r3, #2
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006348:	e02b      	b.n	80063a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b02      	cmp	r3, #2
 8006356:	d112      	bne.n	800637e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	881a      	ldrh	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006368:	1c9a      	adds	r2, r3, #2
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	86da      	strh	r2, [r3, #54]	; 0x36
 800637c:	e011      	b.n	80063a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800637e:	f7fd f921 	bl	80035c4 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d803      	bhi.n	8006396 <HAL_SPI_Transmit+0x168>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d102      	bne.n	800639c <HAL_SPI_Transmit+0x16e>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d102      	bne.n	80063a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063a0:	e074      	b.n	800648c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1ce      	bne.n	800634a <HAL_SPI_Transmit+0x11c>
 80063ac:	e04c      	b.n	8006448 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_SPI_Transmit+0x18e>
 80063b6:	8afb      	ldrh	r3, [r7, #22]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d140      	bne.n	800643e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	7812      	ldrb	r2, [r2, #0]
 80063c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063e2:	e02c      	b.n	800643e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d113      	bne.n	800641a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	330c      	adds	r3, #12
 80063fc:	7812      	ldrb	r2, [r2, #0]
 80063fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	86da      	strh	r2, [r3, #54]	; 0x36
 8006418:	e011      	b.n	800643e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800641a:	f7fd f8d3 	bl	80035c4 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d803      	bhi.n	8006432 <HAL_SPI_Transmit+0x204>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006430:	d102      	bne.n	8006438 <HAL_SPI_Transmit+0x20a>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800643c:	e026      	b.n	800648c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1cd      	bne.n	80063e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f000 fbcb 	bl	8006be8 <SPI_EndRxTxTransaction>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2220      	movs	r2, #32
 800645c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006466:	2300      	movs	r3, #0
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	613b      	str	r3, [r7, #16]
 800647a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	77fb      	strb	r3, [r7, #31]
 8006488:	e000      	b.n	800648c <HAL_SPI_Transmit+0x25e>
  }

error:
 800648a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800649c:	7ffb      	ldrb	r3, [r7, #31]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3720      	adds	r7, #32
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b088      	sub	sp, #32
 80064aa:	af02      	add	r7, sp, #8
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	603b      	str	r3, [r7, #0]
 80064b2:	4613      	mov	r3, r2
 80064b4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064c2:	d112      	bne.n	80064ea <HAL_SPI_Receive+0x44>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10e      	bne.n	80064ea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2204      	movs	r2, #4
 80064d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064d4:	88fa      	ldrh	r2, [r7, #6]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	4613      	mov	r3, r2
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	68b9      	ldr	r1, [r7, #8]
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f8f1 	bl	80066c8 <HAL_SPI_TransmitReceive>
 80064e6:	4603      	mov	r3, r0
 80064e8:	e0ea      	b.n	80066c0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_SPI_Receive+0x52>
 80064f4:	2302      	movs	r3, #2
 80064f6:	e0e3      	b.n	80066c0 <HAL_SPI_Receive+0x21a>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006500:	f7fd f860 	bl	80035c4 <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b01      	cmp	r3, #1
 8006510:	d002      	beq.n	8006518 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006512:	2302      	movs	r3, #2
 8006514:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006516:	e0ca      	b.n	80066ae <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <HAL_SPI_Receive+0x7e>
 800651e:	88fb      	ldrh	r3, [r7, #6]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d102      	bne.n	800652a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006528:	e0c1      	b.n	80066ae <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2204      	movs	r2, #4
 800652e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	88fa      	ldrh	r2, [r7, #6]
 8006542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	88fa      	ldrh	r2, [r7, #6]
 8006548:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006570:	d10f      	bne.n	8006592 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006580:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006590:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d007      	beq.n	80065b0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d162      	bne.n	800667e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80065b8:	e02e      	b.n	8006618 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d115      	bne.n	80065f4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f103 020c 	add.w	r2, r3, #12
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	7812      	ldrb	r2, [r2, #0]
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065f2:	e011      	b.n	8006618 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065f4:	f7fc ffe6 	bl	80035c4 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d803      	bhi.n	800660c <HAL_SPI_Receive+0x166>
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660a:	d102      	bne.n	8006612 <HAL_SPI_Receive+0x16c>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d102      	bne.n	8006618 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006616:	e04a      	b.n	80066ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800661c:	b29b      	uxth	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1cb      	bne.n	80065ba <HAL_SPI_Receive+0x114>
 8006622:	e031      	b.n	8006688 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b01      	cmp	r3, #1
 8006630:	d113      	bne.n	800665a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68da      	ldr	r2, [r3, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	b292      	uxth	r2, r2
 800663e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	1c9a      	adds	r2, r3, #2
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006658:	e011      	b.n	800667e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800665a:	f7fc ffb3 	bl	80035c4 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	429a      	cmp	r2, r3
 8006668:	d803      	bhi.n	8006672 <HAL_SPI_Receive+0x1cc>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d102      	bne.n	8006678 <HAL_SPI_Receive+0x1d2>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800667c:	e017      	b.n	80066ae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006682:	b29b      	uxth	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1cd      	bne.n	8006624 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 fa45 	bl	8006b1c <SPI_EndRxTransaction>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2220      	movs	r2, #32
 800669c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	75fb      	strb	r3, [r7, #23]
 80066aa:	e000      	b.n	80066ae <HAL_SPI_Receive+0x208>
  }

error :
 80066ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066be:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08c      	sub	sp, #48	; 0x30
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80066d6:	2301      	movs	r3, #1
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d101      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x26>
 80066ea:	2302      	movs	r3, #2
 80066ec:	e18a      	b.n	8006a04 <HAL_SPI_TransmitReceive+0x33c>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066f6:	f7fc ff65 	bl	80035c4 <HAL_GetTick>
 80066fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800670c:	887b      	ldrh	r3, [r7, #2]
 800670e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006714:	2b01      	cmp	r3, #1
 8006716:	d00f      	beq.n	8006738 <HAL_SPI_TransmitReceive+0x70>
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800671e:	d107      	bne.n	8006730 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d103      	bne.n	8006730 <HAL_SPI_TransmitReceive+0x68>
 8006728:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800672c:	2b04      	cmp	r3, #4
 800672e:	d003      	beq.n	8006738 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006730:	2302      	movs	r3, #2
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006736:	e15b      	b.n	80069f0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <HAL_SPI_TransmitReceive+0x82>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <HAL_SPI_TransmitReceive+0x82>
 8006744:	887b      	ldrh	r3, [r7, #2]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d103      	bne.n	8006752 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006750:	e14e      	b.n	80069f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b04      	cmp	r3, #4
 800675c:	d003      	beq.n	8006766 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2205      	movs	r2, #5
 8006762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	887a      	ldrh	r2, [r7, #2]
 8006776:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	887a      	ldrh	r2, [r7, #2]
 800677c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	887a      	ldrh	r2, [r7, #2]
 8006788:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	887a      	ldrh	r2, [r7, #2]
 800678e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a6:	2b40      	cmp	r3, #64	; 0x40
 80067a8:	d007      	beq.n	80067ba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c2:	d178      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <HAL_SPI_TransmitReceive+0x10a>
 80067cc:	8b7b      	ldrh	r3, [r7, #26]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d166      	bne.n	80068a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	881a      	ldrh	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e2:	1c9a      	adds	r2, r3, #2
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067f6:	e053      	b.n	80068a0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b02      	cmp	r3, #2
 8006804:	d11b      	bne.n	800683e <HAL_SPI_TransmitReceive+0x176>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800680a:	b29b      	uxth	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d016      	beq.n	800683e <HAL_SPI_TransmitReceive+0x176>
 8006810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006812:	2b01      	cmp	r3, #1
 8006814:	d113      	bne.n	800683e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	881a      	ldrh	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	1c9a      	adds	r2, r3, #2
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b01      	cmp	r3, #1
 800684a:	d119      	bne.n	8006880 <HAL_SPI_TransmitReceive+0x1b8>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006850:	b29b      	uxth	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d014      	beq.n	8006880 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68da      	ldr	r2, [r3, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	b292      	uxth	r2, r2
 8006862:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006868:	1c9a      	adds	r2, r3, #2
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800687c:	2301      	movs	r3, #1
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006880:	f7fc fea0 	bl	80035c4 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800688c:	429a      	cmp	r2, r3
 800688e:	d807      	bhi.n	80068a0 <HAL_SPI_TransmitReceive+0x1d8>
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d003      	beq.n	80068a0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800689e:	e0a7      	b.n	80069f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1a6      	bne.n	80067f8 <HAL_SPI_TransmitReceive+0x130>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1a1      	bne.n	80067f8 <HAL_SPI_TransmitReceive+0x130>
 80068b4:	e07c      	b.n	80069b0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <HAL_SPI_TransmitReceive+0x1fc>
 80068be:	8b7b      	ldrh	r3, [r7, #26]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d16b      	bne.n	800699c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	7812      	ldrb	r2, [r2, #0]
 80068d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068ea:	e057      	b.n	800699c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d11c      	bne.n	8006934 <HAL_SPI_TransmitReceive+0x26c>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d017      	beq.n	8006934 <HAL_SPI_TransmitReceive+0x26c>
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	2b01      	cmp	r3, #1
 8006908:	d114      	bne.n	8006934 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	330c      	adds	r3, #12
 8006914:	7812      	ldrb	r2, [r2, #0]
 8006916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b01      	cmp	r3, #1
 8006940:	d119      	bne.n	8006976 <HAL_SPI_TransmitReceive+0x2ae>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006946:	b29b      	uxth	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d014      	beq.n	8006976 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b01      	subs	r3, #1
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006972:	2301      	movs	r3, #1
 8006974:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006976:	f7fc fe25 	bl	80035c4 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006982:	429a      	cmp	r2, r3
 8006984:	d803      	bhi.n	800698e <HAL_SPI_TransmitReceive+0x2c6>
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698c:	d102      	bne.n	8006994 <HAL_SPI_TransmitReceive+0x2cc>
 800698e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006990:	2b00      	cmp	r3, #0
 8006992:	d103      	bne.n	800699c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800699a:	e029      	b.n	80069f0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1a2      	bne.n	80068ec <HAL_SPI_TransmitReceive+0x224>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d19d      	bne.n	80068ec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 f917 	bl	8006be8 <SPI_EndRxTxTransaction>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d006      	beq.n	80069ce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2220      	movs	r2, #32
 80069ca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80069cc:	e010      	b.n	80069f0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10b      	bne.n	80069ee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	e000      	b.n	80069f0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80069ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3730      	adds	r7, #48	; 0x30
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a1c:	f7fc fdd2 	bl	80035c4 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	4413      	add	r3, r2
 8006a2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a2c:	f7fc fdca 	bl	80035c4 <HAL_GetTick>
 8006a30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a32:	4b39      	ldr	r3, [pc, #228]	; (8006b18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	015b      	lsls	r3, r3, #5
 8006a38:	0d1b      	lsrs	r3, r3, #20
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	fb02 f303 	mul.w	r3, r2, r3
 8006a40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a42:	e054      	b.n	8006aee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4a:	d050      	beq.n	8006aee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a4c:	f7fc fdba 	bl	80035c4 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d902      	bls.n	8006a62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d13d      	bne.n	8006ade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a7a:	d111      	bne.n	8006aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a84:	d004      	beq.n	8006a90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a8e:	d107      	bne.n	8006aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa8:	d10f      	bne.n	8006aca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e017      	b.n	8006b0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4013      	ands	r3, r2
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	bf0c      	ite	eq
 8006afe:	2301      	moveq	r3, #1
 8006b00:	2300      	movne	r3, #0
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	461a      	mov	r2, r3
 8006b06:	79fb      	ldrb	r3, [r7, #7]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d19b      	bne.n	8006a44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3720      	adds	r7, #32
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20000010 	.word	0x20000010

08006b1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b30:	d111      	bne.n	8006b56 <SPI_EndRxTransaction+0x3a>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b3a:	d004      	beq.n	8006b46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b44:	d107      	bne.n	8006b56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b5e:	d12a      	bne.n	8006bb6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b68:	d012      	beq.n	8006b90 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2200      	movs	r2, #0
 8006b72:	2180      	movs	r1, #128	; 0x80
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff ff49 	bl	8006a0c <SPI_WaitFlagStateUntilTimeout>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d02d      	beq.n	8006bdc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b84:	f043 0220 	orr.w	r2, r3, #32
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e026      	b.n	8006bde <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2200      	movs	r2, #0
 8006b98:	2101      	movs	r1, #1
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff ff36 	bl	8006a0c <SPI_WaitFlagStateUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01a      	beq.n	8006bdc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006baa:	f043 0220 	orr.w	r2, r3, #32
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e013      	b.n	8006bde <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f7ff ff23 	bl	8006a0c <SPI_WaitFlagStateUntilTimeout>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd0:	f043 0220 	orr.w	r2, r3, #32
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e000      	b.n	8006bde <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bf4:	4b1b      	ldr	r3, [pc, #108]	; (8006c64 <SPI_EndRxTxTransaction+0x7c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1b      	ldr	r2, [pc, #108]	; (8006c68 <SPI_EndRxTxTransaction+0x80>)
 8006bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfe:	0d5b      	lsrs	r3, r3, #21
 8006c00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c04:	fb02 f303 	mul.w	r3, r2, r3
 8006c08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c12:	d112      	bne.n	8006c3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2180      	movs	r1, #128	; 0x80
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f7ff fef4 	bl	8006a0c <SPI_WaitFlagStateUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d016      	beq.n	8006c58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2e:	f043 0220 	orr.w	r2, r3, #32
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e00f      	b.n	8006c5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00a      	beq.n	8006c56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	3b01      	subs	r3, #1
 8006c44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c50:	2b80      	cmp	r3, #128	; 0x80
 8006c52:	d0f2      	beq.n	8006c3a <SPI_EndRxTxTransaction+0x52>
 8006c54:	e000      	b.n	8006c58 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c56:	bf00      	nop
  }

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000010 	.word	0x20000010
 8006c68:	165e9f81 	.word	0x165e9f81

08006c6c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e034      	b.n	8006cec <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d106      	bne.n	8006c9c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7fa fb88 	bl	80013ac <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4610      	mov	r0, r2
 8006ca8:	f002 f8d4 	bl	8008e54 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	f002 f91e 	bl	8008ef8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6858      	ldr	r0, [r3, #4]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	f002 f953 	bl	8008f74 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	6892      	ldr	r2, [r2, #8]
 8006cd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	6892      	ldr	r2, [r2, #8]
 8006ce2:	f041 0101 	orr.w	r1, r1, #1
 8006ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e041      	b.n	8006d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d106      	bne.n	8006d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fc fa2a 	bl	8003174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f000 fc7a 	bl	800762c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d001      	beq.n	8006dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e04e      	b.n	8006e4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a23      	ldr	r2, [pc, #140]	; (8006e58 <HAL_TIM_Base_Start_IT+0xc4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d022      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd6:	d01d      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1f      	ldr	r2, [pc, #124]	; (8006e5c <HAL_TIM_Base_Start_IT+0xc8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d018      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1e      	ldr	r2, [pc, #120]	; (8006e60 <HAL_TIM_Base_Start_IT+0xcc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d013      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1c      	ldr	r2, [pc, #112]	; (8006e64 <HAL_TIM_Base_Start_IT+0xd0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00e      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1b      	ldr	r2, [pc, #108]	; (8006e68 <HAL_TIM_Base_Start_IT+0xd4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d009      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a19      	ldr	r2, [pc, #100]	; (8006e6c <HAL_TIM_Base_Start_IT+0xd8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d004      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a18      	ldr	r2, [pc, #96]	; (8006e70 <HAL_TIM_Base_Start_IT+0xdc>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d111      	bne.n	8006e38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b06      	cmp	r3, #6
 8006e24:	d010      	beq.n	8006e48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f042 0201 	orr.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e36:	e007      	b.n	8006e48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	40010000 	.word	0x40010000
 8006e5c:	40000400 	.word	0x40000400
 8006e60:	40000800 	.word	0x40000800
 8006e64:	40000c00 	.word	0x40000c00
 8006e68:	40010400 	.word	0x40010400
 8006e6c:	40014000 	.word	0x40014000
 8006e70:	40001800 	.word	0x40001800

08006e74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e041      	b.n	8006f0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d106      	bne.n	8006ea0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f839 	bl	8006f12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	f000 fbba 	bl	800762c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <HAL_TIM_PWM_Start+0x24>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	bf14      	ite	ne
 8006f44:	2301      	movne	r3, #1
 8006f46:	2300      	moveq	r3, #0
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	e022      	b.n	8006f92 <HAL_TIM_PWM_Start+0x6a>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d109      	bne.n	8006f66 <HAL_TIM_PWM_Start+0x3e>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	bf14      	ite	ne
 8006f5e:	2301      	movne	r3, #1
 8006f60:	2300      	moveq	r3, #0
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	e015      	b.n	8006f92 <HAL_TIM_PWM_Start+0x6a>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b08      	cmp	r3, #8
 8006f6a:	d109      	bne.n	8006f80 <HAL_TIM_PWM_Start+0x58>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	bf14      	ite	ne
 8006f78:	2301      	movne	r3, #1
 8006f7a:	2300      	moveq	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	e008      	b.n	8006f92 <HAL_TIM_PWM_Start+0x6a>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	bf14      	ite	ne
 8006f8c:	2301      	movne	r3, #1
 8006f8e:	2300      	moveq	r3, #0
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e07c      	b.n	8007094 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d104      	bne.n	8006faa <HAL_TIM_PWM_Start+0x82>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fa8:	e013      	b.n	8006fd2 <HAL_TIM_PWM_Start+0xaa>
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d104      	bne.n	8006fba <HAL_TIM_PWM_Start+0x92>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fb8:	e00b      	b.n	8006fd2 <HAL_TIM_PWM_Start+0xaa>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d104      	bne.n	8006fca <HAL_TIM_PWM_Start+0xa2>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fc8:	e003      	b.n	8006fd2 <HAL_TIM_PWM_Start+0xaa>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fe10 	bl	8007c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a2d      	ldr	r2, [pc, #180]	; (800709c <HAL_TIM_PWM_Start+0x174>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d004      	beq.n	8006ff4 <HAL_TIM_PWM_Start+0xcc>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a2c      	ldr	r2, [pc, #176]	; (80070a0 <HAL_TIM_PWM_Start+0x178>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d101      	bne.n	8006ff8 <HAL_TIM_PWM_Start+0xd0>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e000      	b.n	8006ffa <HAL_TIM_PWM_Start+0xd2>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d007      	beq.n	800700e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800700c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a22      	ldr	r2, [pc, #136]	; (800709c <HAL_TIM_PWM_Start+0x174>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d022      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007020:	d01d      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1f      	ldr	r2, [pc, #124]	; (80070a4 <HAL_TIM_PWM_Start+0x17c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d018      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a1d      	ldr	r2, [pc, #116]	; (80070a8 <HAL_TIM_PWM_Start+0x180>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d013      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1c      	ldr	r2, [pc, #112]	; (80070ac <HAL_TIM_PWM_Start+0x184>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00e      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a16      	ldr	r2, [pc, #88]	; (80070a0 <HAL_TIM_PWM_Start+0x178>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d009      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <HAL_TIM_PWM_Start+0x188>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d004      	beq.n	800705e <HAL_TIM_PWM_Start+0x136>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a16      	ldr	r2, [pc, #88]	; (80070b4 <HAL_TIM_PWM_Start+0x18c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d111      	bne.n	8007082 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2b06      	cmp	r3, #6
 800706e:	d010      	beq.n	8007092 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0201 	orr.w	r2, r2, #1
 800707e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007080:	e007      	b.n	8007092 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0201 	orr.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	40010000 	.word	0x40010000
 80070a0:	40010400 	.word	0x40010400
 80070a4:	40000400 	.word	0x40000400
 80070a8:	40000800 	.word	0x40000800
 80070ac:	40000c00 	.word	0x40000c00
 80070b0:	40014000 	.word	0x40014000
 80070b4:	40001800 	.word	0x40001800

080070b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d122      	bne.n	8007114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d11b      	bne.n	8007114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0202 	mvn.w	r2, #2
 80070e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa77 	bl	80075ee <HAL_TIM_IC_CaptureCallback>
 8007100:	e005      	b.n	800710e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fa69 	bl	80075da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fa7a 	bl	8007602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0304 	and.w	r3, r3, #4
 800711e:	2b04      	cmp	r3, #4
 8007120:	d122      	bne.n	8007168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b04      	cmp	r3, #4
 800712e:	d11b      	bne.n	8007168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f06f 0204 	mvn.w	r2, #4
 8007138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2202      	movs	r2, #2
 800713e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fa4d 	bl	80075ee <HAL_TIM_IC_CaptureCallback>
 8007154:	e005      	b.n	8007162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fa3f 	bl	80075da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fa50 	bl	8007602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0308 	and.w	r3, r3, #8
 8007172:	2b08      	cmp	r3, #8
 8007174:	d122      	bne.n	80071bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b08      	cmp	r3, #8
 8007182:	d11b      	bne.n	80071bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0208 	mvn.w	r2, #8
 800718c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2204      	movs	r2, #4
 8007192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fa23 	bl	80075ee <HAL_TIM_IC_CaptureCallback>
 80071a8:	e005      	b.n	80071b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fa15 	bl	80075da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fa26 	bl	8007602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0310 	and.w	r3, r3, #16
 80071c6:	2b10      	cmp	r3, #16
 80071c8:	d122      	bne.n	8007210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0310 	and.w	r3, r3, #16
 80071d4:	2b10      	cmp	r3, #16
 80071d6:	d11b      	bne.n	8007210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0210 	mvn.w	r2, #16
 80071e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2208      	movs	r2, #8
 80071e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f9f9 	bl	80075ee <HAL_TIM_IC_CaptureCallback>
 80071fc:	e005      	b.n	800720a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f9eb 	bl	80075da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f9fc 	bl	8007602 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b01      	cmp	r3, #1
 800721c:	d10e      	bne.n	800723c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b01      	cmp	r3, #1
 800722a:	d107      	bne.n	800723c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0201 	mvn.w	r2, #1
 8007234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f7fb fd8a 	bl	8002d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007246:	2b80      	cmp	r3, #128	; 0x80
 8007248:	d10e      	bne.n	8007268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007254:	2b80      	cmp	r3, #128	; 0x80
 8007256:	d107      	bne.n	8007268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fd78 	bl	8007d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007272:	2b40      	cmp	r3, #64	; 0x40
 8007274:	d10e      	bne.n	8007294 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b40      	cmp	r3, #64	; 0x40
 8007282:	d107      	bne.n	8007294 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800728c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f9c1 	bl	8007616 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b20      	cmp	r3, #32
 80072a0:	d10e      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	d107      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0220 	mvn.w	r2, #32
 80072b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fd42 	bl	8007d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072e2:	2302      	movs	r3, #2
 80072e4:	e0ae      	b.n	8007444 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b0c      	cmp	r3, #12
 80072f2:	f200 809f 	bhi.w	8007434 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80072f6:	a201      	add	r2, pc, #4	; (adr r2, 80072fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fc:	08007331 	.word	0x08007331
 8007300:	08007435 	.word	0x08007435
 8007304:	08007435 	.word	0x08007435
 8007308:	08007435 	.word	0x08007435
 800730c:	08007371 	.word	0x08007371
 8007310:	08007435 	.word	0x08007435
 8007314:	08007435 	.word	0x08007435
 8007318:	08007435 	.word	0x08007435
 800731c:	080073b3 	.word	0x080073b3
 8007320:	08007435 	.word	0x08007435
 8007324:	08007435 	.word	0x08007435
 8007328:	08007435 	.word	0x08007435
 800732c:	080073f3 	.word	0x080073f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	4618      	mov	r0, r3
 8007338:	f000 fa18 	bl	800776c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0208 	orr.w	r2, r2, #8
 800734a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699a      	ldr	r2, [r3, #24]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0204 	bic.w	r2, r2, #4
 800735a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6999      	ldr	r1, [r3, #24]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	691a      	ldr	r2, [r3, #16]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	619a      	str	r2, [r3, #24]
      break;
 800736e:	e064      	b.n	800743a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68b9      	ldr	r1, [r7, #8]
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fa68 	bl	800784c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	699a      	ldr	r2, [r3, #24]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800738a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	699a      	ldr	r2, [r3, #24]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6999      	ldr	r1, [r3, #24]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	021a      	lsls	r2, r3, #8
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	619a      	str	r2, [r3, #24]
      break;
 80073b0:	e043      	b.n	800743a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68b9      	ldr	r1, [r7, #8]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fabd 	bl	8007938 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69da      	ldr	r2, [r3, #28]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0208 	orr.w	r2, r2, #8
 80073cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69da      	ldr	r2, [r3, #28]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0204 	bic.w	r2, r2, #4
 80073dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69d9      	ldr	r1, [r3, #28]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	691a      	ldr	r2, [r3, #16]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	61da      	str	r2, [r3, #28]
      break;
 80073f0:	e023      	b.n	800743a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68b9      	ldr	r1, [r7, #8]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 fb11 	bl	8007a20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69da      	ldr	r2, [r3, #28]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800740c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69da      	ldr	r2, [r3, #28]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800741c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69d9      	ldr	r1, [r3, #28]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	021a      	lsls	r2, r3, #8
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	61da      	str	r2, [r3, #28]
      break;
 8007432:	e002      	b.n	800743a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	75fb      	strb	r3, [r7, #23]
      break;
 8007438:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007442:	7dfb      	ldrb	r3, [r7, #23]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_TIM_ConfigClockSource+0x1c>
 8007464:	2302      	movs	r3, #2
 8007466:	e0b4      	b.n	80075d2 <HAL_TIM_ConfigClockSource+0x186>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800748e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a0:	d03e      	beq.n	8007520 <HAL_TIM_ConfigClockSource+0xd4>
 80074a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a6:	f200 8087 	bhi.w	80075b8 <HAL_TIM_ConfigClockSource+0x16c>
 80074aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ae:	f000 8086 	beq.w	80075be <HAL_TIM_ConfigClockSource+0x172>
 80074b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b6:	d87f      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x16c>
 80074b8:	2b70      	cmp	r3, #112	; 0x70
 80074ba:	d01a      	beq.n	80074f2 <HAL_TIM_ConfigClockSource+0xa6>
 80074bc:	2b70      	cmp	r3, #112	; 0x70
 80074be:	d87b      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x16c>
 80074c0:	2b60      	cmp	r3, #96	; 0x60
 80074c2:	d050      	beq.n	8007566 <HAL_TIM_ConfigClockSource+0x11a>
 80074c4:	2b60      	cmp	r3, #96	; 0x60
 80074c6:	d877      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x16c>
 80074c8:	2b50      	cmp	r3, #80	; 0x50
 80074ca:	d03c      	beq.n	8007546 <HAL_TIM_ConfigClockSource+0xfa>
 80074cc:	2b50      	cmp	r3, #80	; 0x50
 80074ce:	d873      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x16c>
 80074d0:	2b40      	cmp	r3, #64	; 0x40
 80074d2:	d058      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0x13a>
 80074d4:	2b40      	cmp	r3, #64	; 0x40
 80074d6:	d86f      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x16c>
 80074d8:	2b30      	cmp	r3, #48	; 0x30
 80074da:	d064      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x15a>
 80074dc:	2b30      	cmp	r3, #48	; 0x30
 80074de:	d86b      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x16c>
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d060      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x15a>
 80074e4:	2b20      	cmp	r3, #32
 80074e6:	d867      	bhi.n	80075b8 <HAL_TIM_ConfigClockSource+0x16c>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d05c      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x15a>
 80074ec:	2b10      	cmp	r3, #16
 80074ee:	d05a      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x15a>
 80074f0:	e062      	b.n	80075b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	6899      	ldr	r1, [r3, #8]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f000 fb5d 	bl	8007bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007514:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	609a      	str	r2, [r3, #8]
      break;
 800751e:	e04f      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6818      	ldr	r0, [r3, #0]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	6899      	ldr	r1, [r3, #8]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f000 fb46 	bl	8007bc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007542:	609a      	str	r2, [r3, #8]
      break;
 8007544:	e03c      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6818      	ldr	r0, [r3, #0]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	6859      	ldr	r1, [r3, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	461a      	mov	r2, r3
 8007554:	f000 faba 	bl	8007acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2150      	movs	r1, #80	; 0x50
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fb13 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 8007564:	e02c      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6859      	ldr	r1, [r3, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	461a      	mov	r2, r3
 8007574:	f000 fad9 	bl	8007b2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2160      	movs	r1, #96	; 0x60
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fb03 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 8007584:	e01c      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6818      	ldr	r0, [r3, #0]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	6859      	ldr	r1, [r3, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	461a      	mov	r2, r3
 8007594:	f000 fa9a 	bl	8007acc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2140      	movs	r1, #64	; 0x40
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 faf3 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 80075a4:	e00c      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4619      	mov	r1, r3
 80075b0:	4610      	mov	r0, r2
 80075b2:	f000 faea 	bl	8007b8a <TIM_ITRx_SetConfig>
      break;
 80075b6:	e003      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	73fb      	strb	r3, [r7, #15]
      break;
 80075bc:	e000      	b.n	80075c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075e2:	bf00      	nop
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075f6:	bf00      	nop
 80075f8:	370c      	adds	r7, #12
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
	...

0800762c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a40      	ldr	r2, [pc, #256]	; (8007740 <TIM_Base_SetConfig+0x114>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d013      	beq.n	800766c <TIM_Base_SetConfig+0x40>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764a:	d00f      	beq.n	800766c <TIM_Base_SetConfig+0x40>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a3d      	ldr	r2, [pc, #244]	; (8007744 <TIM_Base_SetConfig+0x118>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d00b      	beq.n	800766c <TIM_Base_SetConfig+0x40>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a3c      	ldr	r2, [pc, #240]	; (8007748 <TIM_Base_SetConfig+0x11c>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d007      	beq.n	800766c <TIM_Base_SetConfig+0x40>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a3b      	ldr	r2, [pc, #236]	; (800774c <TIM_Base_SetConfig+0x120>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d003      	beq.n	800766c <TIM_Base_SetConfig+0x40>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a3a      	ldr	r2, [pc, #232]	; (8007750 <TIM_Base_SetConfig+0x124>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d108      	bne.n	800767e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a2f      	ldr	r2, [pc, #188]	; (8007740 <TIM_Base_SetConfig+0x114>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d02b      	beq.n	80076de <TIM_Base_SetConfig+0xb2>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800768c:	d027      	beq.n	80076de <TIM_Base_SetConfig+0xb2>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a2c      	ldr	r2, [pc, #176]	; (8007744 <TIM_Base_SetConfig+0x118>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d023      	beq.n	80076de <TIM_Base_SetConfig+0xb2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a2b      	ldr	r2, [pc, #172]	; (8007748 <TIM_Base_SetConfig+0x11c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d01f      	beq.n	80076de <TIM_Base_SetConfig+0xb2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a2a      	ldr	r2, [pc, #168]	; (800774c <TIM_Base_SetConfig+0x120>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d01b      	beq.n	80076de <TIM_Base_SetConfig+0xb2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a29      	ldr	r2, [pc, #164]	; (8007750 <TIM_Base_SetConfig+0x124>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d017      	beq.n	80076de <TIM_Base_SetConfig+0xb2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a28      	ldr	r2, [pc, #160]	; (8007754 <TIM_Base_SetConfig+0x128>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d013      	beq.n	80076de <TIM_Base_SetConfig+0xb2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a27      	ldr	r2, [pc, #156]	; (8007758 <TIM_Base_SetConfig+0x12c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d00f      	beq.n	80076de <TIM_Base_SetConfig+0xb2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a26      	ldr	r2, [pc, #152]	; (800775c <TIM_Base_SetConfig+0x130>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d00b      	beq.n	80076de <TIM_Base_SetConfig+0xb2>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a25      	ldr	r2, [pc, #148]	; (8007760 <TIM_Base_SetConfig+0x134>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d007      	beq.n	80076de <TIM_Base_SetConfig+0xb2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a24      	ldr	r2, [pc, #144]	; (8007764 <TIM_Base_SetConfig+0x138>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d003      	beq.n	80076de <TIM_Base_SetConfig+0xb2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a23      	ldr	r2, [pc, #140]	; (8007768 <TIM_Base_SetConfig+0x13c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d108      	bne.n	80076f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a0a      	ldr	r2, [pc, #40]	; (8007740 <TIM_Base_SetConfig+0x114>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d003      	beq.n	8007724 <TIM_Base_SetConfig+0xf8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a0c      	ldr	r2, [pc, #48]	; (8007750 <TIM_Base_SetConfig+0x124>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d103      	bne.n	800772c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	691a      	ldr	r2, [r3, #16]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	615a      	str	r2, [r3, #20]
}
 8007732:	bf00      	nop
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	40010000 	.word	0x40010000
 8007744:	40000400 	.word	0x40000400
 8007748:	40000800 	.word	0x40000800
 800774c:	40000c00 	.word	0x40000c00
 8007750:	40010400 	.word	0x40010400
 8007754:	40014000 	.word	0x40014000
 8007758:	40014400 	.word	0x40014400
 800775c:	40014800 	.word	0x40014800
 8007760:	40001800 	.word	0x40001800
 8007764:	40001c00 	.word	0x40001c00
 8007768:	40002000 	.word	0x40002000

0800776c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	f023 0201 	bic.w	r2, r3, #1
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800779a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0303 	bic.w	r3, r3, #3
 80077a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f023 0302 	bic.w	r3, r3, #2
 80077b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4313      	orrs	r3, r2
 80077be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a20      	ldr	r2, [pc, #128]	; (8007844 <TIM_OC1_SetConfig+0xd8>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d003      	beq.n	80077d0 <TIM_OC1_SetConfig+0x64>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a1f      	ldr	r2, [pc, #124]	; (8007848 <TIM_OC1_SetConfig+0xdc>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d10c      	bne.n	80077ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f023 0308 	bic.w	r3, r3, #8
 80077d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	4313      	orrs	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f023 0304 	bic.w	r3, r3, #4
 80077e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a15      	ldr	r2, [pc, #84]	; (8007844 <TIM_OC1_SetConfig+0xd8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d003      	beq.n	80077fa <TIM_OC1_SetConfig+0x8e>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a14      	ldr	r2, [pc, #80]	; (8007848 <TIM_OC1_SetConfig+0xdc>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d111      	bne.n	800781e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4313      	orrs	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4313      	orrs	r3, r2
 800781c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	621a      	str	r2, [r3, #32]
}
 8007838:	bf00      	nop
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	40010000 	.word	0x40010000
 8007848:	40010400 	.word	0x40010400

0800784c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	f023 0210 	bic.w	r2, r3, #16
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800787a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	4313      	orrs	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f023 0320 	bic.w	r3, r3, #32
 8007896:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a22      	ldr	r2, [pc, #136]	; (8007930 <TIM_OC2_SetConfig+0xe4>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d003      	beq.n	80078b4 <TIM_OC2_SetConfig+0x68>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a21      	ldr	r2, [pc, #132]	; (8007934 <TIM_OC2_SetConfig+0xe8>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d10d      	bne.n	80078d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a17      	ldr	r2, [pc, #92]	; (8007930 <TIM_OC2_SetConfig+0xe4>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d003      	beq.n	80078e0 <TIM_OC2_SetConfig+0x94>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a16      	ldr	r2, [pc, #88]	; (8007934 <TIM_OC2_SetConfig+0xe8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d113      	bne.n	8007908 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	4313      	orrs	r3, r2
 8007906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	621a      	str	r2, [r3, #32]
}
 8007922:	bf00      	nop
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	40010000 	.word	0x40010000
 8007934:	40010400 	.word	0x40010400

08007938 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 0303 	bic.w	r3, r3, #3
 800796e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	021b      	lsls	r3, r3, #8
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	4313      	orrs	r3, r2
 800798c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a21      	ldr	r2, [pc, #132]	; (8007a18 <TIM_OC3_SetConfig+0xe0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d003      	beq.n	800799e <TIM_OC3_SetConfig+0x66>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a20      	ldr	r2, [pc, #128]	; (8007a1c <TIM_OC3_SetConfig+0xe4>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d10d      	bne.n	80079ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	021b      	lsls	r3, r3, #8
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a16      	ldr	r2, [pc, #88]	; (8007a18 <TIM_OC3_SetConfig+0xe0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d003      	beq.n	80079ca <TIM_OC3_SetConfig+0x92>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a15      	ldr	r2, [pc, #84]	; (8007a1c <TIM_OC3_SetConfig+0xe4>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d113      	bne.n	80079f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	011b      	lsls	r3, r3, #4
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	011b      	lsls	r3, r3, #4
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	621a      	str	r2, [r3, #32]
}
 8007a0c:	bf00      	nop
 8007a0e:	371c      	adds	r7, #28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	40010000 	.word	0x40010000
 8007a1c:	40010400 	.word	0x40010400

08007a20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	021b      	lsls	r3, r3, #8
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	031b      	lsls	r3, r3, #12
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a12      	ldr	r2, [pc, #72]	; (8007ac4 <TIM_OC4_SetConfig+0xa4>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d003      	beq.n	8007a88 <TIM_OC4_SetConfig+0x68>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a11      	ldr	r2, [pc, #68]	; (8007ac8 <TIM_OC4_SetConfig+0xa8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d109      	bne.n	8007a9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	019b      	lsls	r3, r3, #6
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	621a      	str	r2, [r3, #32]
}
 8007ab6:	bf00      	nop
 8007ab8:	371c      	adds	r7, #28
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40010000 	.word	0x40010000
 8007ac8:	40010400 	.word	0x40010400

08007acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0201 	bic.w	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f023 030a 	bic.w	r3, r3, #10
 8007b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	621a      	str	r2, [r3, #32]
}
 8007b1e:	bf00      	nop
 8007b20:	371c      	adds	r7, #28
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b087      	sub	sp, #28
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	f023 0210 	bic.w	r2, r3, #16
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	031b      	lsls	r3, r3, #12
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	621a      	str	r2, [r3, #32]
}
 8007b7e:	bf00      	nop
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f043 0307 	orr.w	r3, r3, #7
 8007bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	609a      	str	r2, [r3, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	021a      	lsls	r2, r3, #8
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	431a      	orrs	r2, r3
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	609a      	str	r2, [r3, #8]
}
 8007bf4:	bf00      	nop
 8007bf6:	371c      	adds	r7, #28
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f003 031f 	and.w	r3, r3, #31
 8007c12:	2201      	movs	r2, #1
 8007c14:	fa02 f303 	lsl.w	r3, r2, r3
 8007c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1a      	ldr	r2, [r3, #32]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	43db      	mvns	r3, r3
 8007c22:	401a      	ands	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a1a      	ldr	r2, [r3, #32]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f003 031f 	and.w	r3, r3, #31
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	fa01 f303 	lsl.w	r3, r1, r3
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
	...

08007c4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d101      	bne.n	8007c64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c60:	2302      	movs	r3, #2
 8007c62:	e05a      	b.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68fa      	ldr	r2, [r7, #12]
 8007c9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a21      	ldr	r2, [pc, #132]	; (8007d28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d022      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb0:	d01d      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a1d      	ldr	r2, [pc, #116]	; (8007d2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d018      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a1b      	ldr	r2, [pc, #108]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d013      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a1a      	ldr	r2, [pc, #104]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00e      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a18      	ldr	r2, [pc, #96]	; (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d009      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a17      	ldr	r2, [pc, #92]	; (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d004      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a15      	ldr	r2, [pc, #84]	; (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d10c      	bne.n	8007d08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800
 8007d34:	40000c00 	.word	0x40000c00
 8007d38:	40010400 	.word	0x40010400
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40001800 	.word	0x40001800

08007d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e03f      	b.n	8007dfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fb fb1c 	bl	80033d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2224      	movs	r2, #36	; 0x24
 8007d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68da      	ldr	r2, [r3, #12]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fddb 	bl	800896c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	691a      	ldr	r2, [r3, #16]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	695a      	ldr	r2, [r3, #20]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007de4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b08a      	sub	sp, #40	; 0x28
 8007e0a:	af02      	add	r7, sp, #8
 8007e0c:	60f8      	str	r0, [r7, #12]
 8007e0e:	60b9      	str	r1, [r7, #8]
 8007e10:	603b      	str	r3, [r7, #0]
 8007e12:	4613      	mov	r3, r2
 8007e14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	d17c      	bne.n	8007f20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <HAL_UART_Transmit+0x2c>
 8007e2c:	88fb      	ldrh	r3, [r7, #6]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e075      	b.n	8007f22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d101      	bne.n	8007e44 <HAL_UART_Transmit+0x3e>
 8007e40:	2302      	movs	r3, #2
 8007e42:	e06e      	b.n	8007f22 <HAL_UART_Transmit+0x11c>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2221      	movs	r2, #33	; 0x21
 8007e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e5a:	f7fb fbb3 	bl	80035c4 <HAL_GetTick>
 8007e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	88fa      	ldrh	r2, [r7, #6]
 8007e64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	88fa      	ldrh	r2, [r7, #6]
 8007e6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e74:	d108      	bne.n	8007e88 <HAL_UART_Transmit+0x82>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d104      	bne.n	8007e88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	61bb      	str	r3, [r7, #24]
 8007e86:	e003      	b.n	8007e90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007e98:	e02a      	b.n	8007ef0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2180      	movs	r1, #128	; 0x80
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 fb1f 	bl	80084e8 <UART_WaitOnFlagUntilTimeout>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e036      	b.n	8007f22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10b      	bne.n	8007ed2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ec8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	3302      	adds	r3, #2
 8007ece:	61bb      	str	r3, [r7, #24]
 8007ed0:	e007      	b.n	8007ee2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ed2:	69fb      	ldr	r3, [r7, #28]
 8007ed4:	781a      	ldrb	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1cf      	bne.n	8007e9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2200      	movs	r2, #0
 8007f02:	2140      	movs	r1, #64	; 0x40
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 faef 	bl	80084e8 <UART_WaitOnFlagUntilTimeout>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e006      	b.n	8007f22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	e000      	b.n	8007f22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f20:	2302      	movs	r3, #2
  }
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3720      	adds	r7, #32
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	4613      	mov	r3, r2
 8007f36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d11d      	bne.n	8007f80 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <HAL_UART_Receive_IT+0x26>
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e016      	b.n	8007f82 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d101      	bne.n	8007f62 <HAL_UART_Receive_IT+0x38>
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e00f      	b.n	8007f82 <HAL_UART_Receive_IT+0x58>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f70:	88fb      	ldrh	r3, [r7, #6]
 8007f72:	461a      	mov	r2, r3
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 fb24 	bl	80085c4 <UART_Start_Receive_IT>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	e000      	b.n	8007f82 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007f80:	2302      	movs	r3, #2
  }
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b0ba      	sub	sp, #232	; 0xe8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10f      	bne.n	8007ff2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d009      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x66>
 8007fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fe2:	f003 0320 	and.w	r3, r3, #32
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fc03 	bl	80087f6 <UART_Receive_IT>
      return;
 8007ff0:	e256      	b.n	80084a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 80de 	beq.w	80081b8 <HAL_UART_IRQHandler+0x22c>
 8007ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	d106      	bne.n	8008016 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800800c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 80d1 	beq.w	80081b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00b      	beq.n	800803a <HAL_UART_IRQHandler+0xae>
 8008022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	f043 0201 	orr.w	r2, r3, #1
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800803a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800803e:	f003 0304 	and.w	r3, r3, #4
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00b      	beq.n	800805e <HAL_UART_IRQHandler+0xd2>
 8008046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b00      	cmp	r3, #0
 8008050:	d005      	beq.n	800805e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	f043 0202 	orr.w	r2, r3, #2
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800805e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00b      	beq.n	8008082 <HAL_UART_IRQHandler+0xf6>
 800806a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	f043 0204 	orr.w	r2, r3, #4
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008086:	f003 0308 	and.w	r3, r3, #8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d011      	beq.n	80080b2 <HAL_UART_IRQHandler+0x126>
 800808e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b00      	cmp	r3, #0
 8008098:	d105      	bne.n	80080a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800809a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d005      	beq.n	80080b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	f043 0208 	orr.w	r2, r3, #8
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 81ed 	beq.w	8008496 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c0:	f003 0320 	and.w	r3, r3, #32
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d008      	beq.n	80080da <HAL_UART_IRQHandler+0x14e>
 80080c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080cc:	f003 0320 	and.w	r3, r3, #32
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fb8e 	bl	80087f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e4:	2b40      	cmp	r3, #64	; 0x40
 80080e6:	bf0c      	ite	eq
 80080e8:	2301      	moveq	r3, #1
 80080ea:	2300      	movne	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f003 0308 	and.w	r3, r3, #8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <HAL_UART_IRQHandler+0x17a>
 80080fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d04f      	beq.n	80081a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa96 	bl	8008638 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008116:	2b40      	cmp	r3, #64	; 0x40
 8008118:	d141      	bne.n	800819e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3314      	adds	r3, #20
 8008120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008128:	e853 3f00 	ldrex	r3, [r3]
 800812c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008130:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3314      	adds	r3, #20
 8008142:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008146:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800814a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008152:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800815e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1d9      	bne.n	800811a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	2b00      	cmp	r3, #0
 800816c:	d013      	beq.n	8008196 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008172:	4a7d      	ldr	r2, [pc, #500]	; (8008368 <HAL_UART_IRQHandler+0x3dc>)
 8008174:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817a:	4618      	mov	r0, r3
 800817c:	f7fc f8ec 	bl	8004358 <HAL_DMA_Abort_IT>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d016      	beq.n	80081b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008194:	e00e      	b.n	80081b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f990 	bl	80084bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800819c:	e00a      	b.n	80081b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f98c 	bl	80084bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a4:	e006      	b.n	80081b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f988 	bl	80084bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80081b2:	e170      	b.n	8008496 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b4:	bf00      	nop
    return;
 80081b6:	e16e      	b.n	8008496 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	2b01      	cmp	r3, #1
 80081be:	f040 814a 	bne.w	8008456 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80081c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c6:	f003 0310 	and.w	r3, r3, #16
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 8143 	beq.w	8008456 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80081d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d4:	f003 0310 	and.w	r3, r3, #16
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 813c 	beq.w	8008456 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081de:	2300      	movs	r3, #0
 80081e0:	60bb      	str	r3, [r7, #8]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	60bb      	str	r3, [r7, #8]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	60bb      	str	r3, [r7, #8]
 80081f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081fe:	2b40      	cmp	r3, #64	; 0x40
 8008200:	f040 80b4 	bne.w	800836c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008210:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8140 	beq.w	800849a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800821e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008222:	429a      	cmp	r2, r3
 8008224:	f080 8139 	bcs.w	800849a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800822e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800823a:	f000 8088 	beq.w	800834e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	330c      	adds	r3, #12
 8008244:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800825c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	330c      	adds	r3, #12
 8008266:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800826a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800826e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1d9      	bne.n	800823e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3314      	adds	r3, #20
 8008290:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800829a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800829c:	f023 0301 	bic.w	r3, r3, #1
 80082a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3314      	adds	r3, #20
 80082aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e1      	bne.n	800828a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3314      	adds	r3, #20
 80082cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3314      	adds	r3, #20
 80082e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082f2:	e841 2300 	strex	r3, r2, [r1]
 80082f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1e3      	bne.n	80082c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2220      	movs	r2, #32
 8008302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	330c      	adds	r3, #12
 8008312:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008316:	e853 3f00 	ldrex	r3, [r3]
 800831a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800831c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800831e:	f023 0310 	bic.w	r3, r3, #16
 8008322:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	330c      	adds	r3, #12
 800832c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008330:	65ba      	str	r2, [r7, #88]	; 0x58
 8008332:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008334:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008336:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008338:	e841 2300 	strex	r3, r2, [r1]
 800833c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800833e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1e3      	bne.n	800830c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	4618      	mov	r0, r3
 800834a:	f7fb ff95 	bl	8004278 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008356:	b29b      	uxth	r3, r3
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	b29b      	uxth	r3, r3
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f8b6 	bl	80084d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008364:	e099      	b.n	800849a <HAL_UART_IRQHandler+0x50e>
 8008366:	bf00      	nop
 8008368:	080086ff 	.word	0x080086ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008374:	b29b      	uxth	r3, r3
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008380:	b29b      	uxth	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 808b 	beq.w	800849e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 8086 	beq.w	800849e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	330c      	adds	r3, #12
 8008398:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	330c      	adds	r3, #12
 80083b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80083b6:	647a      	str	r2, [r7, #68]	; 0x44
 80083b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083be:	e841 2300 	strex	r3, r2, [r1]
 80083c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1e3      	bne.n	8008392 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3314      	adds	r3, #20
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	623b      	str	r3, [r7, #32]
   return(result);
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	f023 0301 	bic.w	r3, r3, #1
 80083e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3314      	adds	r3, #20
 80083ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083ee:	633a      	str	r2, [r7, #48]	; 0x30
 80083f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083f6:	e841 2300 	strex	r3, r2, [r1]
 80083fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1e3      	bne.n	80083ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2220      	movs	r2, #32
 8008406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	330c      	adds	r3, #12
 8008416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f023 0310 	bic.w	r3, r3, #16
 8008426:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	330c      	adds	r3, #12
 8008430:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008434:	61fa      	str	r2, [r7, #28]
 8008436:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008438:	69b9      	ldr	r1, [r7, #24]
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	e841 2300 	strex	r3, r2, [r1]
 8008440:	617b      	str	r3, [r7, #20]
   return(result);
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1e3      	bne.n	8008410 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800844c:	4619      	mov	r1, r3
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f83e 	bl	80084d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008454:	e023      	b.n	800849e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845e:	2b00      	cmp	r3, #0
 8008460:	d009      	beq.n	8008476 <HAL_UART_IRQHandler+0x4ea>
 8008462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f959 	bl	8008726 <UART_Transmit_IT>
    return;
 8008474:	e014      	b.n	80084a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800847a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00e      	beq.n	80084a0 <HAL_UART_IRQHandler+0x514>
 8008482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848a:	2b00      	cmp	r3, #0
 800848c:	d008      	beq.n	80084a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f999 	bl	80087c6 <UART_EndTransmit_IT>
    return;
 8008494:	e004      	b.n	80084a0 <HAL_UART_IRQHandler+0x514>
    return;
 8008496:	bf00      	nop
 8008498:	e002      	b.n	80084a0 <HAL_UART_IRQHandler+0x514>
      return;
 800849a:	bf00      	nop
 800849c:	e000      	b.n	80084a0 <HAL_UART_IRQHandler+0x514>
      return;
 800849e:	bf00      	nop
  }
}
 80084a0:	37e8      	adds	r7, #232	; 0xe8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop

080084a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b090      	sub	sp, #64	; 0x40
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	4613      	mov	r3, r2
 80084f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084f8:	e050      	b.n	800859c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008500:	d04c      	beq.n	800859c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <UART_WaitOnFlagUntilTimeout+0x30>
 8008508:	f7fb f85c 	bl	80035c4 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008514:	429a      	cmp	r2, r3
 8008516:	d241      	bcs.n	800859c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	330c      	adds	r3, #12
 800851e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008522:	e853 3f00 	ldrex	r3, [r3]
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800852e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	330c      	adds	r3, #12
 8008536:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008538:	637a      	str	r2, [r7, #52]	; 0x34
 800853a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800853e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008540:	e841 2300 	strex	r3, r2, [r1]
 8008544:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e5      	bne.n	8008518 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3314      	adds	r3, #20
 8008552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	613b      	str	r3, [r7, #16]
   return(result);
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f023 0301 	bic.w	r3, r3, #1
 8008562:	63bb      	str	r3, [r7, #56]	; 0x38
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3314      	adds	r3, #20
 800856a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800856c:	623a      	str	r2, [r7, #32]
 800856e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	69f9      	ldr	r1, [r7, #28]
 8008572:	6a3a      	ldr	r2, [r7, #32]
 8008574:	e841 2300 	strex	r3, r2, [r1]
 8008578:	61bb      	str	r3, [r7, #24]
   return(result);
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e5      	bne.n	800854c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2220      	movs	r2, #32
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2220      	movs	r2, #32
 800858c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e00f      	b.n	80085bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	4013      	ands	r3, r2
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	461a      	mov	r2, r3
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d09f      	beq.n	80084fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3740      	adds	r7, #64	; 0x40
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	4613      	mov	r3, r2
 80085d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	88fa      	ldrh	r2, [r7, #6]
 80085dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	88fa      	ldrh	r2, [r7, #6]
 80085e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2222      	movs	r2, #34	; 0x22
 80085ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008608:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	695a      	ldr	r2, [r3, #20]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f042 0201 	orr.w	r2, r2, #1
 8008618:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68da      	ldr	r2, [r3, #12]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f042 0220 	orr.w	r2, r2, #32
 8008628:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008638:	b480      	push	{r7}
 800863a:	b095      	sub	sp, #84	; 0x54
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	330c      	adds	r3, #12
 8008646:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864a:	e853 3f00 	ldrex	r3, [r3]
 800864e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008652:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	330c      	adds	r3, #12
 800865e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008660:	643a      	str	r2, [r7, #64]	; 0x40
 8008662:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800866e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e5      	bne.n	8008640 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3314      	adds	r3, #20
 800867a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	61fb      	str	r3, [r7, #28]
   return(result);
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	f023 0301 	bic.w	r3, r3, #1
 800868a:	64bb      	str	r3, [r7, #72]	; 0x48
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3314      	adds	r3, #20
 8008692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008694:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800869a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e5      	bne.n	8008674 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d119      	bne.n	80086e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	330c      	adds	r3, #12
 80086b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	e853 3f00 	ldrex	r3, [r3]
 80086be:	60bb      	str	r3, [r7, #8]
   return(result);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f023 0310 	bic.w	r3, r3, #16
 80086c6:	647b      	str	r3, [r7, #68]	; 0x44
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	330c      	adds	r3, #12
 80086ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086d0:	61ba      	str	r2, [r7, #24]
 80086d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d4:	6979      	ldr	r1, [r7, #20]
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	e841 2300 	strex	r3, r2, [r1]
 80086dc:	613b      	str	r3, [r7, #16]
   return(result);
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e5      	bne.n	80086b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80086f2:	bf00      	nop
 80086f4:	3754      	adds	r7, #84	; 0x54
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f7ff fecf 	bl	80084bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800871e:	bf00      	nop
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008726:	b480      	push	{r7}
 8008728:	b085      	sub	sp, #20
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b21      	cmp	r3, #33	; 0x21
 8008738:	d13e      	bne.n	80087b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008742:	d114      	bne.n	800876e <UART_Transmit_IT+0x48>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d110      	bne.n	800876e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a1b      	ldr	r3, [r3, #32]
 8008750:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008760:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	1c9a      	adds	r2, r3, #2
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	621a      	str	r2, [r3, #32]
 800876c:	e008      	b.n	8008780 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	1c59      	adds	r1, r3, #1
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	6211      	str	r1, [r2, #32]
 8008778:	781a      	ldrb	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008784:	b29b      	uxth	r3, r3
 8008786:	3b01      	subs	r3, #1
 8008788:	b29b      	uxth	r3, r3
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	4619      	mov	r1, r3
 800878e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10f      	bne.n	80087b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	e000      	b.n	80087ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80087b8:	2302      	movs	r3, #2
  }
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7ff fe5e 	bl	80084a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b08c      	sub	sp, #48	; 0x30
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b22      	cmp	r3, #34	; 0x22
 8008808:	f040 80ab 	bne.w	8008962 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008814:	d117      	bne.n	8008846 <UART_Receive_IT+0x50>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d113      	bne.n	8008846 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800881e:	2300      	movs	r3, #0
 8008820:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	b29b      	uxth	r3, r3
 8008830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008834:	b29a      	uxth	r2, r3
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883e:	1c9a      	adds	r2, r3, #2
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	629a      	str	r2, [r3, #40]	; 0x28
 8008844:	e026      	b.n	8008894 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800884c:	2300      	movs	r3, #0
 800884e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008858:	d007      	beq.n	800886a <UART_Receive_IT+0x74>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10a      	bne.n	8008878 <UART_Receive_IT+0x82>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d106      	bne.n	8008878 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	b2da      	uxtb	r2, r3
 8008872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008874:	701a      	strb	r2, [r3, #0]
 8008876:	e008      	b.n	800888a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	b2db      	uxtb	r3, r3
 8008880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008884:	b2da      	uxtb	r2, r3
 8008886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008888:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008898:	b29b      	uxth	r3, r3
 800889a:	3b01      	subs	r3, #1
 800889c:	b29b      	uxth	r3, r3
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	4619      	mov	r1, r3
 80088a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d15a      	bne.n	800895e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68da      	ldr	r2, [r3, #12]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0220 	bic.w	r2, r2, #32
 80088b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68da      	ldr	r2, [r3, #12]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	695a      	ldr	r2, [r3, #20]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0201 	bic.w	r2, r2, #1
 80088d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2220      	movs	r2, #32
 80088dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d135      	bne.n	8008954 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	330c      	adds	r3, #12
 80088f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	613b      	str	r3, [r7, #16]
   return(result);
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f023 0310 	bic.w	r3, r3, #16
 8008904:	627b      	str	r3, [r7, #36]	; 0x24
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	330c      	adds	r3, #12
 800890c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800890e:	623a      	str	r2, [r7, #32]
 8008910:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	69f9      	ldr	r1, [r7, #28]
 8008914:	6a3a      	ldr	r2, [r7, #32]
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	61bb      	str	r3, [r7, #24]
   return(result);
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e5      	bne.n	80088ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b10      	cmp	r3, #16
 800892e:	d10a      	bne.n	8008946 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7ff fdbf 	bl	80084d0 <HAL_UARTEx_RxEventCallback>
 8008952:	e002      	b.n	800895a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f7fa fcf3 	bl	8003340 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	e002      	b.n	8008964 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	e000      	b.n	8008964 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008962:	2302      	movs	r3, #2
  }
}
 8008964:	4618      	mov	r0, r3
 8008966:	3730      	adds	r7, #48	; 0x30
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800896c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008970:	b0c0      	sub	sp, #256	; 0x100
 8008972:	af00      	add	r7, sp, #0
 8008974:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008988:	68d9      	ldr	r1, [r3, #12]
 800898a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	ea40 0301 	orr.w	r3, r0, r1
 8008994:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800899a:	689a      	ldr	r2, [r3, #8]
 800899c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	431a      	orrs	r2, r3
 80089a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	431a      	orrs	r2, r3
 80089ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80089b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80089c4:	f021 010c 	bic.w	r1, r1, #12
 80089c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089d2:	430b      	orrs	r3, r1
 80089d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80089e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e6:	6999      	ldr	r1, [r3, #24]
 80089e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	ea40 0301 	orr.w	r3, r0, r1
 80089f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	4b8f      	ldr	r3, [pc, #572]	; (8008c38 <UART_SetConfig+0x2cc>)
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d005      	beq.n	8008a0c <UART_SetConfig+0xa0>
 8008a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	4b8d      	ldr	r3, [pc, #564]	; (8008c3c <UART_SetConfig+0x2d0>)
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d104      	bne.n	8008a16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a0c:	f7fd fb72 	bl	80060f4 <HAL_RCC_GetPCLK2Freq>
 8008a10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008a14:	e003      	b.n	8008a1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a16:	f7fd fb59 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 8008a1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a28:	f040 810c 	bne.w	8008c44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a30:	2200      	movs	r2, #0
 8008a32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a3e:	4622      	mov	r2, r4
 8008a40:	462b      	mov	r3, r5
 8008a42:	1891      	adds	r1, r2, r2
 8008a44:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a46:	415b      	adcs	r3, r3
 8008a48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a4e:	4621      	mov	r1, r4
 8008a50:	eb12 0801 	adds.w	r8, r2, r1
 8008a54:	4629      	mov	r1, r5
 8008a56:	eb43 0901 	adc.w	r9, r3, r1
 8008a5a:	f04f 0200 	mov.w	r2, #0
 8008a5e:	f04f 0300 	mov.w	r3, #0
 8008a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a6e:	4690      	mov	r8, r2
 8008a70:	4699      	mov	r9, r3
 8008a72:	4623      	mov	r3, r4
 8008a74:	eb18 0303 	adds.w	r3, r8, r3
 8008a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a7c:	462b      	mov	r3, r5
 8008a7e:	eb49 0303 	adc.w	r3, r9, r3
 8008a82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008a96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	18db      	adds	r3, r3, r3
 8008a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	eb42 0303 	adc.w	r3, r2, r3
 8008aa6:	657b      	str	r3, [r7, #84]	; 0x54
 8008aa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008aac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008ab0:	f7f7 fffc 	bl	8000aac <__aeabi_uldivmod>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4b61      	ldr	r3, [pc, #388]	; (8008c40 <UART_SetConfig+0x2d4>)
 8008aba:	fba3 2302 	umull	r2, r3, r3, r2
 8008abe:	095b      	lsrs	r3, r3, #5
 8008ac0:	011c      	lsls	r4, r3, #4
 8008ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008acc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ad0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ad4:	4642      	mov	r2, r8
 8008ad6:	464b      	mov	r3, r9
 8008ad8:	1891      	adds	r1, r2, r2
 8008ada:	64b9      	str	r1, [r7, #72]	; 0x48
 8008adc:	415b      	adcs	r3, r3
 8008ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ae0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ae4:	4641      	mov	r1, r8
 8008ae6:	eb12 0a01 	adds.w	sl, r2, r1
 8008aea:	4649      	mov	r1, r9
 8008aec:	eb43 0b01 	adc.w	fp, r3, r1
 8008af0:	f04f 0200 	mov.w	r2, #0
 8008af4:	f04f 0300 	mov.w	r3, #0
 8008af8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008afc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b04:	4692      	mov	sl, r2
 8008b06:	469b      	mov	fp, r3
 8008b08:	4643      	mov	r3, r8
 8008b0a:	eb1a 0303 	adds.w	r3, sl, r3
 8008b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b12:	464b      	mov	r3, r9
 8008b14:	eb4b 0303 	adc.w	r3, fp, r3
 8008b18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b30:	460b      	mov	r3, r1
 8008b32:	18db      	adds	r3, r3, r3
 8008b34:	643b      	str	r3, [r7, #64]	; 0x40
 8008b36:	4613      	mov	r3, r2
 8008b38:	eb42 0303 	adc.w	r3, r2, r3
 8008b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8008b3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008b46:	f7f7 ffb1 	bl	8000aac <__aeabi_uldivmod>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4611      	mov	r1, r2
 8008b50:	4b3b      	ldr	r3, [pc, #236]	; (8008c40 <UART_SetConfig+0x2d4>)
 8008b52:	fba3 2301 	umull	r2, r3, r3, r1
 8008b56:	095b      	lsrs	r3, r3, #5
 8008b58:	2264      	movs	r2, #100	; 0x64
 8008b5a:	fb02 f303 	mul.w	r3, r2, r3
 8008b5e:	1acb      	subs	r3, r1, r3
 8008b60:	00db      	lsls	r3, r3, #3
 8008b62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b66:	4b36      	ldr	r3, [pc, #216]	; (8008c40 <UART_SetConfig+0x2d4>)
 8008b68:	fba3 2302 	umull	r2, r3, r3, r2
 8008b6c:	095b      	lsrs	r3, r3, #5
 8008b6e:	005b      	lsls	r3, r3, #1
 8008b70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b74:	441c      	add	r4, r3
 8008b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008b84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008b88:	4642      	mov	r2, r8
 8008b8a:	464b      	mov	r3, r9
 8008b8c:	1891      	adds	r1, r2, r2
 8008b8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b90:	415b      	adcs	r3, r3
 8008b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b98:	4641      	mov	r1, r8
 8008b9a:	1851      	adds	r1, r2, r1
 8008b9c:	6339      	str	r1, [r7, #48]	; 0x30
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	414b      	adcs	r3, r1
 8008ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	f04f 0300 	mov.w	r3, #0
 8008bac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008bb0:	4659      	mov	r1, fp
 8008bb2:	00cb      	lsls	r3, r1, #3
 8008bb4:	4651      	mov	r1, sl
 8008bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bba:	4651      	mov	r1, sl
 8008bbc:	00ca      	lsls	r2, r1, #3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	4642      	mov	r2, r8
 8008bc6:	189b      	adds	r3, r3, r2
 8008bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bcc:	464b      	mov	r3, r9
 8008bce:	460a      	mov	r2, r1
 8008bd0:	eb42 0303 	adc.w	r3, r2, r3
 8008bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008be4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008be8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008bec:	460b      	mov	r3, r1
 8008bee:	18db      	adds	r3, r3, r3
 8008bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	eb42 0303 	adc.w	r3, r2, r3
 8008bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c02:	f7f7 ff53 	bl	8000aac <__aeabi_uldivmod>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <UART_SetConfig+0x2d4>)
 8008c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c10:	095b      	lsrs	r3, r3, #5
 8008c12:	2164      	movs	r1, #100	; 0x64
 8008c14:	fb01 f303 	mul.w	r3, r1, r3
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	3332      	adds	r3, #50	; 0x32
 8008c1e:	4a08      	ldr	r2, [pc, #32]	; (8008c40 <UART_SetConfig+0x2d4>)
 8008c20:	fba2 2303 	umull	r2, r3, r2, r3
 8008c24:	095b      	lsrs	r3, r3, #5
 8008c26:	f003 0207 	and.w	r2, r3, #7
 8008c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4422      	add	r2, r4
 8008c32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c34:	e106      	b.n	8008e44 <UART_SetConfig+0x4d8>
 8008c36:	bf00      	nop
 8008c38:	40011000 	.word	0x40011000
 8008c3c:	40011400 	.word	0x40011400
 8008c40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c56:	4642      	mov	r2, r8
 8008c58:	464b      	mov	r3, r9
 8008c5a:	1891      	adds	r1, r2, r2
 8008c5c:	6239      	str	r1, [r7, #32]
 8008c5e:	415b      	adcs	r3, r3
 8008c60:	627b      	str	r3, [r7, #36]	; 0x24
 8008c62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c66:	4641      	mov	r1, r8
 8008c68:	1854      	adds	r4, r2, r1
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	eb43 0501 	adc.w	r5, r3, r1
 8008c70:	f04f 0200 	mov.w	r2, #0
 8008c74:	f04f 0300 	mov.w	r3, #0
 8008c78:	00eb      	lsls	r3, r5, #3
 8008c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c7e:	00e2      	lsls	r2, r4, #3
 8008c80:	4614      	mov	r4, r2
 8008c82:	461d      	mov	r5, r3
 8008c84:	4643      	mov	r3, r8
 8008c86:	18e3      	adds	r3, r4, r3
 8008c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c8c:	464b      	mov	r3, r9
 8008c8e:	eb45 0303 	adc.w	r3, r5, r3
 8008c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ca2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ca6:	f04f 0200 	mov.w	r2, #0
 8008caa:	f04f 0300 	mov.w	r3, #0
 8008cae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	008b      	lsls	r3, r1, #2
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	008a      	lsls	r2, r1, #2
 8008cc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008cc4:	f7f7 fef2 	bl	8000aac <__aeabi_uldivmod>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4b60      	ldr	r3, [pc, #384]	; (8008e50 <UART_SetConfig+0x4e4>)
 8008cce:	fba3 2302 	umull	r2, r3, r3, r2
 8008cd2:	095b      	lsrs	r3, r3, #5
 8008cd4:	011c      	lsls	r4, r3, #4
 8008cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ce0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ce4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ce8:	4642      	mov	r2, r8
 8008cea:	464b      	mov	r3, r9
 8008cec:	1891      	adds	r1, r2, r2
 8008cee:	61b9      	str	r1, [r7, #24]
 8008cf0:	415b      	adcs	r3, r3
 8008cf2:	61fb      	str	r3, [r7, #28]
 8008cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cf8:	4641      	mov	r1, r8
 8008cfa:	1851      	adds	r1, r2, r1
 8008cfc:	6139      	str	r1, [r7, #16]
 8008cfe:	4649      	mov	r1, r9
 8008d00:	414b      	adcs	r3, r1
 8008d02:	617b      	str	r3, [r7, #20]
 8008d04:	f04f 0200 	mov.w	r2, #0
 8008d08:	f04f 0300 	mov.w	r3, #0
 8008d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d10:	4659      	mov	r1, fp
 8008d12:	00cb      	lsls	r3, r1, #3
 8008d14:	4651      	mov	r1, sl
 8008d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d1a:	4651      	mov	r1, sl
 8008d1c:	00ca      	lsls	r2, r1, #3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	4619      	mov	r1, r3
 8008d22:	4603      	mov	r3, r0
 8008d24:	4642      	mov	r2, r8
 8008d26:	189b      	adds	r3, r3, r2
 8008d28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d2c:	464b      	mov	r3, r9
 8008d2e:	460a      	mov	r2, r1
 8008d30:	eb42 0303 	adc.w	r3, r2, r3
 8008d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008d44:	f04f 0200 	mov.w	r2, #0
 8008d48:	f04f 0300 	mov.w	r3, #0
 8008d4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d50:	4649      	mov	r1, r9
 8008d52:	008b      	lsls	r3, r1, #2
 8008d54:	4641      	mov	r1, r8
 8008d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d5a:	4641      	mov	r1, r8
 8008d5c:	008a      	lsls	r2, r1, #2
 8008d5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d62:	f7f7 fea3 	bl	8000aac <__aeabi_uldivmod>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	4b38      	ldr	r3, [pc, #224]	; (8008e50 <UART_SetConfig+0x4e4>)
 8008d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8008d72:	095b      	lsrs	r3, r3, #5
 8008d74:	2264      	movs	r2, #100	; 0x64
 8008d76:	fb02 f303 	mul.w	r3, r2, r3
 8008d7a:	1acb      	subs	r3, r1, r3
 8008d7c:	011b      	lsls	r3, r3, #4
 8008d7e:	3332      	adds	r3, #50	; 0x32
 8008d80:	4a33      	ldr	r2, [pc, #204]	; (8008e50 <UART_SetConfig+0x4e4>)
 8008d82:	fba2 2303 	umull	r2, r3, r2, r3
 8008d86:	095b      	lsrs	r3, r3, #5
 8008d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d8c:	441c      	add	r4, r3
 8008d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d92:	2200      	movs	r2, #0
 8008d94:	673b      	str	r3, [r7, #112]	; 0x70
 8008d96:	677a      	str	r2, [r7, #116]	; 0x74
 8008d98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008d9c:	4642      	mov	r2, r8
 8008d9e:	464b      	mov	r3, r9
 8008da0:	1891      	adds	r1, r2, r2
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	415b      	adcs	r3, r3
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dac:	4641      	mov	r1, r8
 8008dae:	1851      	adds	r1, r2, r1
 8008db0:	6039      	str	r1, [r7, #0]
 8008db2:	4649      	mov	r1, r9
 8008db4:	414b      	adcs	r3, r1
 8008db6:	607b      	str	r3, [r7, #4]
 8008db8:	f04f 0200 	mov.w	r2, #0
 8008dbc:	f04f 0300 	mov.w	r3, #0
 8008dc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008dc4:	4659      	mov	r1, fp
 8008dc6:	00cb      	lsls	r3, r1, #3
 8008dc8:	4651      	mov	r1, sl
 8008dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dce:	4651      	mov	r1, sl
 8008dd0:	00ca      	lsls	r2, r1, #3
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	4642      	mov	r2, r8
 8008dda:	189b      	adds	r3, r3, r2
 8008ddc:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dde:	464b      	mov	r3, r9
 8008de0:	460a      	mov	r2, r1
 8008de2:	eb42 0303 	adc.w	r3, r2, r3
 8008de6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	663b      	str	r3, [r7, #96]	; 0x60
 8008df2:	667a      	str	r2, [r7, #100]	; 0x64
 8008df4:	f04f 0200 	mov.w	r2, #0
 8008df8:	f04f 0300 	mov.w	r3, #0
 8008dfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008e00:	4649      	mov	r1, r9
 8008e02:	008b      	lsls	r3, r1, #2
 8008e04:	4641      	mov	r1, r8
 8008e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e0a:	4641      	mov	r1, r8
 8008e0c:	008a      	lsls	r2, r1, #2
 8008e0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008e12:	f7f7 fe4b 	bl	8000aac <__aeabi_uldivmod>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4b0d      	ldr	r3, [pc, #52]	; (8008e50 <UART_SetConfig+0x4e4>)
 8008e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e20:	095b      	lsrs	r3, r3, #5
 8008e22:	2164      	movs	r1, #100	; 0x64
 8008e24:	fb01 f303 	mul.w	r3, r1, r3
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	011b      	lsls	r3, r3, #4
 8008e2c:	3332      	adds	r3, #50	; 0x32
 8008e2e:	4a08      	ldr	r2, [pc, #32]	; (8008e50 <UART_SetConfig+0x4e4>)
 8008e30:	fba2 2303 	umull	r2, r3, r2, r3
 8008e34:	095b      	lsrs	r3, r3, #5
 8008e36:	f003 020f 	and.w	r2, r3, #15
 8008e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4422      	add	r2, r4
 8008e42:	609a      	str	r2, [r3, #8]
}
 8008e44:	bf00      	nop
 8008e46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e50:	51eb851f 	.word	0x51eb851f

08008e54 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4b20      	ldr	r3, [pc, #128]	; (8008ef4 <FSMC_NORSRAM_Init+0xa0>)
 8008e72:	4013      	ands	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008e7e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008e84:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008e8a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008e90:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8008e96:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8008e9c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008ea2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008ea8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008eae:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008eb4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8008eba:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8008ec0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	2b08      	cmp	r3, #8
 8008ece:	d103      	bne.n	8008ed8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ed6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68f9      	ldr	r1, [r7, #12]
 8008ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	fff00080 	.word	0xfff00080

08008ef8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b087      	sub	sp, #28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f12:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008f1a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f26:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008f2e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008f36:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008f40:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	3b02      	subs	r3, #2
 8008f48:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008f4a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f50:	4313      	orrs	r3, r2
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6979      	ldr	r1, [r7, #20]
 8008f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	371c      	adds	r7, #28
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
	...

08008f74 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b087      	sub	sp, #28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
 8008f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f8c:	d122      	bne.n	8008fd4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f96:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	4b15      	ldr	r3, [pc, #84]	; (8008ff0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008faa:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008fb2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008fba:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008fc0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	6979      	ldr	r1, [r7, #20]
 8008fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008fd2:	e005      	b.n	8008fe0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	cff00000 	.word	0xcff00000

08008ff4 <siprintf>:
 8008ff4:	b40e      	push	{r1, r2, r3}
 8008ff6:	b500      	push	{lr}
 8008ff8:	b09c      	sub	sp, #112	; 0x70
 8008ffa:	ab1d      	add	r3, sp, #116	; 0x74
 8008ffc:	9002      	str	r0, [sp, #8]
 8008ffe:	9006      	str	r0, [sp, #24]
 8009000:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009004:	4809      	ldr	r0, [pc, #36]	; (800902c <siprintf+0x38>)
 8009006:	9107      	str	r1, [sp, #28]
 8009008:	9104      	str	r1, [sp, #16]
 800900a:	4909      	ldr	r1, [pc, #36]	; (8009030 <siprintf+0x3c>)
 800900c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009010:	9105      	str	r1, [sp, #20]
 8009012:	6800      	ldr	r0, [r0, #0]
 8009014:	9301      	str	r3, [sp, #4]
 8009016:	a902      	add	r1, sp, #8
 8009018:	f000 f992 	bl	8009340 <_svfiprintf_r>
 800901c:	9b02      	ldr	r3, [sp, #8]
 800901e:	2200      	movs	r2, #0
 8009020:	701a      	strb	r2, [r3, #0]
 8009022:	b01c      	add	sp, #112	; 0x70
 8009024:	f85d eb04 	ldr.w	lr, [sp], #4
 8009028:	b003      	add	sp, #12
 800902a:	4770      	bx	lr
 800902c:	20000068 	.word	0x20000068
 8009030:	ffff0208 	.word	0xffff0208

08009034 <memset>:
 8009034:	4402      	add	r2, r0
 8009036:	4603      	mov	r3, r0
 8009038:	4293      	cmp	r3, r2
 800903a:	d100      	bne.n	800903e <memset+0xa>
 800903c:	4770      	bx	lr
 800903e:	f803 1b01 	strb.w	r1, [r3], #1
 8009042:	e7f9      	b.n	8009038 <memset+0x4>

08009044 <__errno>:
 8009044:	4b01      	ldr	r3, [pc, #4]	; (800904c <__errno+0x8>)
 8009046:	6818      	ldr	r0, [r3, #0]
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	20000068 	.word	0x20000068

08009050 <__libc_init_array>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	4d0d      	ldr	r5, [pc, #52]	; (8009088 <__libc_init_array+0x38>)
 8009054:	4c0d      	ldr	r4, [pc, #52]	; (800908c <__libc_init_array+0x3c>)
 8009056:	1b64      	subs	r4, r4, r5
 8009058:	10a4      	asrs	r4, r4, #2
 800905a:	2600      	movs	r6, #0
 800905c:	42a6      	cmp	r6, r4
 800905e:	d109      	bne.n	8009074 <__libc_init_array+0x24>
 8009060:	4d0b      	ldr	r5, [pc, #44]	; (8009090 <__libc_init_array+0x40>)
 8009062:	4c0c      	ldr	r4, [pc, #48]	; (8009094 <__libc_init_array+0x44>)
 8009064:	f000 fc6a 	bl	800993c <_init>
 8009068:	1b64      	subs	r4, r4, r5
 800906a:	10a4      	asrs	r4, r4, #2
 800906c:	2600      	movs	r6, #0
 800906e:	42a6      	cmp	r6, r4
 8009070:	d105      	bne.n	800907e <__libc_init_array+0x2e>
 8009072:	bd70      	pop	{r4, r5, r6, pc}
 8009074:	f855 3b04 	ldr.w	r3, [r5], #4
 8009078:	4798      	blx	r3
 800907a:	3601      	adds	r6, #1
 800907c:	e7ee      	b.n	800905c <__libc_init_array+0xc>
 800907e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009082:	4798      	blx	r3
 8009084:	3601      	adds	r6, #1
 8009086:	e7f2      	b.n	800906e <__libc_init_array+0x1e>
 8009088:	0800ca50 	.word	0x0800ca50
 800908c:	0800ca50 	.word	0x0800ca50
 8009090:	0800ca50 	.word	0x0800ca50
 8009094:	0800ca54 	.word	0x0800ca54

08009098 <__retarget_lock_acquire_recursive>:
 8009098:	4770      	bx	lr

0800909a <__retarget_lock_release_recursive>:
 800909a:	4770      	bx	lr

0800909c <_free_r>:
 800909c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800909e:	2900      	cmp	r1, #0
 80090a0:	d044      	beq.n	800912c <_free_r+0x90>
 80090a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090a6:	9001      	str	r0, [sp, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f1a1 0404 	sub.w	r4, r1, #4
 80090ae:	bfb8      	it	lt
 80090b0:	18e4      	addlt	r4, r4, r3
 80090b2:	f000 f8df 	bl	8009274 <__malloc_lock>
 80090b6:	4a1e      	ldr	r2, [pc, #120]	; (8009130 <_free_r+0x94>)
 80090b8:	9801      	ldr	r0, [sp, #4]
 80090ba:	6813      	ldr	r3, [r2, #0]
 80090bc:	b933      	cbnz	r3, 80090cc <_free_r+0x30>
 80090be:	6063      	str	r3, [r4, #4]
 80090c0:	6014      	str	r4, [r2, #0]
 80090c2:	b003      	add	sp, #12
 80090c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090c8:	f000 b8da 	b.w	8009280 <__malloc_unlock>
 80090cc:	42a3      	cmp	r3, r4
 80090ce:	d908      	bls.n	80090e2 <_free_r+0x46>
 80090d0:	6825      	ldr	r5, [r4, #0]
 80090d2:	1961      	adds	r1, r4, r5
 80090d4:	428b      	cmp	r3, r1
 80090d6:	bf01      	itttt	eq
 80090d8:	6819      	ldreq	r1, [r3, #0]
 80090da:	685b      	ldreq	r3, [r3, #4]
 80090dc:	1949      	addeq	r1, r1, r5
 80090de:	6021      	streq	r1, [r4, #0]
 80090e0:	e7ed      	b.n	80090be <_free_r+0x22>
 80090e2:	461a      	mov	r2, r3
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	b10b      	cbz	r3, 80090ec <_free_r+0x50>
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	d9fa      	bls.n	80090e2 <_free_r+0x46>
 80090ec:	6811      	ldr	r1, [r2, #0]
 80090ee:	1855      	adds	r5, r2, r1
 80090f0:	42a5      	cmp	r5, r4
 80090f2:	d10b      	bne.n	800910c <_free_r+0x70>
 80090f4:	6824      	ldr	r4, [r4, #0]
 80090f6:	4421      	add	r1, r4
 80090f8:	1854      	adds	r4, r2, r1
 80090fa:	42a3      	cmp	r3, r4
 80090fc:	6011      	str	r1, [r2, #0]
 80090fe:	d1e0      	bne.n	80090c2 <_free_r+0x26>
 8009100:	681c      	ldr	r4, [r3, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	6053      	str	r3, [r2, #4]
 8009106:	440c      	add	r4, r1
 8009108:	6014      	str	r4, [r2, #0]
 800910a:	e7da      	b.n	80090c2 <_free_r+0x26>
 800910c:	d902      	bls.n	8009114 <_free_r+0x78>
 800910e:	230c      	movs	r3, #12
 8009110:	6003      	str	r3, [r0, #0]
 8009112:	e7d6      	b.n	80090c2 <_free_r+0x26>
 8009114:	6825      	ldr	r5, [r4, #0]
 8009116:	1961      	adds	r1, r4, r5
 8009118:	428b      	cmp	r3, r1
 800911a:	bf04      	itt	eq
 800911c:	6819      	ldreq	r1, [r3, #0]
 800911e:	685b      	ldreq	r3, [r3, #4]
 8009120:	6063      	str	r3, [r4, #4]
 8009122:	bf04      	itt	eq
 8009124:	1949      	addeq	r1, r1, r5
 8009126:	6021      	streq	r1, [r4, #0]
 8009128:	6054      	str	r4, [r2, #4]
 800912a:	e7ca      	b.n	80090c2 <_free_r+0x26>
 800912c:	b003      	add	sp, #12
 800912e:	bd30      	pop	{r4, r5, pc}
 8009130:	2000054c 	.word	0x2000054c

08009134 <sbrk_aligned>:
 8009134:	b570      	push	{r4, r5, r6, lr}
 8009136:	4e0e      	ldr	r6, [pc, #56]	; (8009170 <sbrk_aligned+0x3c>)
 8009138:	460c      	mov	r4, r1
 800913a:	6831      	ldr	r1, [r6, #0]
 800913c:	4605      	mov	r5, r0
 800913e:	b911      	cbnz	r1, 8009146 <sbrk_aligned+0x12>
 8009140:	f000 fba6 	bl	8009890 <_sbrk_r>
 8009144:	6030      	str	r0, [r6, #0]
 8009146:	4621      	mov	r1, r4
 8009148:	4628      	mov	r0, r5
 800914a:	f000 fba1 	bl	8009890 <_sbrk_r>
 800914e:	1c43      	adds	r3, r0, #1
 8009150:	d00a      	beq.n	8009168 <sbrk_aligned+0x34>
 8009152:	1cc4      	adds	r4, r0, #3
 8009154:	f024 0403 	bic.w	r4, r4, #3
 8009158:	42a0      	cmp	r0, r4
 800915a:	d007      	beq.n	800916c <sbrk_aligned+0x38>
 800915c:	1a21      	subs	r1, r4, r0
 800915e:	4628      	mov	r0, r5
 8009160:	f000 fb96 	bl	8009890 <_sbrk_r>
 8009164:	3001      	adds	r0, #1
 8009166:	d101      	bne.n	800916c <sbrk_aligned+0x38>
 8009168:	f04f 34ff 	mov.w	r4, #4294967295
 800916c:	4620      	mov	r0, r4
 800916e:	bd70      	pop	{r4, r5, r6, pc}
 8009170:	20000550 	.word	0x20000550

08009174 <_malloc_r>:
 8009174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009178:	1ccd      	adds	r5, r1, #3
 800917a:	f025 0503 	bic.w	r5, r5, #3
 800917e:	3508      	adds	r5, #8
 8009180:	2d0c      	cmp	r5, #12
 8009182:	bf38      	it	cc
 8009184:	250c      	movcc	r5, #12
 8009186:	2d00      	cmp	r5, #0
 8009188:	4607      	mov	r7, r0
 800918a:	db01      	blt.n	8009190 <_malloc_r+0x1c>
 800918c:	42a9      	cmp	r1, r5
 800918e:	d905      	bls.n	800919c <_malloc_r+0x28>
 8009190:	230c      	movs	r3, #12
 8009192:	603b      	str	r3, [r7, #0]
 8009194:	2600      	movs	r6, #0
 8009196:	4630      	mov	r0, r6
 8009198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800919c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009270 <_malloc_r+0xfc>
 80091a0:	f000 f868 	bl	8009274 <__malloc_lock>
 80091a4:	f8d8 3000 	ldr.w	r3, [r8]
 80091a8:	461c      	mov	r4, r3
 80091aa:	bb5c      	cbnz	r4, 8009204 <_malloc_r+0x90>
 80091ac:	4629      	mov	r1, r5
 80091ae:	4638      	mov	r0, r7
 80091b0:	f7ff ffc0 	bl	8009134 <sbrk_aligned>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	4604      	mov	r4, r0
 80091b8:	d155      	bne.n	8009266 <_malloc_r+0xf2>
 80091ba:	f8d8 4000 	ldr.w	r4, [r8]
 80091be:	4626      	mov	r6, r4
 80091c0:	2e00      	cmp	r6, #0
 80091c2:	d145      	bne.n	8009250 <_malloc_r+0xdc>
 80091c4:	2c00      	cmp	r4, #0
 80091c6:	d048      	beq.n	800925a <_malloc_r+0xe6>
 80091c8:	6823      	ldr	r3, [r4, #0]
 80091ca:	4631      	mov	r1, r6
 80091cc:	4638      	mov	r0, r7
 80091ce:	eb04 0903 	add.w	r9, r4, r3
 80091d2:	f000 fb5d 	bl	8009890 <_sbrk_r>
 80091d6:	4581      	cmp	r9, r0
 80091d8:	d13f      	bne.n	800925a <_malloc_r+0xe6>
 80091da:	6821      	ldr	r1, [r4, #0]
 80091dc:	1a6d      	subs	r5, r5, r1
 80091de:	4629      	mov	r1, r5
 80091e0:	4638      	mov	r0, r7
 80091e2:	f7ff ffa7 	bl	8009134 <sbrk_aligned>
 80091e6:	3001      	adds	r0, #1
 80091e8:	d037      	beq.n	800925a <_malloc_r+0xe6>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	442b      	add	r3, r5
 80091ee:	6023      	str	r3, [r4, #0]
 80091f0:	f8d8 3000 	ldr.w	r3, [r8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d038      	beq.n	800926a <_malloc_r+0xf6>
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	42a2      	cmp	r2, r4
 80091fc:	d12b      	bne.n	8009256 <_malloc_r+0xe2>
 80091fe:	2200      	movs	r2, #0
 8009200:	605a      	str	r2, [r3, #4]
 8009202:	e00f      	b.n	8009224 <_malloc_r+0xb0>
 8009204:	6822      	ldr	r2, [r4, #0]
 8009206:	1b52      	subs	r2, r2, r5
 8009208:	d41f      	bmi.n	800924a <_malloc_r+0xd6>
 800920a:	2a0b      	cmp	r2, #11
 800920c:	d917      	bls.n	800923e <_malloc_r+0xca>
 800920e:	1961      	adds	r1, r4, r5
 8009210:	42a3      	cmp	r3, r4
 8009212:	6025      	str	r5, [r4, #0]
 8009214:	bf18      	it	ne
 8009216:	6059      	strne	r1, [r3, #4]
 8009218:	6863      	ldr	r3, [r4, #4]
 800921a:	bf08      	it	eq
 800921c:	f8c8 1000 	streq.w	r1, [r8]
 8009220:	5162      	str	r2, [r4, r5]
 8009222:	604b      	str	r3, [r1, #4]
 8009224:	4638      	mov	r0, r7
 8009226:	f104 060b 	add.w	r6, r4, #11
 800922a:	f000 f829 	bl	8009280 <__malloc_unlock>
 800922e:	f026 0607 	bic.w	r6, r6, #7
 8009232:	1d23      	adds	r3, r4, #4
 8009234:	1af2      	subs	r2, r6, r3
 8009236:	d0ae      	beq.n	8009196 <_malloc_r+0x22>
 8009238:	1b9b      	subs	r3, r3, r6
 800923a:	50a3      	str	r3, [r4, r2]
 800923c:	e7ab      	b.n	8009196 <_malloc_r+0x22>
 800923e:	42a3      	cmp	r3, r4
 8009240:	6862      	ldr	r2, [r4, #4]
 8009242:	d1dd      	bne.n	8009200 <_malloc_r+0x8c>
 8009244:	f8c8 2000 	str.w	r2, [r8]
 8009248:	e7ec      	b.n	8009224 <_malloc_r+0xb0>
 800924a:	4623      	mov	r3, r4
 800924c:	6864      	ldr	r4, [r4, #4]
 800924e:	e7ac      	b.n	80091aa <_malloc_r+0x36>
 8009250:	4634      	mov	r4, r6
 8009252:	6876      	ldr	r6, [r6, #4]
 8009254:	e7b4      	b.n	80091c0 <_malloc_r+0x4c>
 8009256:	4613      	mov	r3, r2
 8009258:	e7cc      	b.n	80091f4 <_malloc_r+0x80>
 800925a:	230c      	movs	r3, #12
 800925c:	603b      	str	r3, [r7, #0]
 800925e:	4638      	mov	r0, r7
 8009260:	f000 f80e 	bl	8009280 <__malloc_unlock>
 8009264:	e797      	b.n	8009196 <_malloc_r+0x22>
 8009266:	6025      	str	r5, [r4, #0]
 8009268:	e7dc      	b.n	8009224 <_malloc_r+0xb0>
 800926a:	605b      	str	r3, [r3, #4]
 800926c:	deff      	udf	#255	; 0xff
 800926e:	bf00      	nop
 8009270:	2000054c 	.word	0x2000054c

08009274 <__malloc_lock>:
 8009274:	4801      	ldr	r0, [pc, #4]	; (800927c <__malloc_lock+0x8>)
 8009276:	f7ff bf0f 	b.w	8009098 <__retarget_lock_acquire_recursive>
 800927a:	bf00      	nop
 800927c:	20000548 	.word	0x20000548

08009280 <__malloc_unlock>:
 8009280:	4801      	ldr	r0, [pc, #4]	; (8009288 <__malloc_unlock+0x8>)
 8009282:	f7ff bf0a 	b.w	800909a <__retarget_lock_release_recursive>
 8009286:	bf00      	nop
 8009288:	20000548 	.word	0x20000548

0800928c <__ssputs_r>:
 800928c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009290:	688e      	ldr	r6, [r1, #8]
 8009292:	461f      	mov	r7, r3
 8009294:	42be      	cmp	r6, r7
 8009296:	680b      	ldr	r3, [r1, #0]
 8009298:	4682      	mov	sl, r0
 800929a:	460c      	mov	r4, r1
 800929c:	4690      	mov	r8, r2
 800929e:	d82c      	bhi.n	80092fa <__ssputs_r+0x6e>
 80092a0:	898a      	ldrh	r2, [r1, #12]
 80092a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092a6:	d026      	beq.n	80092f6 <__ssputs_r+0x6a>
 80092a8:	6965      	ldr	r5, [r4, #20]
 80092aa:	6909      	ldr	r1, [r1, #16]
 80092ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092b0:	eba3 0901 	sub.w	r9, r3, r1
 80092b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092b8:	1c7b      	adds	r3, r7, #1
 80092ba:	444b      	add	r3, r9
 80092bc:	106d      	asrs	r5, r5, #1
 80092be:	429d      	cmp	r5, r3
 80092c0:	bf38      	it	cc
 80092c2:	461d      	movcc	r5, r3
 80092c4:	0553      	lsls	r3, r2, #21
 80092c6:	d527      	bpl.n	8009318 <__ssputs_r+0x8c>
 80092c8:	4629      	mov	r1, r5
 80092ca:	f7ff ff53 	bl	8009174 <_malloc_r>
 80092ce:	4606      	mov	r6, r0
 80092d0:	b360      	cbz	r0, 800932c <__ssputs_r+0xa0>
 80092d2:	6921      	ldr	r1, [r4, #16]
 80092d4:	464a      	mov	r2, r9
 80092d6:	f000 faeb 	bl	80098b0 <memcpy>
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e4:	81a3      	strh	r3, [r4, #12]
 80092e6:	6126      	str	r6, [r4, #16]
 80092e8:	6165      	str	r5, [r4, #20]
 80092ea:	444e      	add	r6, r9
 80092ec:	eba5 0509 	sub.w	r5, r5, r9
 80092f0:	6026      	str	r6, [r4, #0]
 80092f2:	60a5      	str	r5, [r4, #8]
 80092f4:	463e      	mov	r6, r7
 80092f6:	42be      	cmp	r6, r7
 80092f8:	d900      	bls.n	80092fc <__ssputs_r+0x70>
 80092fa:	463e      	mov	r6, r7
 80092fc:	6820      	ldr	r0, [r4, #0]
 80092fe:	4632      	mov	r2, r6
 8009300:	4641      	mov	r1, r8
 8009302:	f000 faab 	bl	800985c <memmove>
 8009306:	68a3      	ldr	r3, [r4, #8]
 8009308:	1b9b      	subs	r3, r3, r6
 800930a:	60a3      	str	r3, [r4, #8]
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	4433      	add	r3, r6
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	2000      	movs	r0, #0
 8009314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009318:	462a      	mov	r2, r5
 800931a:	f000 fad7 	bl	80098cc <_realloc_r>
 800931e:	4606      	mov	r6, r0
 8009320:	2800      	cmp	r0, #0
 8009322:	d1e0      	bne.n	80092e6 <__ssputs_r+0x5a>
 8009324:	6921      	ldr	r1, [r4, #16]
 8009326:	4650      	mov	r0, sl
 8009328:	f7ff feb8 	bl	800909c <_free_r>
 800932c:	230c      	movs	r3, #12
 800932e:	f8ca 3000 	str.w	r3, [sl]
 8009332:	89a3      	ldrh	r3, [r4, #12]
 8009334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009338:	81a3      	strh	r3, [r4, #12]
 800933a:	f04f 30ff 	mov.w	r0, #4294967295
 800933e:	e7e9      	b.n	8009314 <__ssputs_r+0x88>

08009340 <_svfiprintf_r>:
 8009340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009344:	4698      	mov	r8, r3
 8009346:	898b      	ldrh	r3, [r1, #12]
 8009348:	061b      	lsls	r3, r3, #24
 800934a:	b09d      	sub	sp, #116	; 0x74
 800934c:	4607      	mov	r7, r0
 800934e:	460d      	mov	r5, r1
 8009350:	4614      	mov	r4, r2
 8009352:	d50e      	bpl.n	8009372 <_svfiprintf_r+0x32>
 8009354:	690b      	ldr	r3, [r1, #16]
 8009356:	b963      	cbnz	r3, 8009372 <_svfiprintf_r+0x32>
 8009358:	2140      	movs	r1, #64	; 0x40
 800935a:	f7ff ff0b 	bl	8009174 <_malloc_r>
 800935e:	6028      	str	r0, [r5, #0]
 8009360:	6128      	str	r0, [r5, #16]
 8009362:	b920      	cbnz	r0, 800936e <_svfiprintf_r+0x2e>
 8009364:	230c      	movs	r3, #12
 8009366:	603b      	str	r3, [r7, #0]
 8009368:	f04f 30ff 	mov.w	r0, #4294967295
 800936c:	e0d0      	b.n	8009510 <_svfiprintf_r+0x1d0>
 800936e:	2340      	movs	r3, #64	; 0x40
 8009370:	616b      	str	r3, [r5, #20]
 8009372:	2300      	movs	r3, #0
 8009374:	9309      	str	r3, [sp, #36]	; 0x24
 8009376:	2320      	movs	r3, #32
 8009378:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800937c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009380:	2330      	movs	r3, #48	; 0x30
 8009382:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009528 <_svfiprintf_r+0x1e8>
 8009386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800938a:	f04f 0901 	mov.w	r9, #1
 800938e:	4623      	mov	r3, r4
 8009390:	469a      	mov	sl, r3
 8009392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009396:	b10a      	cbz	r2, 800939c <_svfiprintf_r+0x5c>
 8009398:	2a25      	cmp	r2, #37	; 0x25
 800939a:	d1f9      	bne.n	8009390 <_svfiprintf_r+0x50>
 800939c:	ebba 0b04 	subs.w	fp, sl, r4
 80093a0:	d00b      	beq.n	80093ba <_svfiprintf_r+0x7a>
 80093a2:	465b      	mov	r3, fp
 80093a4:	4622      	mov	r2, r4
 80093a6:	4629      	mov	r1, r5
 80093a8:	4638      	mov	r0, r7
 80093aa:	f7ff ff6f 	bl	800928c <__ssputs_r>
 80093ae:	3001      	adds	r0, #1
 80093b0:	f000 80a9 	beq.w	8009506 <_svfiprintf_r+0x1c6>
 80093b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093b6:	445a      	add	r2, fp
 80093b8:	9209      	str	r2, [sp, #36]	; 0x24
 80093ba:	f89a 3000 	ldrb.w	r3, [sl]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f000 80a1 	beq.w	8009506 <_svfiprintf_r+0x1c6>
 80093c4:	2300      	movs	r3, #0
 80093c6:	f04f 32ff 	mov.w	r2, #4294967295
 80093ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093ce:	f10a 0a01 	add.w	sl, sl, #1
 80093d2:	9304      	str	r3, [sp, #16]
 80093d4:	9307      	str	r3, [sp, #28]
 80093d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093da:	931a      	str	r3, [sp, #104]	; 0x68
 80093dc:	4654      	mov	r4, sl
 80093de:	2205      	movs	r2, #5
 80093e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e4:	4850      	ldr	r0, [pc, #320]	; (8009528 <_svfiprintf_r+0x1e8>)
 80093e6:	f7f6 fef3 	bl	80001d0 <memchr>
 80093ea:	9a04      	ldr	r2, [sp, #16]
 80093ec:	b9d8      	cbnz	r0, 8009426 <_svfiprintf_r+0xe6>
 80093ee:	06d0      	lsls	r0, r2, #27
 80093f0:	bf44      	itt	mi
 80093f2:	2320      	movmi	r3, #32
 80093f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093f8:	0711      	lsls	r1, r2, #28
 80093fa:	bf44      	itt	mi
 80093fc:	232b      	movmi	r3, #43	; 0x2b
 80093fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009402:	f89a 3000 	ldrb.w	r3, [sl]
 8009406:	2b2a      	cmp	r3, #42	; 0x2a
 8009408:	d015      	beq.n	8009436 <_svfiprintf_r+0xf6>
 800940a:	9a07      	ldr	r2, [sp, #28]
 800940c:	4654      	mov	r4, sl
 800940e:	2000      	movs	r0, #0
 8009410:	f04f 0c0a 	mov.w	ip, #10
 8009414:	4621      	mov	r1, r4
 8009416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800941a:	3b30      	subs	r3, #48	; 0x30
 800941c:	2b09      	cmp	r3, #9
 800941e:	d94d      	bls.n	80094bc <_svfiprintf_r+0x17c>
 8009420:	b1b0      	cbz	r0, 8009450 <_svfiprintf_r+0x110>
 8009422:	9207      	str	r2, [sp, #28]
 8009424:	e014      	b.n	8009450 <_svfiprintf_r+0x110>
 8009426:	eba0 0308 	sub.w	r3, r0, r8
 800942a:	fa09 f303 	lsl.w	r3, r9, r3
 800942e:	4313      	orrs	r3, r2
 8009430:	9304      	str	r3, [sp, #16]
 8009432:	46a2      	mov	sl, r4
 8009434:	e7d2      	b.n	80093dc <_svfiprintf_r+0x9c>
 8009436:	9b03      	ldr	r3, [sp, #12]
 8009438:	1d19      	adds	r1, r3, #4
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	9103      	str	r1, [sp, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	bfbb      	ittet	lt
 8009442:	425b      	neglt	r3, r3
 8009444:	f042 0202 	orrlt.w	r2, r2, #2
 8009448:	9307      	strge	r3, [sp, #28]
 800944a:	9307      	strlt	r3, [sp, #28]
 800944c:	bfb8      	it	lt
 800944e:	9204      	strlt	r2, [sp, #16]
 8009450:	7823      	ldrb	r3, [r4, #0]
 8009452:	2b2e      	cmp	r3, #46	; 0x2e
 8009454:	d10c      	bne.n	8009470 <_svfiprintf_r+0x130>
 8009456:	7863      	ldrb	r3, [r4, #1]
 8009458:	2b2a      	cmp	r3, #42	; 0x2a
 800945a:	d134      	bne.n	80094c6 <_svfiprintf_r+0x186>
 800945c:	9b03      	ldr	r3, [sp, #12]
 800945e:	1d1a      	adds	r2, r3, #4
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	9203      	str	r2, [sp, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	bfb8      	it	lt
 8009468:	f04f 33ff 	movlt.w	r3, #4294967295
 800946c:	3402      	adds	r4, #2
 800946e:	9305      	str	r3, [sp, #20]
 8009470:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009538 <_svfiprintf_r+0x1f8>
 8009474:	7821      	ldrb	r1, [r4, #0]
 8009476:	2203      	movs	r2, #3
 8009478:	4650      	mov	r0, sl
 800947a:	f7f6 fea9 	bl	80001d0 <memchr>
 800947e:	b138      	cbz	r0, 8009490 <_svfiprintf_r+0x150>
 8009480:	9b04      	ldr	r3, [sp, #16]
 8009482:	eba0 000a 	sub.w	r0, r0, sl
 8009486:	2240      	movs	r2, #64	; 0x40
 8009488:	4082      	lsls	r2, r0
 800948a:	4313      	orrs	r3, r2
 800948c:	3401      	adds	r4, #1
 800948e:	9304      	str	r3, [sp, #16]
 8009490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009494:	4825      	ldr	r0, [pc, #148]	; (800952c <_svfiprintf_r+0x1ec>)
 8009496:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800949a:	2206      	movs	r2, #6
 800949c:	f7f6 fe98 	bl	80001d0 <memchr>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d038      	beq.n	8009516 <_svfiprintf_r+0x1d6>
 80094a4:	4b22      	ldr	r3, [pc, #136]	; (8009530 <_svfiprintf_r+0x1f0>)
 80094a6:	bb1b      	cbnz	r3, 80094f0 <_svfiprintf_r+0x1b0>
 80094a8:	9b03      	ldr	r3, [sp, #12]
 80094aa:	3307      	adds	r3, #7
 80094ac:	f023 0307 	bic.w	r3, r3, #7
 80094b0:	3308      	adds	r3, #8
 80094b2:	9303      	str	r3, [sp, #12]
 80094b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b6:	4433      	add	r3, r6
 80094b8:	9309      	str	r3, [sp, #36]	; 0x24
 80094ba:	e768      	b.n	800938e <_svfiprintf_r+0x4e>
 80094bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80094c0:	460c      	mov	r4, r1
 80094c2:	2001      	movs	r0, #1
 80094c4:	e7a6      	b.n	8009414 <_svfiprintf_r+0xd4>
 80094c6:	2300      	movs	r3, #0
 80094c8:	3401      	adds	r4, #1
 80094ca:	9305      	str	r3, [sp, #20]
 80094cc:	4619      	mov	r1, r3
 80094ce:	f04f 0c0a 	mov.w	ip, #10
 80094d2:	4620      	mov	r0, r4
 80094d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094d8:	3a30      	subs	r2, #48	; 0x30
 80094da:	2a09      	cmp	r2, #9
 80094dc:	d903      	bls.n	80094e6 <_svfiprintf_r+0x1a6>
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d0c6      	beq.n	8009470 <_svfiprintf_r+0x130>
 80094e2:	9105      	str	r1, [sp, #20]
 80094e4:	e7c4      	b.n	8009470 <_svfiprintf_r+0x130>
 80094e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80094ea:	4604      	mov	r4, r0
 80094ec:	2301      	movs	r3, #1
 80094ee:	e7f0      	b.n	80094d2 <_svfiprintf_r+0x192>
 80094f0:	ab03      	add	r3, sp, #12
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	462a      	mov	r2, r5
 80094f6:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <_svfiprintf_r+0x1f4>)
 80094f8:	a904      	add	r1, sp, #16
 80094fa:	4638      	mov	r0, r7
 80094fc:	f3af 8000 	nop.w
 8009500:	1c42      	adds	r2, r0, #1
 8009502:	4606      	mov	r6, r0
 8009504:	d1d6      	bne.n	80094b4 <_svfiprintf_r+0x174>
 8009506:	89ab      	ldrh	r3, [r5, #12]
 8009508:	065b      	lsls	r3, r3, #25
 800950a:	f53f af2d 	bmi.w	8009368 <_svfiprintf_r+0x28>
 800950e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009510:	b01d      	add	sp, #116	; 0x74
 8009512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009516:	ab03      	add	r3, sp, #12
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	462a      	mov	r2, r5
 800951c:	4b05      	ldr	r3, [pc, #20]	; (8009534 <_svfiprintf_r+0x1f4>)
 800951e:	a904      	add	r1, sp, #16
 8009520:	4638      	mov	r0, r7
 8009522:	f000 f879 	bl	8009618 <_printf_i>
 8009526:	e7eb      	b.n	8009500 <_svfiprintf_r+0x1c0>
 8009528:	0800ca14 	.word	0x0800ca14
 800952c:	0800ca1e 	.word	0x0800ca1e
 8009530:	00000000 	.word	0x00000000
 8009534:	0800928d 	.word	0x0800928d
 8009538:	0800ca1a 	.word	0x0800ca1a

0800953c <_printf_common>:
 800953c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009540:	4616      	mov	r6, r2
 8009542:	4699      	mov	r9, r3
 8009544:	688a      	ldr	r2, [r1, #8]
 8009546:	690b      	ldr	r3, [r1, #16]
 8009548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800954c:	4293      	cmp	r3, r2
 800954e:	bfb8      	it	lt
 8009550:	4613      	movlt	r3, r2
 8009552:	6033      	str	r3, [r6, #0]
 8009554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009558:	4607      	mov	r7, r0
 800955a:	460c      	mov	r4, r1
 800955c:	b10a      	cbz	r2, 8009562 <_printf_common+0x26>
 800955e:	3301      	adds	r3, #1
 8009560:	6033      	str	r3, [r6, #0]
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	0699      	lsls	r1, r3, #26
 8009566:	bf42      	ittt	mi
 8009568:	6833      	ldrmi	r3, [r6, #0]
 800956a:	3302      	addmi	r3, #2
 800956c:	6033      	strmi	r3, [r6, #0]
 800956e:	6825      	ldr	r5, [r4, #0]
 8009570:	f015 0506 	ands.w	r5, r5, #6
 8009574:	d106      	bne.n	8009584 <_printf_common+0x48>
 8009576:	f104 0a19 	add.w	sl, r4, #25
 800957a:	68e3      	ldr	r3, [r4, #12]
 800957c:	6832      	ldr	r2, [r6, #0]
 800957e:	1a9b      	subs	r3, r3, r2
 8009580:	42ab      	cmp	r3, r5
 8009582:	dc26      	bgt.n	80095d2 <_printf_common+0x96>
 8009584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009588:	1e13      	subs	r3, r2, #0
 800958a:	6822      	ldr	r2, [r4, #0]
 800958c:	bf18      	it	ne
 800958e:	2301      	movne	r3, #1
 8009590:	0692      	lsls	r2, r2, #26
 8009592:	d42b      	bmi.n	80095ec <_printf_common+0xb0>
 8009594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009598:	4649      	mov	r1, r9
 800959a:	4638      	mov	r0, r7
 800959c:	47c0      	blx	r8
 800959e:	3001      	adds	r0, #1
 80095a0:	d01e      	beq.n	80095e0 <_printf_common+0xa4>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	6922      	ldr	r2, [r4, #16]
 80095a6:	f003 0306 	and.w	r3, r3, #6
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	bf02      	ittt	eq
 80095ae:	68e5      	ldreq	r5, [r4, #12]
 80095b0:	6833      	ldreq	r3, [r6, #0]
 80095b2:	1aed      	subeq	r5, r5, r3
 80095b4:	68a3      	ldr	r3, [r4, #8]
 80095b6:	bf0c      	ite	eq
 80095b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095bc:	2500      	movne	r5, #0
 80095be:	4293      	cmp	r3, r2
 80095c0:	bfc4      	itt	gt
 80095c2:	1a9b      	subgt	r3, r3, r2
 80095c4:	18ed      	addgt	r5, r5, r3
 80095c6:	2600      	movs	r6, #0
 80095c8:	341a      	adds	r4, #26
 80095ca:	42b5      	cmp	r5, r6
 80095cc:	d11a      	bne.n	8009604 <_printf_common+0xc8>
 80095ce:	2000      	movs	r0, #0
 80095d0:	e008      	b.n	80095e4 <_printf_common+0xa8>
 80095d2:	2301      	movs	r3, #1
 80095d4:	4652      	mov	r2, sl
 80095d6:	4649      	mov	r1, r9
 80095d8:	4638      	mov	r0, r7
 80095da:	47c0      	blx	r8
 80095dc:	3001      	adds	r0, #1
 80095de:	d103      	bne.n	80095e8 <_printf_common+0xac>
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295
 80095e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e8:	3501      	adds	r5, #1
 80095ea:	e7c6      	b.n	800957a <_printf_common+0x3e>
 80095ec:	18e1      	adds	r1, r4, r3
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	2030      	movs	r0, #48	; 0x30
 80095f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095f6:	4422      	add	r2, r4
 80095f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009600:	3302      	adds	r3, #2
 8009602:	e7c7      	b.n	8009594 <_printf_common+0x58>
 8009604:	2301      	movs	r3, #1
 8009606:	4622      	mov	r2, r4
 8009608:	4649      	mov	r1, r9
 800960a:	4638      	mov	r0, r7
 800960c:	47c0      	blx	r8
 800960e:	3001      	adds	r0, #1
 8009610:	d0e6      	beq.n	80095e0 <_printf_common+0xa4>
 8009612:	3601      	adds	r6, #1
 8009614:	e7d9      	b.n	80095ca <_printf_common+0x8e>
	...

08009618 <_printf_i>:
 8009618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800961c:	7e0f      	ldrb	r7, [r1, #24]
 800961e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009620:	2f78      	cmp	r7, #120	; 0x78
 8009622:	4691      	mov	r9, r2
 8009624:	4680      	mov	r8, r0
 8009626:	460c      	mov	r4, r1
 8009628:	469a      	mov	sl, r3
 800962a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800962e:	d807      	bhi.n	8009640 <_printf_i+0x28>
 8009630:	2f62      	cmp	r7, #98	; 0x62
 8009632:	d80a      	bhi.n	800964a <_printf_i+0x32>
 8009634:	2f00      	cmp	r7, #0
 8009636:	f000 80d4 	beq.w	80097e2 <_printf_i+0x1ca>
 800963a:	2f58      	cmp	r7, #88	; 0x58
 800963c:	f000 80c0 	beq.w	80097c0 <_printf_i+0x1a8>
 8009640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009648:	e03a      	b.n	80096c0 <_printf_i+0xa8>
 800964a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800964e:	2b15      	cmp	r3, #21
 8009650:	d8f6      	bhi.n	8009640 <_printf_i+0x28>
 8009652:	a101      	add	r1, pc, #4	; (adr r1, 8009658 <_printf_i+0x40>)
 8009654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009658:	080096b1 	.word	0x080096b1
 800965c:	080096c5 	.word	0x080096c5
 8009660:	08009641 	.word	0x08009641
 8009664:	08009641 	.word	0x08009641
 8009668:	08009641 	.word	0x08009641
 800966c:	08009641 	.word	0x08009641
 8009670:	080096c5 	.word	0x080096c5
 8009674:	08009641 	.word	0x08009641
 8009678:	08009641 	.word	0x08009641
 800967c:	08009641 	.word	0x08009641
 8009680:	08009641 	.word	0x08009641
 8009684:	080097c9 	.word	0x080097c9
 8009688:	080096f1 	.word	0x080096f1
 800968c:	08009783 	.word	0x08009783
 8009690:	08009641 	.word	0x08009641
 8009694:	08009641 	.word	0x08009641
 8009698:	080097eb 	.word	0x080097eb
 800969c:	08009641 	.word	0x08009641
 80096a0:	080096f1 	.word	0x080096f1
 80096a4:	08009641 	.word	0x08009641
 80096a8:	08009641 	.word	0x08009641
 80096ac:	0800978b 	.word	0x0800978b
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	1d1a      	adds	r2, r3, #4
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	602a      	str	r2, [r5, #0]
 80096b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096c0:	2301      	movs	r3, #1
 80096c2:	e09f      	b.n	8009804 <_printf_i+0x1ec>
 80096c4:	6820      	ldr	r0, [r4, #0]
 80096c6:	682b      	ldr	r3, [r5, #0]
 80096c8:	0607      	lsls	r7, r0, #24
 80096ca:	f103 0104 	add.w	r1, r3, #4
 80096ce:	6029      	str	r1, [r5, #0]
 80096d0:	d501      	bpl.n	80096d6 <_printf_i+0xbe>
 80096d2:	681e      	ldr	r6, [r3, #0]
 80096d4:	e003      	b.n	80096de <_printf_i+0xc6>
 80096d6:	0646      	lsls	r6, r0, #25
 80096d8:	d5fb      	bpl.n	80096d2 <_printf_i+0xba>
 80096da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096de:	2e00      	cmp	r6, #0
 80096e0:	da03      	bge.n	80096ea <_printf_i+0xd2>
 80096e2:	232d      	movs	r3, #45	; 0x2d
 80096e4:	4276      	negs	r6, r6
 80096e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ea:	485a      	ldr	r0, [pc, #360]	; (8009854 <_printf_i+0x23c>)
 80096ec:	230a      	movs	r3, #10
 80096ee:	e012      	b.n	8009716 <_printf_i+0xfe>
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	6820      	ldr	r0, [r4, #0]
 80096f4:	1d19      	adds	r1, r3, #4
 80096f6:	6029      	str	r1, [r5, #0]
 80096f8:	0605      	lsls	r5, r0, #24
 80096fa:	d501      	bpl.n	8009700 <_printf_i+0xe8>
 80096fc:	681e      	ldr	r6, [r3, #0]
 80096fe:	e002      	b.n	8009706 <_printf_i+0xee>
 8009700:	0641      	lsls	r1, r0, #25
 8009702:	d5fb      	bpl.n	80096fc <_printf_i+0xe4>
 8009704:	881e      	ldrh	r6, [r3, #0]
 8009706:	4853      	ldr	r0, [pc, #332]	; (8009854 <_printf_i+0x23c>)
 8009708:	2f6f      	cmp	r7, #111	; 0x6f
 800970a:	bf0c      	ite	eq
 800970c:	2308      	moveq	r3, #8
 800970e:	230a      	movne	r3, #10
 8009710:	2100      	movs	r1, #0
 8009712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009716:	6865      	ldr	r5, [r4, #4]
 8009718:	60a5      	str	r5, [r4, #8]
 800971a:	2d00      	cmp	r5, #0
 800971c:	bfa2      	ittt	ge
 800971e:	6821      	ldrge	r1, [r4, #0]
 8009720:	f021 0104 	bicge.w	r1, r1, #4
 8009724:	6021      	strge	r1, [r4, #0]
 8009726:	b90e      	cbnz	r6, 800972c <_printf_i+0x114>
 8009728:	2d00      	cmp	r5, #0
 800972a:	d04b      	beq.n	80097c4 <_printf_i+0x1ac>
 800972c:	4615      	mov	r5, r2
 800972e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009732:	fb03 6711 	mls	r7, r3, r1, r6
 8009736:	5dc7      	ldrb	r7, [r0, r7]
 8009738:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800973c:	4637      	mov	r7, r6
 800973e:	42bb      	cmp	r3, r7
 8009740:	460e      	mov	r6, r1
 8009742:	d9f4      	bls.n	800972e <_printf_i+0x116>
 8009744:	2b08      	cmp	r3, #8
 8009746:	d10b      	bne.n	8009760 <_printf_i+0x148>
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	07de      	lsls	r6, r3, #31
 800974c:	d508      	bpl.n	8009760 <_printf_i+0x148>
 800974e:	6923      	ldr	r3, [r4, #16]
 8009750:	6861      	ldr	r1, [r4, #4]
 8009752:	4299      	cmp	r1, r3
 8009754:	bfde      	ittt	le
 8009756:	2330      	movle	r3, #48	; 0x30
 8009758:	f805 3c01 	strble.w	r3, [r5, #-1]
 800975c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009760:	1b52      	subs	r2, r2, r5
 8009762:	6122      	str	r2, [r4, #16]
 8009764:	f8cd a000 	str.w	sl, [sp]
 8009768:	464b      	mov	r3, r9
 800976a:	aa03      	add	r2, sp, #12
 800976c:	4621      	mov	r1, r4
 800976e:	4640      	mov	r0, r8
 8009770:	f7ff fee4 	bl	800953c <_printf_common>
 8009774:	3001      	adds	r0, #1
 8009776:	d14a      	bne.n	800980e <_printf_i+0x1f6>
 8009778:	f04f 30ff 	mov.w	r0, #4294967295
 800977c:	b004      	add	sp, #16
 800977e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	f043 0320 	orr.w	r3, r3, #32
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	4833      	ldr	r0, [pc, #204]	; (8009858 <_printf_i+0x240>)
 800978c:	2778      	movs	r7, #120	; 0x78
 800978e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	6829      	ldr	r1, [r5, #0]
 8009796:	061f      	lsls	r7, r3, #24
 8009798:	f851 6b04 	ldr.w	r6, [r1], #4
 800979c:	d402      	bmi.n	80097a4 <_printf_i+0x18c>
 800979e:	065f      	lsls	r7, r3, #25
 80097a0:	bf48      	it	mi
 80097a2:	b2b6      	uxthmi	r6, r6
 80097a4:	07df      	lsls	r7, r3, #31
 80097a6:	bf48      	it	mi
 80097a8:	f043 0320 	orrmi.w	r3, r3, #32
 80097ac:	6029      	str	r1, [r5, #0]
 80097ae:	bf48      	it	mi
 80097b0:	6023      	strmi	r3, [r4, #0]
 80097b2:	b91e      	cbnz	r6, 80097bc <_printf_i+0x1a4>
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	f023 0320 	bic.w	r3, r3, #32
 80097ba:	6023      	str	r3, [r4, #0]
 80097bc:	2310      	movs	r3, #16
 80097be:	e7a7      	b.n	8009710 <_printf_i+0xf8>
 80097c0:	4824      	ldr	r0, [pc, #144]	; (8009854 <_printf_i+0x23c>)
 80097c2:	e7e4      	b.n	800978e <_printf_i+0x176>
 80097c4:	4615      	mov	r5, r2
 80097c6:	e7bd      	b.n	8009744 <_printf_i+0x12c>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	6826      	ldr	r6, [r4, #0]
 80097cc:	6961      	ldr	r1, [r4, #20]
 80097ce:	1d18      	adds	r0, r3, #4
 80097d0:	6028      	str	r0, [r5, #0]
 80097d2:	0635      	lsls	r5, r6, #24
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	d501      	bpl.n	80097dc <_printf_i+0x1c4>
 80097d8:	6019      	str	r1, [r3, #0]
 80097da:	e002      	b.n	80097e2 <_printf_i+0x1ca>
 80097dc:	0670      	lsls	r0, r6, #25
 80097de:	d5fb      	bpl.n	80097d8 <_printf_i+0x1c0>
 80097e0:	8019      	strh	r1, [r3, #0]
 80097e2:	2300      	movs	r3, #0
 80097e4:	6123      	str	r3, [r4, #16]
 80097e6:	4615      	mov	r5, r2
 80097e8:	e7bc      	b.n	8009764 <_printf_i+0x14c>
 80097ea:	682b      	ldr	r3, [r5, #0]
 80097ec:	1d1a      	adds	r2, r3, #4
 80097ee:	602a      	str	r2, [r5, #0]
 80097f0:	681d      	ldr	r5, [r3, #0]
 80097f2:	6862      	ldr	r2, [r4, #4]
 80097f4:	2100      	movs	r1, #0
 80097f6:	4628      	mov	r0, r5
 80097f8:	f7f6 fcea 	bl	80001d0 <memchr>
 80097fc:	b108      	cbz	r0, 8009802 <_printf_i+0x1ea>
 80097fe:	1b40      	subs	r0, r0, r5
 8009800:	6060      	str	r0, [r4, #4]
 8009802:	6863      	ldr	r3, [r4, #4]
 8009804:	6123      	str	r3, [r4, #16]
 8009806:	2300      	movs	r3, #0
 8009808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800980c:	e7aa      	b.n	8009764 <_printf_i+0x14c>
 800980e:	6923      	ldr	r3, [r4, #16]
 8009810:	462a      	mov	r2, r5
 8009812:	4649      	mov	r1, r9
 8009814:	4640      	mov	r0, r8
 8009816:	47d0      	blx	sl
 8009818:	3001      	adds	r0, #1
 800981a:	d0ad      	beq.n	8009778 <_printf_i+0x160>
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	079b      	lsls	r3, r3, #30
 8009820:	d413      	bmi.n	800984a <_printf_i+0x232>
 8009822:	68e0      	ldr	r0, [r4, #12]
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	4298      	cmp	r0, r3
 8009828:	bfb8      	it	lt
 800982a:	4618      	movlt	r0, r3
 800982c:	e7a6      	b.n	800977c <_printf_i+0x164>
 800982e:	2301      	movs	r3, #1
 8009830:	4632      	mov	r2, r6
 8009832:	4649      	mov	r1, r9
 8009834:	4640      	mov	r0, r8
 8009836:	47d0      	blx	sl
 8009838:	3001      	adds	r0, #1
 800983a:	d09d      	beq.n	8009778 <_printf_i+0x160>
 800983c:	3501      	adds	r5, #1
 800983e:	68e3      	ldr	r3, [r4, #12]
 8009840:	9903      	ldr	r1, [sp, #12]
 8009842:	1a5b      	subs	r3, r3, r1
 8009844:	42ab      	cmp	r3, r5
 8009846:	dcf2      	bgt.n	800982e <_printf_i+0x216>
 8009848:	e7eb      	b.n	8009822 <_printf_i+0x20a>
 800984a:	2500      	movs	r5, #0
 800984c:	f104 0619 	add.w	r6, r4, #25
 8009850:	e7f5      	b.n	800983e <_printf_i+0x226>
 8009852:	bf00      	nop
 8009854:	0800ca25 	.word	0x0800ca25
 8009858:	0800ca36 	.word	0x0800ca36

0800985c <memmove>:
 800985c:	4288      	cmp	r0, r1
 800985e:	b510      	push	{r4, lr}
 8009860:	eb01 0402 	add.w	r4, r1, r2
 8009864:	d902      	bls.n	800986c <memmove+0x10>
 8009866:	4284      	cmp	r4, r0
 8009868:	4623      	mov	r3, r4
 800986a:	d807      	bhi.n	800987c <memmove+0x20>
 800986c:	1e43      	subs	r3, r0, #1
 800986e:	42a1      	cmp	r1, r4
 8009870:	d008      	beq.n	8009884 <memmove+0x28>
 8009872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800987a:	e7f8      	b.n	800986e <memmove+0x12>
 800987c:	4402      	add	r2, r0
 800987e:	4601      	mov	r1, r0
 8009880:	428a      	cmp	r2, r1
 8009882:	d100      	bne.n	8009886 <memmove+0x2a>
 8009884:	bd10      	pop	{r4, pc}
 8009886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800988a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800988e:	e7f7      	b.n	8009880 <memmove+0x24>

08009890 <_sbrk_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	4d06      	ldr	r5, [pc, #24]	; (80098ac <_sbrk_r+0x1c>)
 8009894:	2300      	movs	r3, #0
 8009896:	4604      	mov	r4, r0
 8009898:	4608      	mov	r0, r1
 800989a:	602b      	str	r3, [r5, #0]
 800989c:	f7f9 fb88 	bl	8002fb0 <_sbrk>
 80098a0:	1c43      	adds	r3, r0, #1
 80098a2:	d102      	bne.n	80098aa <_sbrk_r+0x1a>
 80098a4:	682b      	ldr	r3, [r5, #0]
 80098a6:	b103      	cbz	r3, 80098aa <_sbrk_r+0x1a>
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	bd38      	pop	{r3, r4, r5, pc}
 80098ac:	20000544 	.word	0x20000544

080098b0 <memcpy>:
 80098b0:	440a      	add	r2, r1
 80098b2:	4291      	cmp	r1, r2
 80098b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80098b8:	d100      	bne.n	80098bc <memcpy+0xc>
 80098ba:	4770      	bx	lr
 80098bc:	b510      	push	{r4, lr}
 80098be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098c6:	4291      	cmp	r1, r2
 80098c8:	d1f9      	bne.n	80098be <memcpy+0xe>
 80098ca:	bd10      	pop	{r4, pc}

080098cc <_realloc_r>:
 80098cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d0:	4680      	mov	r8, r0
 80098d2:	4614      	mov	r4, r2
 80098d4:	460e      	mov	r6, r1
 80098d6:	b921      	cbnz	r1, 80098e2 <_realloc_r+0x16>
 80098d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098dc:	4611      	mov	r1, r2
 80098de:	f7ff bc49 	b.w	8009174 <_malloc_r>
 80098e2:	b92a      	cbnz	r2, 80098f0 <_realloc_r+0x24>
 80098e4:	f7ff fbda 	bl	800909c <_free_r>
 80098e8:	4625      	mov	r5, r4
 80098ea:	4628      	mov	r0, r5
 80098ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f0:	f000 f81b 	bl	800992a <_malloc_usable_size_r>
 80098f4:	4284      	cmp	r4, r0
 80098f6:	4607      	mov	r7, r0
 80098f8:	d802      	bhi.n	8009900 <_realloc_r+0x34>
 80098fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098fe:	d812      	bhi.n	8009926 <_realloc_r+0x5a>
 8009900:	4621      	mov	r1, r4
 8009902:	4640      	mov	r0, r8
 8009904:	f7ff fc36 	bl	8009174 <_malloc_r>
 8009908:	4605      	mov	r5, r0
 800990a:	2800      	cmp	r0, #0
 800990c:	d0ed      	beq.n	80098ea <_realloc_r+0x1e>
 800990e:	42bc      	cmp	r4, r7
 8009910:	4622      	mov	r2, r4
 8009912:	4631      	mov	r1, r6
 8009914:	bf28      	it	cs
 8009916:	463a      	movcs	r2, r7
 8009918:	f7ff ffca 	bl	80098b0 <memcpy>
 800991c:	4631      	mov	r1, r6
 800991e:	4640      	mov	r0, r8
 8009920:	f7ff fbbc 	bl	800909c <_free_r>
 8009924:	e7e1      	b.n	80098ea <_realloc_r+0x1e>
 8009926:	4635      	mov	r5, r6
 8009928:	e7df      	b.n	80098ea <_realloc_r+0x1e>

0800992a <_malloc_usable_size_r>:
 800992a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800992e:	1f18      	subs	r0, r3, #4
 8009930:	2b00      	cmp	r3, #0
 8009932:	bfbc      	itt	lt
 8009934:	580b      	ldrlt	r3, [r1, r0]
 8009936:	18c0      	addlt	r0, r0, r3
 8009938:	4770      	bx	lr
	...

0800993c <_init>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	bf00      	nop
 8009940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009942:	bc08      	pop	{r3}
 8009944:	469e      	mov	lr, r3
 8009946:	4770      	bx	lr

08009948 <_fini>:
 8009948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994a:	bf00      	nop
 800994c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994e:	bc08      	pop	{r3}
 8009950:	469e      	mov	lr, r3
 8009952:	4770      	bx	lr
